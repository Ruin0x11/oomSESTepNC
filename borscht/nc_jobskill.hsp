*nc_com_jobskill
	listmax = 0
	list(0, listmax) = 0, -999
	listn(0, listmax) = lang("Ç±ÇÍà»è„éÊìæÇµÇ»Ç¢", "No more acquisitions")
	listn(1, listmax) = lang("", "")
	listmax++
	if ( nc_intb_001 == 0 | nc_intb_001 == 56 ) {
		repeat 22
			list(0, listmax) = cnt + 1, cnt + 1
			listn(0, listmax) = skillname(911 + cnt)
			listn(1, listmax) = skilldesc(911 + cnt)
			listmax++
		loop
	}
	repeat 100
		if ( nc_getskillname(100 + cnt) == "" ) {
			continue
		}
		list(0, listmax) = cnt + 100, cnt + 100
		listn(0, listmax) = nc_getskillname(100 + cnt)
		listn(1, listmax) = nc_getskilldesc(100 + cnt)
		listmax++
	loop
	gosub *sort_list
	redraw 0
	cs_bk = -1
	pagemax = (listmax - 1) / pagesize
	if ( page < 0 ) {
		page = pagemax
	}
	else {
		if ( page > pagemax ) {
			page = 0
		}
	}

*nc_com_jobskill_pgchk
	redraw 0
	s = lang("êEã∆ãZî\", "Job feat"), lang("åàíË [ãZî\éÊìæêÿÇËë÷Ç¶]", "Enter [Gain Skill Switch]")
	i = 0
	display_window (windoww - 730) / 2 + inf_screenx, winposy(430, i) + i * 15, 730, 430, 55, 40
	s = lang("écÇË " + nc_intb_002 + "å¬ÇÃãZî\ÇéÊìæÇ≈Ç´ÇÈ", "You can acquire " + nc_intb_002 + " feats")
	display_note s, 50
	if ( jp ) {
		s = "ñºèÃ", "å¯â "
	}
	else {
		s = "Name", "Conditions"
	}
	display_topic s, wx + 46, wy + 36
	display_topic s(1), wx + 230, wy + 36
	keyrange = 0
	repeat pagesize
		p = pagesize * page + cnt
		if ( p >= listmax ) {
			break
		}
		key_list(cnt) = key_select(cnt)
		keyrange++
		if ( cnt \ 2 == 0 ) {
			pos wx + 57, wy + 66 + cnt * 19
			gfini 640, 18
			gfdec2 12, 14, 16
		}
		display_key wx + 50, wy + 66 + cnt * 19 - 2, cnt
	loop
	font lang(cfg_font1, cfg_font2), 14 - en * 2, 0
	cs_listbk
	repeat pagesize
		p = pagesize * page + cnt
		if ( p >= listmax ) {
			break
		}
		if ( nc_gettrait(nc_intb_001, list(1, p)) ) {
			cs_list listn(0, p), wx + 78, wy + 66 + cnt * 19 - 1, 19, 0, 6, 0
		}
		else {
			cs_list listn(0, p), wx + 78, wy + 66 + cnt * 19 - 1, 19, 0, 5, 0
		}
		pos wx + 230, wy + 66 + cnt * 19 + 2
		mes listn(1, p)
	loop
	if ( keyrange != 0 ) {
		cs_bk = cs
	}
	redraw 1
	await cfg_wait1
	key_check
	cursor_check
	p = -1
	repeat keyrange
		if ( key == key_select(cnt) ) {
			p = pagesize * page + cnt
			break
		}
	loop
	if ( p != (-1) ) {
		if ( list(1, p) == (-999) ) {
			return 1
		}
		snd SOUNDLIST_SPEND1
		if ( nc_gettrait(nc_intb_001, list(1, p)) ) {
			rmfaction nc_intb_001, "nc_trait," + list(1, p)
			nc_intb_002 += 1
		}
		else {
			addfaction nc_intb_001, "nc_trait," + list(1, p)
			nc_intb_002 -= 1
		}
		if ( nc_intb_002 <= 0 ) {
			return 1
		}
	}
	if ( key == key_pageup ) {
		if ( pagemax != 0 ) {
			snd SOUNDLIST_POP1
			page++
			goto *nc_com_jobskill
		}
	}
	if ( key == key_pagedown ) {
		if ( pagemax != 0 ) {
			snd SOUNDLIST_POP1
			page--
			goto *nc_com_jobskill
		}
	}
	if ( key == key_cancel ) {
		if ( locvar_check_adddamage_arrow_charamake ) {
			return 0
		}
	}
	goto *nc_com_jobskill_pgchk

#defcfunc ibit int ibit_bit, int ibit_itemid
	HMMBITCHECK inv(35 + ibit_bit / 32, ibit_itemid), ibit_bit \ 32
	return abs(stat)

#deffunc ibitmod int ibitmod_bit, int ibitmod_itemid, int ibitmod_seton
	if ( ibitmod_seton == FALSE ) {
		HMMBITOFF inv(35 + ibitmod_bit / 32, ibitmod_itemid), ibitmod_bit \ 32
		return
	}
	HMMBITON inv(35 + ibitmod_bit / 32, ibitmod_itemid), ibitmod_bit \ 32
	return

#defcfunc refitem int refitem_dbid, int refitem_dbspec, int refitem_prm2
	dbmode = DBMODE_REF_SPEC
	dbidbk = dbid
	dbid = refitem_dbid
	dbspec = refitem_dbspec
	cibkref = refitem_prm2
	gosub *db_item
	dbid = dbidbk
	return stat

#defcfunc iequiploc int iequiploc_itemid, int iequiploc_prm1
	locvar_iequiploc_p = refitem(iID(iequiploc_itemid), DBSPEC_TYPE, iequiploc_itemid)
	if ( locvar_iequiploc_p == 12000 ) {
		if ( iequiploc_prm1 == 0 | iequiploc_prm1 == 1 ) {
			return 1
		}
	}
	if ( locvar_iequiploc_p == 34000 ) {
		if ( iequiploc_prm1 == 0 | iequiploc_prm1 == 2 ) {
			return 2
		}
	}
	if ( locvar_iequiploc_p == 20000 ) {
		if ( iequiploc_prm1 == 0 | iequiploc_prm1 == 3 ) {
			return 3
		}
	}
	if ( locvar_iequiploc_p == 16000 ) {
		if ( iequiploc_prm1 == 0 | iequiploc_prm1 == 4 ) {
			return 4
		}
	}
	if ( locvar_iequiploc_p == 10000 | locvar_iequiploc_p == 14000 ) {
		if ( iequiploc_prm1 == 0 | iequiploc_prm1 == 5 ) {
			return 5
		}
	}
	if ( locvar_iequiploc_p == 32000 ) {
		if ( iequiploc_prm1 == 0 | iequiploc_prm1 == 6 ) {
			return 6
		}
	}
	if ( locvar_iequiploc_p == 22000 ) {
		if ( iequiploc_prm1 == 0 | iequiploc_prm1 == 7 ) {
			return 7
		}
	}
	if ( locvar_iequiploc_p == 18000 ) {
		if ( iequiploc_prm1 == 0 | iequiploc_prm1 == 9 ) {
			return 9
		}
	}
	if ( locvar_iequiploc_p == 24000 ) {
		if ( iequiploc_prm1 == 0 | iequiploc_prm1 == 10 | iequiploc_prm1 == 5 ) {
			if ( iequiploc_prm1 != 5 | iSkillRef(iequiploc_itemid) != SKILL_WEAPON_BOW ) {
				return 10
			}
		}
	}
	if ( locvar_iequiploc_p == 25000 ) {
		if ( iequiploc_prm1 == 0 | iequiploc_prm1 == 11 ) {
			return 11
		}
	}
	if ( locvar_iequiploc_p == 19000 ) {
		if ( iequiploc_prm1 == 0 | iequiploc_prm1 == 8 ) {
			return 8
		}
	}
	return 0

#deffunc setunid int setunid_charid, int setunid_unid
	cUNID(setunid_charid) = setunid_unid
	if ( cPic(setunid_charid) \ 1000 < 661 | cPic(setunid_charid) \ 1000 > 824 ) {
		if ( ocbit(8, setunid_charid) == 0 ) {
			if ( userdata2(8, cUNID(setunid_charid)) != 0 ) {
				cPic(setunid_charid) = limit(userdata2(8, cUNID(setunid_charid)), 0, 33 * 25)
				cPic(setunid_charid) += limit(userdata2(9, cUNID(setunid_charid)), 0, 30) * 1000
			}
			else {
				cPic(setunid_charid) = 825 + setunid_unid
			}
		}
	}
	return

#deffunc getunid int getunid_charid
	locvar_getunid_f = 0
	repeat usernpcmax
		if ( cnUNTAG(getunid_charid) == userdatan(0, cnt) ) {
			setunid getunid_charid, cnt
			locvar_getunid_f = 1
			break
		}
	loop
	if ( locvar_getunid_f == 0 ) {
		cPic(getunid_charid) = 0 * 3000 + 1
		cUNID(getunid_charid) = usernpcmax
		cnName(getunid_charid) = lang("écÇËÉJÉX", "garbage")
	}
	return locvar_getunid_f

#defcfunc findunid str findunid_arg1
	locvar_getunid_f = 0
	repeat usernpcmax
		if ( findunid_arg1 == userdatan(0, cnt) ) {
			locvar_getunid_f = 1 + cnt
			break
		}
	loop
	return locvar_getunid_f

#defcfunc synccheck int synccheck_arg1, int synccheck_arg2
	if ( synccheck_arg2 == (-1) ) {
		if ( cSync(synccheck_arg1) == msync ) {
			return 1
		}
		if ( synccheck_arg1 == gRider ) {
			return 1
		}
		if ( ocPetBeingRiddenIdx(synccheck_arg1) != 0 ) {
			if ( cSync(ocPetBeingRiddenIdx(synccheck_arg1)) == msync ) {
				return 1
			}
		}
		return 0
	}
	if ( mapsync(synccheck_arg1, synccheck_arg2) == msync ) {
		return 1
	}
	return 0

#defcfunc evid
	if ( evnum <= 0 ) {
		return -1
	}
	return evlist(evnum - 1)

#defcfunc evfind int evfind_eventid
	locvar_evfind_f = 0
	repeat evnum
		if ( evlist(cnt) == evfind_eventid ) {
			locvar_evfind_f = 1
		}
	loop
	return locvar_evfind_f

#deffunc evadd int evadd_evid, int evadd_param1, int evadd_param2
	if ( evproc ) {
		evlist(evnum) = evlist(evnum - 1)
		evdata1(evnum) = evdata1(evnum - 1)
		evdata2(evnum) = evdata2(evnum - 1)
		evlist(evnum - 1) = evadd_evid
		evdata1(evnum - 1) = evadd_param1
		evdata2(evnum - 1) = evadd_param2
	}
	else {
		evlist(evnum) = evadd_evid
		evdata1(evnum) = evadd_param1
		evdata2(evnum) = evadd_param2
	}
	evnum++
	return

#deffunc sndload str sndload_filepath, int sndload_sound_id
	if ( sndload_sound_id < 7 ) {
		if ( cfg_sound == 1 ) {
			DSLOADFNAME sndload_filepath, sndload_sound_id
		}
		else {
			if ( cfg_music == 2 ) {
				mmload sndload_filepath, sndload_sound_id
			}
		}
	}
	soundfile(sndload_sound_id) = sndload_filepath
	return

#deffunc snd int snd_sound_id, int snd_looping, int snd_stop_if_playing
	if ( cfg_sound == 0 ) {
		return
	}
	locvar_snd_sound = snd_sound_id
	if ( locvar_snd_sound > 7 ) {
		if ( snd_looping ) {
			locvar_snd_sound = 7 + 6
			if ( snd_sound_id == SOUNDLIST_BG_SEA ) {
				locvar_snd_sound = 7 + 6 + 1
			}
			if ( snd_sound_id == SOUNDLIST_BG_TOWN ) {
				locvar_snd_sound = 7 + 6 + 2
			}
			if ( snd_sound_id == SOUNDLIST_BG_FIRE ) {
				locvar_snd_sound = 7 + 6 + 3
			}
		}
		else {
			locvar_snd_sound = 7
			locvar_snd_f = 0
			if ( snd_stop_if_playing ) {
				repeat 6, 7
					CHECKPLAY cnt
					if ( stat ) {
						if ( soundlist(cnt - 7) == locvar_snd_sound ) {
							locvar_snd_sound = cnt
							locvar_snd_f = 1
							break
						}
					}
				loop
			}
			if ( locvar_snd_f == 0 ) {
				repeat 6, 7
					CHECKPLAY cnt
					if ( stat == 0 ) {
						locvar_snd_sound = cnt
						soundlist(cnt - 7) = locvar_snd_sound
					}
				loop
			}
		}
		if ( cfg_sound == 1 ) {
			DSLOADFNAME soundfile(snd_sound_id), locvar_snd_sound
		}
		else {
			if ( cfg_sound == 2 ) {
				mmload soundfile(snd_sound_id), locvar_snd_sound
			}
		}
	}
	if ( cfg_sound == 1 ) {
		DSPLAY locvar_snd_sound, snd_looping
	}
	else {
		if ( cfg_sound == 2 ) {
			mmplay locvar_snd_sound
		}
	}
	return

*sound_init
	dim soundlist, 6
	if ( cfg_sound == 1 ) {
		DSGETMASTERVOLUME
		cfg_svolume = abs(stat)
	}
	folder = exedir + "sound\\"
	sndload folder + "exitmap1.wav", SOUNDLIST_EXITMAP1
	sndload folder + "book1.wav", SOUNDLIST_BOOK1
	sndload folder + "write1.wav", SOUNDLIST_WRITE1
	sndload folder + "pop1.wav", SOUNDLIST_POP1
	sndload folder + "kill1.wav", SOUNDLIST_KILL1
	sndload folder + "kill2.wav", SOUNDLIST_KILL2
	sndload folder + "trap1.wav", SOUNDLIST_TRAP1
	sndload folder + "more1.wav", SOUNDLIST_MORE1
	sndload folder + "getgold1.wav", SOUNDLIST_GETGOLD1
	sndload folder + "paygold1.wav", SOUNDLIST_PAYGOLD1
	sndload folder + "equip1.wav", SOUNDLIST_EQUIP1
	sndload folder + "get1.wav", SOUNDLIST_GET1
	sndload folder + "get2.wav", SOUNDLIST_GET2
	sndload folder + "drop1.wav", SOUNDLIST_DROP1
	sndload folder + "drink1.wav", SOUNDLIST_DRINK1
	sndload folder + "eat1.wav", SOUNDLIST_EAT1
	sndload folder + "spend1.wav", SOUNDLIST_SPEND1
	sndload folder + "ding1.wav", SOUNDLIST_DING1
	sndload folder + "ding3.wav", SOUNDLIST_DING3
	sndload folder + "dead1.wav", SOUNDLIST_DEAD1
	sndload folder + "ok1.wav", SOUNDLIST_OK1
	sndload folder + "dig1.wav", SOUNDLIST_DIG1
	sndload folder + "bash1.wav", SOUNDLIST_BASH1
	sndload folder + "complete1.wav", SOUNDLIST_COMPLETE1
	sndload folder + "alert1.wav", SOUNDLIST_ALERT1
	sndload folder + "locked1.wav", SOUNDLIST_LOCKED1
	sndload folder + "chest1.wav", SOUNDLIST_CHEST1
	sndload folder + "ding2.wav", SOUNDLIST_DING2
	sndload folder + "cook1.wav", SOUNDLIST_COOK1
	sndload folder + "pop2.wav", SOUNDLIST_POP2
	sndload folder + "fail1.wav", SOUNDLIST_FAIL1
	sndload folder + "build1.wav", SOUNDLIST_BUILD1
	sndload folder + "bow1.wav", SOUNDLIST_BOW1
	sndload folder + "atk1.wav", SOUNDLIST_ATK1
	sndload folder + "atk2.wav", SOUNDLIST_ATK2
	sndload folder + "gun1.wav", SOUNDLIST_GUN1
	sndload folder + "throw1.wav", SOUNDLIST_THROW1
	sndload folder + "heart1.wav", SOUNDLIST_HEART1
	sndload folder + "heal1.wav", SOUNDLIST_HEAL1
	sndload folder + "teleport1.wav", SOUNDLIST_TELEPORT1
	sndload folder + "ball1.wav", SOUNDLIST_BALL1
	sndload folder + "breath1.wav", SOUNDLIST_BREATH1
	sndload folder + "bolt1.wav", SOUNDLIST_BOLT1
	sndload folder + "arrow1.wav", SOUNDLIST_ARROW1
	sndload folder + "curse1.wav", SOUNDLIST_CURSE1
	sndload folder + "pop3.wav", SOUNDLIST_POP3
	sndload folder + "chime.wav", SOUNDLIST_CHIME
	sndload folder + "laser1.wav", SOUNDLIST_LASER1
	sndload folder + "web.wav", SOUNDLIST_WEB
	sndload folder + "cheer.wav", SOUNDLIST_CHEER
	sndload folder + "door1.wav", SOUNDLIST_DOOR1
	sndload folder + "crush1.wav", SOUNDLIST_CRUSH1
	sndload folder + "crush2.wav", SOUNDLIST_CRUSH2
	sndload folder + "fire1.wav", SOUNDLIST_FIRE1
	sndload folder + "snow.wav", SOUNDLIST_SNOW
	sndload folder + "fish_cast.wav", SOUNDLIST_FISH_CAST
	sndload folder + "fish_get.wav", SOUNDLIST_FISH_GET
	sndload folder + "fish_fight.wav", SOUNDLIST_FISH_FIGHT
	sndload folder + "ammo.wav", SOUNDLIST_AMMO
	sndload folder + "throw2.wav", SOUNDLIST_THROW2
	sndload folder + "foot1a.wav", SOUNDLIST_FOOT1A
	sndload folder + "foot2a.wav", SOUNDLIST_FOOT2A
	sndload folder + "foot1b.wav", SOUNDLIST_FOOT1B
	sndload folder + "foot2b.wav", SOUNDLIST_FOOT2B
	sndload folder + "foot2c.wav", SOUNDLIST_FOOT2C
	sndload folder + "click1.wav", SOUNDLIST_CLICK1
	sndload folder + "get3.wav", SOUNDLIST_GET3
	sndload folder + "card1.wav", SOUNDLIST_CARD1
	sndload folder + "water.wav", SOUNDLIST_WATER
	sndload folder + "water2.wav", SOUNDLIST_WATER2
	sndload folder + "dig2.wav", SOUNDLIST_DIG2
	sndload folder + "bush1.wav", SOUNDLIST_BUSH1
	sndload folder + "gasha.wav", SOUNDLIST_GASHA
	sndload folder + "cursor1.wav", SOUNDLIST_CURSOR1
	sndload folder + "pop4.wav", SOUNDLIST_POP4
	sndload folder + "punish1.wav", SOUNDLIST_PUNISH1
	sndload folder + "pray1.wav", SOUNDLIST_PRAY1
	sndload folder + "offer1.wav", SOUNDLIST_OFFER1
	sndload folder + "fizzle.wav", SOUNDLIST_FIZZLE
	sndload folder + "door2.wav", SOUNDLIST_DOOR2
	sndload folder + "foot.wav", SOUNDLIST_FOOT
	sndload folder + "miss.wav", SOUNDLIST_MISS
	sndload folder + "night.wav", SOUNDLIST_NIGHT
	sndload folder + "bg_rain.wav", SOUNDLIST_BG_RAIN
	sndload folder + "bg_thunder.wav", SOUNDLIST_BG_THUNDER
	sndload folder + "bg_wind.wav", SOUNDLIST_BG_WIND
	sndload folder + "bg_sea.wav", SOUNDLIST_BG_SEA
	sndload folder + "bg_town.wav", SOUNDLIST_BG_TOWN
	sndload folder + "bg_fire.wav", SOUNDLIST_BG_FIRE
	sndload folder + "scroll.wav", SOUNDLIST_SCROLL
	sndload folder + "log.wav", SOUNDLIST_LOG
	sndload folder + "chara.wav", SOUNDLIST_CHARA
	sndload folder + "wear.wav", SOUNDLIST_WEAR
	sndload folder + "feat.wav", SOUNDLIST_FEAT
	sndload folder + "port.wav", SOUNDLIST_PORT
	sndload folder + "unpop1.wav", SOUNDLIST_UNPOP1
	sndload folder + "chat.wav", SOUNDLIST_CHAT
	sndload folder + "inv.wav", SOUNDLIST_INV
	sndload folder + "skill.wav", SOUNDLIST_SKILL
	sndload folder + "spell.wav", SOUNDLIST_SPELL
	sndload folder + "dice.wav", SOUNDLIST_DICE
	sndload folder + "vomit.wav", SOUNDLIST_VOMIT
	sndload folder + "atksword.wav", SOUNDLIST_ATKSWORD
	sndload folder + "atk_ice.wav", SOUNDLIST_ATK_ICE
	sndload folder + "atk_elec.wav", SOUNDLIST_ATK_ELEC
	sndload folder + "atk_fire.wav", SOUNDLIST_ATK_FIRE
	sndload folder + "atk_hell.wav", SOUNDLIST_ATK_HELL
	sndload folder + "atk_poison.wav", SOUNDLIST_ATK_POISON
	sndload folder + "atk_nerve.wav", SOUNDLIST_ATK_NERVE
	sndload folder + "atk_sound.wav", SOUNDLIST_ATK_SOUND
	sndload folder + "atk_mind.wav", SOUNDLIST_ATK_MIND
	sndload folder + "atk_chaos.wav", SOUNDLIST_ATK_CHAOS
	sndload folder + "atk_dark.wav", SOUNDLIST_ATK_DARK
	sndload folder + "curse2.wav", SOUNDLIST_CURSE2
	sndload folder + "curse3.wav", SOUNDLIST_CURSE3
	sndload folder + "enc.wav", SOUNDLIST_ENC
	sndload folder + "enc2.wav", SOUNDLIST_ENC2
	sndload folder + "pray2.wav", SOUNDLIST_PRAY2
	sndload folder + "offer2.wav", SOUNDLIST_OFFER2
	isyoungersistervoice = 0
	exist folder + "oniichan_01.wav"
	if ( strsize != (-1) ) {
		sndload folder + "oniichan_01.wav", 150
		sndload folder + "oneechan_01.wav", 151
		sndload folder + "auchi.wav", 152
		sndload folder + "hidoi.wav", 153
		sndload folder + "yatta.wav", 154
		sndload folder + "nandeyanen.wav", 155
		isyoungersistervoice = 1
	}
	sndload folder + "arart.wav", 200
	repeat length(exsoundlist)
		s = folder + exsoundlist(cnt) + "0.wav"
		exist s
		if ( strsize != (-1) ) {
			sndload s, 122 + cnt
		}
	loop
	return

*music_init
	s = exedir + "user\\music\\musiclist.txt"
	exist s
	if ( strsize == (-1) ) {
		return
	}
	notesel buff
	noteload s
	repeat noteinfo(0)
		noteget s, cnt
		if ( s == "" ) {
			continue
		}
		musicfile(cnt + 50) = strmid(s, 0, instr(s, 0, "\t"))
	loop
	return

*music_play
	procid = (procid + 1) \ 10
	proclist(procid) = "Music" + " ct:" + ct
	if ( dbg_outputdebuglog ) {
	}
	env = SOUNDLIST_NONE
	if ( gWeather == WEATHER_RAIN ) {
		env = SOUNDLIST_BG_RAIN
	}
	if ( gWeather == WEATHER_HARD_RAIN ) {
		env = SOUNDLIST_BG_THUNDER
	}
	if ( gWeather == WEATHER_ETHER ) {
		env = SOUNDLIST_BG_WIND
	}
	if ( env != envwprev ) {
		envwprev = env
		if ( cfg_sound == 1 ) {
			if ( env == SOUNDLIST_NONE ) {
				DSSTOP 7 + 6
				DSRELEASE 7 + 6
			}
			else {
				snd env, TRUE
			}
		}
	}
	if ( mField == MAP_FIELD_OUTDOOR ) {
		DSSETVOLUME 7 + 6, cfg_svolume * 8 / 10
	}
	else {
		if ( gLevel  == 1 | gArea  == AREA_SHELTER ) {
			DSSETVOLUME 7 + 6, cfg_svolume * 2 / 10
		}
		else {
			DSSETVOLUME 7 + 6, 0
		}
	}
	if ( gArea  == AREA_PORT_KAPUL | gArea  == 50 | gArea  == 51 ) {
		snd SOUNDLIST_BG_SEA, TRUE
	}
	else {
		DSSTOP 7 + 6 + 1
		DSRELEASE 7 + 6 + 1
	}
	if ( gArea  == AREA_VERNIS & gLevel  == 1 ) {
		snd SOUNDLIST_BG_TOWN, TRUE
	}
	else {
		DSSTOP 7 + 6 + 2
		DSRELEASE 7 + 6 + 2
	}
	if ( mFireSound == 1 ) {
		snd SOUNDLIST_BG_FIRE, TRUE
	}
	else {
		DSSTOP 7 + 6 + 3
		DSRELEASE 7 + 6 + 3
	}
	if ( envonly == 1 ) {
		envonly = 0
		return
	}
	if ( cfg_music == 0 ) {
		return
	}
	if ( usermusic ) {
		return
	}
	if ( music == MUSICLIST_NONE ) {
		if ( areaType(gArea ) == (4 /*!!!@[MAP_TYPE_DUNGEON_RANGE @@@ MAP_TYPE_LOCAL]@!!! */) ) {
			music = musicprev
		}
		if ( areaType(gArea ) == MAP_TYPE_TOWN ) {
			music = MUSICLIST_MCTOWN1
		}
		if ( areaType(gArea ) == MAP_TYPE_HOME ) {
			music = MUSICLIST_MCHOME
		}
		if ( areaType(gArea ) >= (20 /*!!!@[MAP_TYPE_DUNGEON @@@ MAP_TYPE_DUNGEON_MIN]@!!! */) ) {
			music = 55 + gHour  \ 6
		}
		if ( mMusic != MUSICLIST_NONE ) {
			music = mMusic
		}
		if ( areaId(gArea ) == AREA_RANDOM_DUNGEON ) {
			if ( gLevel  == areaCanSave(gArea ) ) {
				if ( areaBoss(gArea ) != (-1) ) {
					music = MUSICLIST_MCBOSS
				}
			}
		}
		if ( areaId(gArea ) == AREA_LESIMAS & gLevel  == areaCanSave(gArea ) ) {
			if ( npcmemory(0, CREATURE_ID_ZEOME_THE_FALSE_PROPHET) == 0 ) {
				music = MUSICLIST_MCLASTBOSS
			}
			else {
				music = MUSICLIST_MCCHAOS
			}
		}
		if ( areaId(gArea ) == AREA_TOWER_OF_FIRE & gLevel  == areaCanSave(gArea ) ) {
			if ( npcmemory(0, CREATURE_ID_QURUIZA_THE_RED_EYED_DECEIVER) == 0 & npcmemory(0, CREATURE_ID_CORGON_THE_STEEL_DRAGON) == 0 ) {
				music = MUSICLIST_MCLASTBOSS
			}
		}
		if ( areaId(gArea ) == AREA_CRYPT_OF_THE_DAMNED & gLevel  == areaCanSave(gArea ) ) {
			if ( npcmemory(0, CREATURE_ID_ISSIZZLE_THE_DARK_ABOMINATION) == 0 ) {
				music = MUSICLIST_MCLASTBOSS
			}
		}
		if ( areaId(gArea ) == AREA_ANCIENT_CASTLE & gLevel  == areaCanSave(gArea ) ) {
			if ( npcmemory(0, CREATURE_ID_WYNAN_THE_LORD_OF_THE_ANCIENT_CASTLE) == 0 ) {
				music = MUSICLIST_MCLASTBOSS
			}
		}
		if ( gArea  == AREA_QUEST ) {
			if ( gQuest == QUEST_TYPE_HUNT ) {
				music = MUSICLIST_MCBATTLE1
			}
			if ( gQuest == QUEST_TYPE_HARVEST ) {
				music = MUSICLIST_MCVILLAGE1
			}
			if ( gQuest == QUEST_TYPE_PARTY ) {
				music = MUSICLIST_MCCASINO
			}
			if ( gQuest == QUEST_TYPE_CONQUER ) {
				music = MUSICLIST_MCBOSS
			}
			if ( gQuest == QUEST_TYPE_HUNTEX ) {
				music = MUSICLIST_MCARENA
			}
			if ( gQuest == 1020 ) {
				music = MUSICLIST_MCCASINO
			}
			if ( gQuest == 1021 ) {
				music = MUSICLIST_MCBOSS
			}
		}
		if ( gArea  == AREA_ARENA ) {
			music = MUSICLIST_MCARENA
		}
		if ( gArea  == AREA_LARNA ) {
			music = MUSICLIST_MCVILLAGE1
		}
		if ( gArea  == AREA_PORT_KAPUL ) {
			music = MUSICLIST_MCTOWN2
		}
		if ( gArea  == AREA_LUMIEST ) {
			music = MUSICLIST_MCTOWN2
		}
		if ( gArea  == AREA_YOWYN ) {
			music = MUSICLIST_MCVILLAGE1
		}
		if ( gArea  == AREA_DERPHY ) {
			music = MUSICLIST_MCTOWN3
		}
		if ( gArea  == AREA_PALMIA ) {
			music = MUSICLIST_MCTOWN4
		}
		if ( gArea  == AREA_CYBER_DOME ) {
			music = MUSICLIST_MCTOWN5
		}
		if ( gArea  == AREA_NOYEL ) {
			music = MUSICLIST_MCTOWN6
		}
		if ( gArea  == 50 ) {
			music = MUSICLIST_MCTOWN2
		}
		if ( gArea  == 51 ) {
			music = MUSICLIST_MCTOWN2
		}
		if ( gArea  == 52 ) {
			music = MUSICLIST_MCVILLAGE1
		}
		if ( gArea  == 53 ) {
			music = MUSICLIST_MCTOWN1
		}
		if ( gArea  == 54 ) {
			music = MUSICLIST_MCTOWN4
		}
		if ( gArea  == MAX_AREA_OLD ) {
			music = 94
		}
	}
	if ( music == MUSICLIST_NONE | areaType(gArea ) == MAP_TYPE_WORLD & music != MUSICLIST_SCENE_MUSIC ) {
		music = 86 + gDay  \ 3
	}
	if ( musicloop == 1 ) {
		musicloop = 0
	}
	else {
		musicloop = 65535
	}
	if ( musicprev != music ) {
		musicprev = music
		mmstop
		if ( cfg_music == 1 ) {
			DMSTOP
			DMLOADFNAME exedir + "sound\\gm_on.mid", 0
			DMPLAY 1, 0
		}
		if ( cfg_music == 3 ) {
			pluginFunction
		}
		if ( music != MUSICLIST_NONE2 ) {
			musicfolder = exedir + "user\\music\\"
			exist musicfolder + musicfile(music)
			if ( strsize == (-1) ) {
				musicfolder = exedir + "sound\\"
				exist musicfolder + musicfile(music)
				if ( strsize == (-1) ) {
					return
				}
			}
			if ( instr(musicfile(music), 0, ".mp3") != (-1) ) {
				mp3 = 1
			}
			else {
				mp3 = 0
			}
		}
		if ( music != MUSICLIST_NONE2 ) {
			if ( cfg_music == 2 | mp3 == 1 ) {
				mmload musicfolder + musicfile(music), 0, musicloop == 65535
				mmplay 0
			}
			else {
				if ( cfg_music == 1 ) {
					DMLOADFNAME musicfolder + musicfile(music), 0
					DMPLAY musicloop, 0
				}
				else {
					if ( cfg_music == 3 ) {
						pluginFunction cfg_sndvolume
						pluginFunction musicfolder + musicfile(music), 0, 0
						if ( musicloop == 0 ) {
							pluginFunction 2, 0
						}
						else {
							pluginFunction 1 | 2, 0
						}
					}
				}
			}
		}
	}
	music = MUSICLIST_NONE
	musicloop = 0
	return

#deffunc key_check int key_check_arg1
	if ( timeGetTime() / 1000 - time_talk > 20 & chatturn < 30 ) {
		chatturn = 30
	}
	if ( usermusic == 2 & cfg_music == 3 ) {
		if ( resmusic(nplay) == 1 ) {
			pluginFunction musicdata
			if ( musicdata(0) == 0 ) {
				pluginFunction
				nplay++
				if ( resmusic(nplay) == 0 ) {
					nplay = 0
				}
				musicfolder = musiclist(nplay)
				if ( resmusic(nplay) == 1 ) {
					pluginFunction musicfolder, 0, 0
					pluginFunction 0, 0
				}
				if ( resmusic(nplay) == 2 ) {
					mci "close musicmc"
					mci "open " + musicfolder + " alias musicmc"
					mci "play musicmc"
				}
			}
		}
		else {
			if ( resmusic(nplay) == 2 ) {
				mci "status musicmc mode"
				if ( refstr == "stopped" ) {
					mci "stop musicmc"
					mci "close musicmc"
					nplay++
					if ( resmusic(nplay) == 0 ) {
						nplay = 0
					}
					musicfolder = musiclist(nplay)
					if ( resmusic(nplay) == 1 ) {
						pluginFunction musicfolder, 0, 0
						pluginFunction 0, 0
					}
					if ( resmusic(nplay) == 2 ) {
						mci "open " + musicfolder + " alias musicmc"
						mci "play musicmc"
					}
				}
			}
		}
		if ( resmusic(nplay) == 0 ) {
			usermusic = 0
		}
	}
	if ( ginfo(2) == 0 ) {
		objsel 0
	}
	else {
		key = ""
		objprm 0, ""
		keylog = ""
		await 100
		return
	}
	if ( msgalert == 1 ) {
		if ( cfg_alert > 1 ) {
			repeat cfg_alert
				await 10
				locvar_key_check_p = 0
				repeat 106
					if ( cnt == 32 | cnt == 13 | (cnt >= 65 & cnt <= 90) | (cnt >= 96 & cnt <= 105) ) {
						getkey locvar_key_check_a, cnt
						if ( locvar_key_check_a ) {
							locvar_key_check_p = 1
							break
						}
					}
				loop
				if ( locvar_key_check_p == 0 ) {
					break
				}
			loop
			msgalert = 0
			keylog = ""
			objprm 0, ""
		}
	}
	key = ""

	if ( nc_macromode == 1 ) {
		if ( nc_key_log(nc_key_row) == "" ) {
			nc_macromode = 0
			nc_key_row = 0
			key = ""
			keylog = ""
			objprm 0, ""
			txt -1, lang("É}ÉNÉçÇí‚é~ÇµÇΩÅB", "Stopped macro.")
			return
		}
		if ( strmid(nc_key_log(nc_key_row), 0, strlen("Ifsc,")) == "Ifsc," ) {
			f = 0
			split nc_key_log(nc_key_row), ",", nc_key_buff
			if ( ogdata(36 + nc_key_buff(2)) >= 10000 ) {
				inv_getheader 0
				repeat invrange, invhead
					s = ""
					nc_strb_001 = itemname(cnt, 1, 0, 1)
					if ( instr(nc_key_buff(1), 0, ioriginalnameref(iID(cnt))) != (-1) | instr(nc_strb_001, 0, nc_key_buff(1)) != (-1) ) {
						if ( iID(cnt) == ogdata(36 + int(nc_key_buff(2))) \ 1000000 \ 10000 ) {
							f = 1
							break
						}
					}
				loop
			}
			else {
				if ( ogdata(36 + nc_key_buff(2)) > 0 ) {
					if ( skillname(ogdata(36 + nc_key_buff(2))) == nc_key_buff(1) ) {
						f = 1
					}
				}
			}
			if ( f ) {
				nc_key_row = int(nc_key_buff(3)) - 1
				key = ""
				keylog = ""
				objprm 0, ""
				return
			}
		}
		if ( strmid(nc_key_log(nc_key_row), 0, strlen("Ifstop,")) == "Ifstop," ) {
			split nc_key_log(nc_key_row), ",", nc_key_buff
			getkey nc_intb_001, peek(nc_key_buff(1), 0)
			if ( nc_intb_001 ) {
				nc_macromode = 0
				nc_key_row = 0
				key = ""
				keylog = ""
				objprm 0, ""
				txt -1, lang("É}ÉNÉçÇí‚é~ÇµÇΩÅB", "Stopped macro.")
				return
			}
		}
		if ( strmid(nc_key_log(nc_key_row), 0, strlen("Pause,")) == "Pause," ) {
			nc_strb_001 = nc_key_log(nc_key_row) + ",,"
			split nc_strb_001, ",", nc_key_buff
			if ( nc_key_buff(1) == "" ) {
				rtval = 0
				txtnew
				txt -1, lang("É}ÉNÉçÇàÍéûí‚é~íÜÅc", "Pausing macro...")
				promptl(0, 0) = stryes, "y", "1"
				promptmax = 1
				val = promptx, prompty, 160, 1
				nc_macromode = 0
				gosub *prompt_key
				nc_macromode = 1
			}
			else {
				rtval = 0
				promptmax = 0
				txtnew
				txt -1, nc_key_buff(1)
				repeat
					if ( nc_key_buff((cnt + 1) * 2) != "" ) {
						promptl(0, promptmax) = nc_key_buff((cnt + 1) * 2), "null", "" + cnt
						promptmax++
					}
					else {
						break
					}
				loop
				val = promptx, prompty, 160, 1
				nc_macromode = 0
				gosub *prompt_key
				if ( rtval == (-1) ) {
					rtval = 0
				}
				nc_key_row = int(nc_key_buff((rtval + 1) * 2 + 1)) - 1
				nc_macromode = 1
				key = ""
				keylog = ""
				objprm 0, ""
				return
			}
		}
		if ( strmid(nc_key_log(nc_key_row), 0, strlen("Skillset,")) == "Skillset," ) {
			split nc_key_log(nc_key_row), ",", nc_key_buff
			repeat tailspact - 400, 400
				if ( skillname(cnt) == nc_key_buff(1) ) {
					nc_intb_001 = cnt
					repeat 20
						if ( ogdata(36 + cnt) == nc_intb_001 ) {
							ogdata(36 + cnt) = 0
							stgdata(36 + cnt) = 0
						}
					loop
					ogdata(36 + int(nc_key_buff(2))) = cnt
					txt -1, lang("(É}ÉNÉç)" + skillname(cnt) + "ÇÃÉVÉáÅ[ÉgÉJÉbÉgÇ" + "{" + int(nc_key_buff(2)) + "}ÉLÅ[Ç…äÑÇËìñÇƒÇΩÅB", "(Macro) Assigned " + skillname(cnt) + " shortcut to {" + int(nc_key_buff(2)) + "} key.")
					break
				}
			loop
		}
		if ( strmid(nc_key_log(nc_key_row), 0, strlen("Itemset,")) == "Itemset," ) {
			nc_intb_002 = 0
			split nc_key_log(nc_key_row), ",", nc_key_buff
			inv_getheader 0
			repeat invrange, invhead
				s = ""
				nc_strb_001 = itemname(cnt, 1, 0, 1)
				if ( instr(nc_key_buff(1), 0, ioriginalnameref(iID(cnt))) != (-1) | instr(nc_strb_001, 0, nc_key_buff(1)) != (-1) ) {
					if ( cfg_st_shortcut ) {
						if ( instr(nc_key_buff(1), 0, lang("èjïüÇ≥ÇÍÇΩ", "blessed")) != (-1) ) {
							if ( iStatus(cnt) != ITEM_STATUS_BLESSED | iKnown(cnt) < ITEM_KNOWN_FULL ) {
								continue
							}
							s = lang("èjïüÇ≥ÇÍÇΩ", "blessed")
						}
						if ( instr(nc_key_buff(1), 0, lang("éÙÇÌÇÍÇƒÇ¢Ç»Ç¢", "uncursed")) != (-1) ) {
							if ( iStatus(cnt) != ITEM_STATUS_NORMAL | iKnown(cnt) < ITEM_KNOWN_FULL ) {
								continue
							}
							s = lang("éÙÇÌÇÍÇƒÇ¢Ç»Ç¢", "uncursed ")
						}
						if ( instr(nc_key_buff(1), 0, lang("éÙÇÌÇÍÇΩ", "cursed")) != (-1) ) {
							if ( iStatus(cnt) != ITEM_STATUS_CURSED | iKnown(cnt) < ITEM_KNOWN_FULL ) {
								continue
							}
							s = lang("éÙÇÌÇÍÇΩ", "cursed ")
						}
						if ( instr(nc_key_buff(1), 0, lang("ë¬óéÇµÇΩ", "doomed")) != (-1) ) {
							if ( iStatus(cnt) != ITEM_STATUS_DOOMED | iKnown(cnt) < ITEM_KNOWN_FULL ) {
								continue
							}
							s = lang("ë¬óéÇµÇΩ", "doomed ")
						}
						if ( instr(nc_key_buff(1), 0, lang("ñ¢ä”íËÇÃ", "unidentified")) != (-1) ) {
							if ( iKnown(cnt) == ITEM_KNOWN_FULL ) {
								continue
							}
							s = lang("ñ¢ä”íËÇÃ", "unidentified ")
						}
					}
					_switch_val = nc_key_buff(2)
					if ( 0 ) {
						_switch_sw++
					}
					if ( _switch_val == 0 | _switch_sw ) {
						_switch_sw = 0
						nc_intb_002 = 5
						goto *label_0685
						_switch_sw++
					}
					if ( _switch_val == 1 | _switch_sw ) {
						_switch_sw = 0
						nc_intb_002 = 7
						goto *label_0685
						_switch_sw++
					}
					if ( _switch_val == 2 | _switch_sw ) {
						_switch_sw = 0
						nc_intb_002 = 8
						goto *label_0685
						_switch_sw++
					}
					if ( _switch_val == 3 | _switch_sw ) {
						_switch_sw = 0
						nc_intb_002 = 9
						goto *label_0685
						_switch_sw++
					}
					if ( _switch_val == 4 | _switch_sw ) {
						_switch_sw = 0
						nc_intb_002 = 14
						goto *label_0685
						_switch_sw++
					}
					if ( _switch_val == 5 | _switch_sw ) {
						_switch_sw = 0
						nc_intb_002 = 15
						goto *label_0685
						_switch_sw++
					}
					if ( _switch_val == 6 | _switch_sw ) {
						_switch_sw = 0
						nc_intb_002 = 17
						goto *label_0685
						_switch_sw++
					}
					if ( _switch_val == 7 | _switch_sw ) {
						_switch_sw = 0
						nc_intb_002 = 26
						goto *label_0685
					}
*label_0685
					p = iID(cnt) + int(nc_intb_002) * 10000 + iCItemIdx(cnt) * 10000 * 100
					p1 = iStatus(cnt)
					p2 = 0
					if ( refitem(iID(cnt), DBSPEC_TYPE, cnt) == FILTER_ITEM_FOOD ) {
						p2 = iParam2(cnt)
					}
					nc_intb_001 = cnt
					repeat 20
						if ( ogdata(36 + cnt) == p & (stgdata(36 + cnt) == p1 & stgdata(56 + cnt) == p2 | cfg_st_shortcut == 0) ) {
							ogdata(36 + cnt) = 0
							stgdata(36 + cnt) = 0
							stgdata(56 + cnt) = 0
						}
					loop
					repeat 20
						if ( gdata(STARTING_GDATA_SHORTCUT + cnt) == p ) {
							gdata(STARTING_GDATA_SHORTCUT + cnt) = 0
						}
					loop
					ogdata(36 + int(nc_key_buff(3))) = p
					stgdata(36 + int(nc_key_buff(3))) = p1
					stgdata(56 + int(nc_key_buff(3))) = p2
					gdata(STARTING_GDATA_SHORTCUT + int(nc_key_buff(3))) = p
					txt -1, lang("(É}ÉNÉç)" + nc_strb_001 + "ÇÃÉVÉáÅ[ÉgÉJÉbÉgÇ" + "{" + int(nc_key_buff(3)) + "}ÉLÅ[Ç…äÑÇËìñÇƒÇΩÅB", "(Macro)Assigned " + s + ioriginalnameref(iID(cnt)) + " shortcut to {" + int(nc_key_buff(3)) + "} key.")
					break
				}
			loop
		}
		if ( strmid(nc_key_log(nc_key_row), 0, strlen("Key,")) == "Key," ) {
			split nc_key_log(nc_key_row), ",", nc_key_buff
			key = nc_key_buff(1)
			if ( key == "UP" ) {
				key = key_north
			}
			if ( key == "DOWN" ) {
				key = key_south
			}
			if ( key == "LEFT" ) {
				key = key_west
			}
			if ( key == "RIGHT" ) {
				key = key_east
			}
			if ( key == "UPLEFT" ) {
				key = key_northwest
			}
			if ( key == "UPRIGHT" ) {
				key = key_northeast
			}
			if ( key == "DOWNLEFT" ) {
				key = key_southwest
			}
			if ( key == "DOWNRIGHT" ) {
				key = key_southeast
			}
			if ( key == "ESC" ) {
				key = key_esc
			}
			if ( key == "ENTER" ) {
				key = key_enter
			}
			keylog = ""
			objprm 0, ""
		}
		if ( strmid(nc_key_log(nc_key_row), 0, strlen("Sc,")) == "Sc," ) {
			split nc_key_log(nc_key_row), ",", nc_key_buff
			sc = int(nc_key_buff(1))
			key = "sc"
			keylog = ""
			objprm 0, ""
		}
		if ( strmid(nc_key_log(nc_key_row), 0, strlen("Paste,")) == "Paste," ) {
			txt -1, lang("(É}ÉNÉç)ì¸óÕíÜÇ≈ÇÕÇ»Ç¢éûÇ…PasteÇ™é¿çsÇ≥ÇÍÇ‹ÇµÇΩ(çs:", "(Macro)Paste was executed when no macro was being typed.(row:") + nc_key_row + ") "
			nc_macromode = 0
			nc_key_row = 0
			key = ""
			keylog = ""
			objprm 0, ""
			txt -1, lang("É}ÉNÉçÇí‚é~ÇµÇΩÅB", "Stopped macro.")
			return
		}
		if ( nc_key_log(nc_key_row) == "End" ) {
			nc_macromode = 0
			nc_key_row = 0
			key = ""
			keylog = ""
			objprm 0, ""
			txt -1, lang("É}ÉNÉçÇí‚é~ÇµÇΩÅB", "Stopped macro.")
			return
		}
		if ( strmid(nc_key_log(nc_key_row), 0, strlen("Roopend")) == "Roopend" ) {
			nc_macropoint = -1
			repeat 100
				if ( strmid(nc_key_log(cnt), 0, strlen("Roop,")) == "Roop," ) {
					nc_macropoint = cnt
				}
				if ( cnt == nc_key_row ) {
					break
				}
			loop
			if ( nc_macropoint == (-1) ) {
				txt -1, lang("ÅyErrorÅzénÇ‹ÇËÇ™Ç»Ç¢ÉãÅ[ÉvÇåüímÇµÇ‹ÇµÇΩ(çs:", "(Error)Detected a loop with no beginning.(row:") + nc_key_row + ") "
				nc_macromode = 0
				nc_key_row = 0
				key = ""
				keylog = ""
				objprm 0, ""
				txt -1, lang("É}ÉNÉçÇí‚é~ÇµÇΩÅB", "Stopped macro.")
				return
			}
			split nc_key_log(nc_macropoint), ",", nc_key_buff
			if ( int(nc_key_buff(1)) > nc_key_roop(nc_macropoint) ) {
				nc_key_row = nc_macropoint
				nc_key_roop(nc_macropoint)++
			}
		}
		nc_key_row++
		return
	}
	if ( keylog != "" ) {
		keylog = strmid(keylog, 0, 1)
		if ( peek(keylog, 0) == 13 ) {
			keylog = key_enter
		}
		key = keylog
		keylog = ""
		objprm 0, ""
	}
	mousel = 0
	locvar_key_check_f = 0
	key_tab = 0
	key_escape = 0
	stick locvar_key_check_p, 15
	if ( locvar_key_check_p != 0 ) {
		if ( locvar_key_check_p == 128 ) {
			if ( keywait == 0 ) {
				key = key_cancel
				key_escape = 1
			}
		}
		if ( locvar_key_check_p == 1024 ) {
			key_tab = 1
			key = key_next
		}
	}
	else {
		getkey locvar_key_check_a, 12
		if ( locvar_key_check_a ) {
			key = key_wait
			locvar_key_check_f = 1
		}
		getkey locvar_key_check_a, 45
		if ( locvar_key_check_a ) {
			key = key_get
			locvar_key_check_f = 1
		}
		getkey locvar_key_check_a, 36
		if ( locvar_key_check_a ) {
			locvar_key_check_p = 3
		}
		getkey locvar_key_check_a, 33
		if ( locvar_key_check_a ) {
			locvar_key_check_p = 6
		}
		getkey locvar_key_check_a, 35
		if ( locvar_key_check_a ) {
			locvar_key_check_p = 9
		}
		getkey locvar_key_check_a, 34
		if ( locvar_key_check_a ) {
			locvar_key_check_p = 12
		}
	}
	getkey locvar_key_check_a, 17
	if ( locvar_key_check_a ) {
		key_ctrl = 1
	}
	else {
		key_ctrl = 0
	}
	getkey locvar_key_check_a, 18
	if ( locvar_key_check_a ) {
		key_alt = 1
	}
	else {
		key_alt = 0
	}
	getkey locvar_key_check_a, 16
	if ( locvar_key_check_a ) {
		keybd_wait = 100000 + keybd_wait \ 100
		key_shift = 1
		if ( keywait != 0 ) {
			if ( locvar_key_check_a == 0 ) {
				if ( key_shift == 0 ) {
					keywait = 0
				}
			}
		}
		if ( keywait == 0 ) {
			if ( locvar_key_check_a == 1 ) {
				key = key_cancel
				keywait = 1
			}
		}
	}
	else {
		keywait = 0
		if ( key_shift == 1 ) {
		}
		key_shift = 0
	}
	if ( cfg_joypad ) {
		locvar_key_check_j = 0
		DIGETJOYSTATE locvar_key_check_j, 0
		HMMBITCHECK locvar_key_check_j, 0
		if ( stat ) {
			locvar_key_check_p += 2
		}
		HMMBITCHECK locvar_key_check_j, 1
		if ( stat ) {
			locvar_key_check_p += 8
		}
		HMMBITCHECK locvar_key_check_j, 2
		if ( stat ) {
			locvar_key_check_p += 1
		}
		HMMBITCHECK locvar_key_check_j, 3
		if ( stat ) {
			locvar_key_check_p += 4
		}
		locvar_key_check_a = 0
		repeat 12
			HMMBITCHECK locvar_key_check_j, 4 + cnt
			if ( stat ) {
				locvar_key_check_a = 1
				if ( jkey(cnt) == key_alter ) {
					key_alt = 1
				}
				if ( jkey(cnt) == key_cancel ) {
					key_shift = 1
					if ( locvar_key_check_p != 0 ) {
						keybd_wait = 100000 + keybd_wait \ 100
					}
				}
				if ( locvar_key_check_prevjoy != cnt ) {
					key = jkey(cnt)
					locvar_key_check_prevjoy = cnt
					if ( key == key_esc ) {
						key = key_cancel
						key_escape = 1
					}
					if ( key_check_arg1 == 0 ) {
						locvar_key_check_b = 0
						if ( key == key_fire ) {
							key = key_northeast
							locvar_key_check_b = 1
						}
						if ( key == key_target ) {
							key = key_northwest
							locvar_key_check_b = 1
						}
						if ( key == key_get ) {
							key = key_northeast
							locvar_key_check_b = 1
						}
						if ( key == key_alter ) {
							key = key_northwest
							locvar_key_check_b = 1
						}
						if ( locvar_key_check_b == 0 & key != key_enter & key != key_cancel & key != key_esc ) {
							key = key_identify
						}
					}
				}
			}
		loop
		if ( locvar_key_check_a == 0 ) {
			locvar_key_check_prevjoy = -1
		}
		else {
			if ( key_check_arg1 == 2 ) {
				return
			}
		}
	}
	if ( quickkeywait ) {
		if ( locvar_key_check_p != 0 ) {
			return
		}
		else {
			quickkeywait = 0
		}
	}
	if ( keybd_wait >= 100000 ) {
		if ( key_shift == 0 ) {
			keybd_wait = 1000 + keybd_wait \ 100
		}
	}
	if ( locvar_key_check_p == 1 ) {
		if ( key_alt == 0 ) {
			key = key_west
			locvar_key_check_f = 1
		}
	}
	if ( locvar_key_check_p == 2 ) {
		if ( key_alt == 0 ) {
			key = key_north
			locvar_key_check_f = 1
		}
	}
	if ( locvar_key_check_p == 4 ) {
		if ( key_alt == 0 ) {
			key = key_east
			locvar_key_check_f = 1
		}
	}
	if ( locvar_key_check_p == 8 ) {
		if ( key_alt == 0 ) {
			key = key_south
			locvar_key_check_f = 1
		}
	}
	if ( locvar_key_check_p == 3 ) {
		key = key_northwest
		locvar_key_check_f = 1
	}
	if ( locvar_key_check_p == 6 ) {
		key = key_northeast
		locvar_key_check_f = 1
	}
	if ( locvar_key_check_p == 9 ) {
		key = key_southwest
		locvar_key_check_f = 1
	}
	if ( locvar_key_check_p == 12 ) {
		key = key_southeast
		locvar_key_check_f = 1
	}
	if ( key_check_arg1 == 2 ) {
		return
	}
	if ( locvar_key_check_f ) {
		if ( locvar_key_check_keyactive != key ) {
			locvar_key_check_keyactive = key
		}
		if ( keybd_wait == 0 ) {
			locvar_key_check_keyactive = key
		}
		if ( key_check_arg1 == 1 ) {
			if ( keybd_attacking != 0 ) {
				if ( keybd_wait \ cfg_attackwait != 0 ) {
					key = ""
				}
			}
			else {
				if ( cfg_scroll == 0 ) {
					if ( keybd_wait < cfg_walkwait * cfg_startrun ) {
						if ( keybd_wait \ cfg_walkwait == 0 ) {
						}
						else {
							key = ""
						}
					}
					else {
						running = 1
						if ( keybd_wait < 100000 ) {
							if ( keybd_wait \ cfg_runwait != 0 ) {
								key = ""
							}
						}
					}
				}
				else {
					if ( locvar_key_check_p == 0 ) {
						if ( keybd_wait < 10 ) {
							if ( keybd_wait != 0 ) {
								key = ""
							}
						}
					}
					else {
						if ( keybd_wait > cfg_startrun ) {
							if ( cfg_runscroll == 0 ) {
								if ( keybd_wait \ cfg_runwait == 0 ) {
								}
								else {
									key = ""
								}
							}
							running = 1
						}
					}
				}
			}
		}
		else {
			if ( keybd_wait < 14 ) {
				if ( keybd_wait == 0 | keybd_wait == 7 ) {
				}
				else {
					key = ""
				}
			}
			else {
				if ( keybd_wait < 1000 ) {
					if ( keybd_wait \ 2 != 1 ) {
						key = ""
					}
				}
			}
		}
		keybd_wait++
	}
	else {
		keybd_wait = 0
		keybd_attacking = 0
		running = 0
		locvar_key_check_keyactive = ""
	}
	repeat 10, 48
		getkey locvar_key_check_p, cnt
		if ( locvar_key_check_p ) {
			locvar_key_check_p = (cnt - 48) \ 10
			key = "sc"
			sc = cnt - 48 + (key_shift == 1 | key_ctrl == 1) * 10
			if ( cfg_wait1 != 0 ) {
				keybd_event cnt, 0, 2
			}
			locvar_key_check_scon = 1
		}
	loop
	if ( locvar_key_check_scon ) {
		key = "sc"
		locvar_key_check_scon = 0
		keylog = ""
		objprm 0, ""
		return
	}
	if ( keyhalt != 0 ) {
		if ( key != "" | keybd_wait != 0 ) {
			key = ""
		}
		else {
			keyhalt = 0
		}
	}
	return

#deffunc keyrelease
	repeat
		await 30
		stick locvar_keyrelease_a, 768
		if ( locvar_keyrelease_a == 0 ) {
			key_check
			if ( key == "" ) {
				break
			}
		}
	loop
	return

#deffunc press int press_arg1
	repeat
		await 20
		key_check
		if ( press_arg1 == 0 ) {
			if ( key != "" ) {
				break
			}
		}
		if ( press_arg1 == 1 ) {
			if ( key == key_enter | key == key_cancel ) {
				break
			}
		}
	loop
	keyhalt = 1
	return

#deffunc bmes str bmes_arg1, int bmes_arg2, int bmes_arg3, int bmes_arg4
	locvar_bmes_pos_x = ginfo(22)
	locvar_bmes_pos_y = ginfo(23)
	locvar_bmes_mes_color = bmes_arg2, bmes_arg3, bmes_arg4
	if ( cfg_fontstyle == 0 ) {
		repeat 3
			locvar_bmes_mes_y = cnt + locvar_bmes_pos_y - 1
			repeat 3
				pos locvar_bmes_pos_x - 1 + cnt, locvar_bmes_mes_y
				mes bmes_arg1
			loop
		loop
	}
	else {
		pos locvar_bmes_pos_x - 1, locvar_bmes_pos_y
		mes bmes_arg1
		pos locvar_bmes_pos_x + 1, locvar_bmes_pos_y
		mes bmes_arg1
		pos locvar_bmes_pos_x, locvar_bmes_pos_y - 1
		mes bmes_arg1
		pos locvar_bmes_pos_x, locvar_bmes_pos_y + 1
		mes bmes_arg1
	}
	color locvar_bmes_mes_color(0), locvar_bmes_mes_color(1), locvar_bmes_mes_color(2)
	pos locvar_bmes_pos_x, locvar_bmes_pos_y
	mes bmes_arg1
	return

#deffunc talk_conv var talk_conv_arg1, int talk_conv_arg2
	locvar_talk_conv_n = 0
	if ( jp ) {
		locvar_talk_conv_msgtemp = talk_conv_arg1
		talk_conv_arg1 = ""
		if ( cfg_putgrass == 1 ) {
			sreplace locvar_talk_conv_msgtemp, locvar_talk_conv_msgtemp, "Åc", "ÇóÇóÇó"
		}
		if ( cfg_putgrass == 2 ) {
			sreplace locvar_talk_conv_msgtemp, locvar_talk_conv_msgtemp, "Åc", "ÇóÇóÇóÇóÇóÇó"
			sreplace locvar_talk_conv_msgtemp, locvar_talk_conv_msgtemp, "ÅA", "ÇóÇóÇó"
			sreplace locvar_talk_conv_msgtemp, locvar_talk_conv_msgtemp, "ÅB", "ÇóÇóÇó"
			sreplace locvar_talk_conv_msgtemp, locvar_talk_conv_msgtemp, "ÅI", "ÇóÇóÇóÅI"
			sreplace locvar_talk_conv_msgtemp, locvar_talk_conv_msgtemp, "ÅH", "ÇóÇóÇóÅH"
		}
		repeat 100
			locvar_talk_conv_len = strlen(locvar_talk_conv_msgtemp)
			locvar_talk_conv_p2 = 0
			if ( locvar_talk_conv_len < talk_conv_arg2 ) {
				break
			}
			repeat locvar_talk_conv_len
				locvar_talk_conv_p = peek(locvar_talk_conv_msgtemp, locvar_talk_conv_p2)
				if ( locvar_talk_conv_p2 > locvar_talk_conv_len ) {
					break
				}
				if ( locvar_talk_conv_p >= 129 & locvar_talk_conv_p <= 159 | locvar_talk_conv_p >= 224 & locvar_talk_conv_p <= 252 ) {
					locvar_talk_conv_p = 2
				}
				else {
					locvar_talk_conv_p = 1
				}
				locvar_talk_conv_p2 += locvar_talk_conv_p
				if ( locvar_talk_conv_p2 > talk_conv_arg2 ) {
					locvar_talk_conv_m = strmid(locvar_talk_conv_msgtemp, locvar_talk_conv_p2, 2)
					if ( locvar_talk_conv_m != "ÅB" & locvar_talk_conv_m != "ÅA" & locvar_talk_conv_m != "Åv" & locvar_talk_conv_m != "Åx" & locvar_talk_conv_m != "ÅI" & locvar_talk_conv_m != "ÅH" & locvar_talk_conv_m != "Åc" & locvar_talk_conv_m != "ÅÙ" ) {
					}
					else {
						locvar_talk_conv_p2 += 2
					}
					talk_conv_arg1 += strmid(locvar_talk_conv_msgtemp, 0, locvar_talk_conv_p2) + "\n"
					locvar_talk_conv_n++
					locvar_talk_conv_msgtemp = strmid(locvar_talk_conv_msgtemp, locvar_talk_conv_p2, locvar_talk_conv_len - locvar_talk_conv_p2)
					break
				}
			loop
		loop
		talk_conv_arg1 += locvar_talk_conv_msgtemp
	}
	else {
		locvar_talk_conv_msgtemp = talk_conv_arg1
		talk_conv_arg1 = ""
		repeat 1000
			locvar_talk_conv_len = 0
			repeat 1000
				locvar_talk_conv_p = instr(locvar_talk_conv_msgtemp, 0, " ") + 1
				if ( locvar_talk_conv_p == 0 ) {
					break
				}
				if ( locvar_talk_conv_len + locvar_talk_conv_p > talk_conv_arg2 ) {
					talk_conv_arg1 += "\n"
					locvar_talk_conv_n++
					break
				}
				talk_conv_arg1 += strmid(locvar_talk_conv_msgtemp, 0, locvar_talk_conv_p)
				locvar_talk_conv_len += locvar_talk_conv_p
				locvar_talk_conv_msgtemp = strmid(locvar_talk_conv_msgtemp, locvar_talk_conv_p, strlen(locvar_talk_conv_msgtemp) - locvar_talk_conv_p)
			loop
			if ( locvar_talk_conv_p == 0 ) {
				break
			}
		loop
		talk_conv_arg1 += locvar_talk_conv_msgtemp
	}
	return locvar_talk_conv_n

#deffunc msg_write var msg_write_arg1
	if ( cfg_nolog == 0 & nolog == 0 ) {
		repeat 1
			locvar_msg_write_mp = instr(msg_write_arg1, 0, "ÅÙ")
			if ( locvar_msg_write_mp != (-1) ) {
				locvar_msg_write_mark = int(strmid(msg_write_arg1, locvar_msg_write_mp + 2, 1))
				if ( jp ) {
					if ( locvar_msg_write_mark == 0 ) {
						break
					}
				}
				msg_write_arg1 = strmid(msg_write_arg1, 0, locvar_msg_write_mp) + "  " + strmid(msg_write_arg1, locvar_msg_write_mp + 2 + (locvar_msg_write_mark != 0), 9999)
				pos (msglen + locvar_msg_write_mp) * inf_mesfont / 2 + inf_msgx + 7 + en * 3, (inf_msgline - 1) * inf_msgspace + inf_msgy + 5
				gmode 2
				gcopy BUFFER_INF, 600 + locvar_msg_write_mark * 24, 360, 16, 16
				continue cnt
			}
		loop
		color locvar_randskill_tcol(0), locvar_randskill_tcol(1), locvar_randskill_tcol(2)
		pos msglen * inf_mesfont / 2 + inf_msgx + 6, (inf_msgline - 1) * inf_msgspace + inf_msgy + 6
		font lang(cfg_font1, cfg_font2), inf_mesfont - en * 2, 0
		mes msg_write_arg1
	}
	return

#deffunc txtcontinue
	locvar_txtcontinue_tcontinue = 1
	return

#deffunc anime_halt
	key = ""
	objprm 0, ""
	keylog = ""
	redraw 0
	gmode 0
	gsel BUFFER_INF
	pos 672, 504
	gcopy BUFFER_SCREEN, locvar_anime_halt_x, locvar_anime_halt_y, 120, 24
	gsel BUFFER_SCREEN
	repeat 12
		redraw 0
		await 10
		pos locvar_anime_halt_x, locvar_anime_halt_y + 12 - cnt
		gzoom 120, cnt * 2 + 1, 3, 552, 504, 120, 22
		redraw 1
	loop
	press 1
	snd SOUNDLIST_OK1
	repeat 7
		redraw 0
		await 10
		pos locvar_anime_halt_x, locvar_anime_halt_y
		gcopy BUFFER_INF, 672, 504, 120, 24
		if ( cnt != 6 ) {
			pos locvar_anime_halt_x, locvar_anime_halt_y + cnt * 2
			gzoom 120, 22 - cnt * 4, 3, 552, 504, 120, 22
		}
		redraw 1
	loop
	redraw 0
	gmode 2
	return

#deffunc msg_halt
	locvar_anime_halt_x = windoww - 120
	locvar_anime_halt_y = windowh - 22
	anime_halt
	screenupdate = -1
	gosub *screen_draw
	return

#deffunc help_halt
	locvar_anime_halt_x = wx + dx - 140
	locvar_anime_halt_y = wy + dy - 1
	anime_halt
	return

#deffunc txtef int txtef_color
	locvar_randskill_tcol = 255 - c_col(0, txtef_color), 255 - c_col(1, txtef_color), 255 - c_col(2, txtef_color)
	if ( txtef_color == COLOR_YELLOW ) {
		locvar_randskill_tcolfix = 1
	}
	else {
		locvar_randskill_tcolfix = 0
	}
	return

#deffunc msg_newlog
	if ( cfg_exlog == 0 ) {
		return
	}
	gsel BUFFER_LOG
	gmode 0
	pos 0, msgline \ inf_maxlog * inf_msgspace
	gcopy BUFFER_SCREEN, inf_msgx, inf_msgy + 5 + inf_msgspace * 3 + en * 3, windoww - inf_msgx, inf_msgspace
	gsel BUFFER_SCREEN
	return

#deffunc msg_newline
	msg_newlog
	msglen = 0
	msgline++
	if ( msgline >= inf_maxlog ) {
		msgline -= inf_maxlog
	}
	msg(msgline \ inf_maxlog) = ""
	locvar_talk_conv_p = (windoww - inf_msgx) / 192
	redraw 0
	gmode 0
	pos inf_msgx, inf_msgy + 5
	gcopy BUFFER_SCREEN, inf_msgx, inf_msgy + 5 + inf_msgspace, windoww - inf_msgx, inf_msgspace * 3 + en * 3
	repeat locvar_talk_conv_p + 1
		if ( cnt == locvar_talk_conv_p ) {
			locvar_anime_halt_x = (windoww - inf_msgx) \ 192
		}
		else {
			locvar_anime_halt_x = 192
		}
		pos cnt * 192 + inf_msgx, inf_msgy + 5 + inf_msgspace * 3 + en * 2
		gcopy BUFFER_INF, 496, 536 + msgline \ 4 * inf_msgspace, locvar_anime_halt_x, inf_msgspace
	loop
	gmode 2
	msgtempprev = ""
	return

#deffunc txtnew
	if ( tnew == 0 ) {
		if ( strlen(msg(msgline \ inf_maxlog)) > 4 ) {
			msg_newline
			msglen = 2
		}
	}
	return

#deffunc msg_clear
	msg_len = 0
	msgtemp = ""
	repeat 3
		msg_newline
	loop
	return

#deffunc txt_conv
	redraw 0
	sstptalkc0 = sstptalkc
	sstptalkn0 = sstptalkn
	sstptalkc = 0
	sstptalkn = ""
	if ( msgtemp == "" ) {
		return
	}
	if ( oom_talkchara != (-1) ) {
		if ( isstorned(oom_talkchara) ) {
			return
		}
	}
	if ( sstptalkc0 != 0 ) {
		parsesstptalk msgtemp, sstptalk, 1
		if ( cfg_nc_sstp_enabled != 0 & (cfg_nc_sstp_sakura == sstptalkc0 | cfg_nc_sstp_unyu == sstptalkc0) ) {
			throwsstptalk sstptalkn0, sstptalk, sstptalkc0
			if ( cfg_nc_sstp_suppresslog != 0 ) {
				return
			}
		}
	}
	if ( tcopy ) {
		tcopy = 0
		txtcopy = "" + msgtemp
	}
	if ( tnew == 1 ) {
		if ( msg(msgline \ inf_maxlog) != "" ) {
			msg_newline
			tnew = 0
			if ( cfg_msgtrans ) {
				locvar_talk_conv_p = (windoww - inf_msgx) / 192
				redraw 0
				gmode 4, , , cfg_msgtrans * 20
				repeat locvar_talk_conv_p + 1
					if ( cnt == locvar_talk_conv_p ) {
						locvar_anime_halt_x = (windoww - inf_msgx) \ 192
					}
					else {
						locvar_anime_halt_x = 192
					}
					pos cnt * 192 + inf_msgx, inf_msgy + 5
					gcopy BUFFER_INF, 496, 536, locvar_anime_halt_x, inf_msgspace * 3
				loop
			}
			if ( cfg_msgaddtime ) {
				msgtemp = "[" + gMin  + "] " + msgtemp
			}
			else {
				msglen = 2
			}
		}
	}
	if ( msgdup != 0 ) {
		if ( msgtempprev == msgtemp ) {
			return
		}
		msgtempprev = msgtemp
		msgdup = 0
	}
	if ( jp ) {
		if ( instr(msgtemp, 0, "Åu") != (-1) & instr(msgtemp, 0, "Åv") != (-1) ) {
			if ( locvar_randskill_tcolfix == 0 ) {
				locvar_randskill_tcol = 210, 250, 160
			}
			else {
				locvar_randskill_tcolfix = 0
			}
			misakuraconvert msgtemp, 1
		}
		if ( cfg_putgrass == 1 ) {
			sreplace msgtemp, msgtemp, "Åc", "ÇóÇóÇó"
		}
		if ( cfg_putgrass == 2 ) {
			sreplace msgtemp, msgtemp, "Åc", "ÇóÇóÇóÇóÇóÇó"
			sreplace msgtemp, msgtemp, "ÅA", "ÇóÇóÇó"
			sreplace msgtemp, msgtemp, "ÅB", "ÇóÇóÇó"
			sreplace msgtemp, msgtemp, "ÅI", "ÇóÇóÇóÅI"
			sreplace msgtemp, msgtemp, "ÅH", "ÇóÇóÇóÅH"
		}
		if ( locvar_txt_conv_cc >= 0 ) {
			if ( synccheck(locvar_txt_conv_cc, -1) ) {
				sstptalkc = instr(msgtemp, 0, "Åu") + 2
				if ( sstptalkc < 2 ) {
					sstptalkc = 0
				}
				locvar_talk_conv_p2 = instr(msgtemp, sstptalkc, "Åv")
				if ( sstptalkc > 1 & locvar_talk_conv_p2 != (-1) ) {
					repeat
						if ( instr(msgtemp, sstptalkc + locvar_talk_conv_p2 + 2, "Åv") == (-1) ) {
							break
						}
						else {
							locvar_talk_conv_p2 += instr(msgtemp, sstptalkc + locvar_talk_conv_p2 + 2, "Åv") + 2
						}
					loop
					getstr sstptalkn, msgtemp, sstptalkc, , locvar_talk_conv_p2
				}
				else {
					if ( instr(msgtemp, 0, "ÅÙ") != (-1) | instr(msgtemp, 0, "*") != (-1) ) {
						sstptalkc = 1
					}
					if ( cfg_msgaddtime ) {
						sstptalkn = strmid(msgtemp, instr(msgtemp, 0, "]") + 1, 200)
					}
					else {
						sstptalkn = msgtemp
					}
				}
				sreplace sstptalkn, sstptalkn, "ÅÙ1", "ÅÙ"
			}
		}
		if ( oom_talkchara != (-1) & locvar_randskill_f != 5 ) {
			if ( cfg_txtpop > 0 | ocFukidashiDisplayWhenOff(oom_talkchara) > 0 ) {
				if ( oom_popup(1) == 1 ) {
					locvar_txt_conv_tmpcolor = 0, 0, 0
					locvar_txt_conv_tmpbgcolor = 255, 255, 255
					locvar_txt_conv_tmpfont = 0, cfg_txtpopfont, 0
					if ( gdatac(20) == 1 ) {
						split8bit gdatac(21), locvar_txt_conv_tmpcolor
						split8bit gdatac(22), locvar_txt_conv_tmpbgcolor
						split8bit gdatac(23), locvar_txt_conv_tmpfont
					}
					if ( ocFukidashiIndividual(oom_talkchara) == 1 ) {
						split8bit ocFukidashiR(oom_talkchara), locvar_txt_conv_tmpcolor
						split8bit ocFukidashiG(oom_talkchara), locvar_txt_conv_tmpbgcolor
						split8bit ocFukidashiB(oom_talkchara), locvar_txt_conv_tmpfont
					}
					bgcolor = locvar_txt_conv_tmpbgcolor(0), locvar_txt_conv_tmpbgcolor(1), locvar_txt_conv_tmpbgcolor(2)
					if ( oom_popup(0) == 0 ) {
						oom_msgtemp = msgtemp
					}
					else {
						oom_msgtemp = ""
						repeat oom_popup(0) + 1
							oom_msgtemp += splitbuff(cnt)
						loop
					}
					if ( instr(oom_msgtemp, 0, "Åu") != (-1) & instr(oom_msgtemp, 0, "Åv") != (-1) ) {
						buffer 200 + txtpopupcnt, 800, 600
						font locvar_txt_conv_fontlist(locvar_txt_conv_tmpfont(0)), 2 + locvar_txt_conv_tmpfont(1) - en * 2, locvar_txt_conv_tmpfont(2)
						brex_match "m/Åu.+(?=Åv)/", oom_msgtemp, 0, oom_idx, oom_len
						poptemp = strmid(oom_msgtemp, oom_idx, oom_len)
						strrep poptemp, "ÅÙ1", "ÅÙ"
						poptemp = strmid(poptemp, 2, 1000)
						autoinsertlf poptemp, txtpopupn, 48 * 5
						dim oom_txtsize, 2
						getstrrect hdc, txtpopupn, oom_txtsize
						width (oom_txtsize(0) + 10) * 3, oom_txtsize(1) + 20
						color 255, 0, 255
						boxf
						repeat 3
							color locvar_txt_conv_tmpcolor(0), locvar_txt_conv_tmpcolor(1), locvar_txt_conv_tmpcolor(2)
							fukidashi (oom_txtsize(0) + 10) * cnt, 0, oom_txtsize(0) + 10, oom_txtsize(1) + 10, 5, cnt + 1, bgcolor
							pos 5 + (oom_txtsize(0) + 10) * cnt, 5
							mes txtpopupn
						loop
						txtpopup(0, txtpopupcnt) = timeGetTime(), oom_talkchara, oom_txtsize(0) + 10, oom_txtsize(1) + 20
						txtpopupcnt = (txtpopupcnt + 1) \ length2(txtpopup)
						gsel BUFFER_SCREEN
					}
				}
			}
		}
		repeat
			locvar_talk_conv_len = strlen(msgtemp)
			if ( msglen + 4 > inf_maxmsglen ) {
				if ( msgtemp != "" ) {
					msg_newline
				}
			}
			if ( msglen + locvar_talk_conv_len > inf_maxmsglen ) {
				locvar_talk_conv_p2 = 0
				repeat
					locvar_talk_conv_p = peek(msgtemp, locvar_talk_conv_p2)
					locvar_talk_conv_p2++
					if ( locvar_talk_conv_p > 128 & locvar_talk_conv_p < 160 ) {
						locvar_talk_conv_p2++
					}
					if ( locvar_talk_conv_p > 223 & locvar_talk_conv_p < 253 ) {
						locvar_talk_conv_p2++
					}
					if ( locvar_talk_conv_p2 + msglen > inf_maxmsglen ) {
						if ( locvar_talk_conv_p2 > 1 ) {
							if ( strmid(msgtemp, locvar_talk_conv_p2 - 2, 3) == "ÅÙ1" ) {
								locvar_talk_conv_p2++
								break
							}
						}
						if ( locvar_talk_conv_p2 + msglen > inf_maxmsglen + 2 ) {
							break
						}
						locvar_talk_conv_m = strmid(msgtemp, locvar_talk_conv_p2, 2)
						if ( locvar_talk_conv_m != "ÅB" & locvar_talk_conv_m != "ÅA" & locvar_talk_conv_m != "Åv" & locvar_talk_conv_m != "Åx" & locvar_talk_conv_m != "ÅI" & locvar_talk_conv_m != "ÅH" & locvar_talk_conv_m != "Åc" & locvar_talk_conv_m != "ÅÙ" ) {
							break
						}
					}
				loop
				locvar_talk_conv_m = strmid(msgtemp, 0, locvar_talk_conv_p2)
				msg(msgline \ inf_maxlog) += locvar_talk_conv_m
				msg_write locvar_talk_conv_m
				msgtemp = strmid(msgtemp, locvar_talk_conv_p2, locvar_talk_conv_len - locvar_talk_conv_p2)
				if ( msgtemp == "" | msgtemp == " " ) {
					break
				}
				msg_newline
				continue
			}
			break
		loop
		msg(msgline \ inf_maxlog) += msgtemp
		msg_write msgtemp
		msglen += locvar_talk_conv_len
	}
	else {
		if ( locvar_txtcontinue_tcontinue == 0 ) {
			locvar_txt_conv_b = peek(msgtemp, 0)
			sstptalkc = 0
			if ( instr(msgtemp, 0, "*") != (-1) ) {
				sstptalkc = 1
			}
			if ( instr(msgtemp, 0, "\"") != (-1) ) {
				sstptalkc = 2
				if ( locvar_randskill_tcolfix == 0 ) {
					locvar_randskill_tcol = 210, 250, 160
				}
				else {
					locvar_randskill_tcolfix = 0
				}
			}
			if ( locvar_txt_conv_b >= 97 & locvar_txt_conv_b <= 122 ) {
				poke msgtemp, 0, locvar_txt_conv_b - 32
			}
		}
		else {
			locvar_txtcontinue_tcontinue = 0
		}
		if ( cfg_msgaddtime ) {
			sstptalkn = strmid(msgtemp, instr(msgtemp, 0, "]") + 1, 200)
		}
		else {
			sstptalkn = msgtemp
		}
		if ( sstptalkc == 2 ) {
			sreplace sstptalkn, sstptalkn, "\"", ""
		}
		msgtemp += " "
		if ( oom_talkchara != (-1) & locvar_randskill_f != 5 ) {
			if ( cfg_txtpop > 0 | ocFukidashiDisplayWhenOff(oom_talkchara) > 0 ) {
				if ( oom_popup(1) == 1 ) {
					locvar_txt_conv_tmpcolor = 0, 0, 0
					locvar_txt_conv_tmpbgcolor = 255, 255, 255
					locvar_txt_conv_tmpfont = 0, cfg_txtpopfont, 0
					if ( gdatac(20) == 1 ) {
						split8bit gdatac(21), locvar_txt_conv_tmpcolor
						split8bit gdatac(22), locvar_txt_conv_tmpbgcolor
						split8bit gdatac(23), locvar_txt_conv_tmpfont
					}
					if ( ocFukidashiIndividual(oom_talkchara) == 1 ) {
						split8bit ocFukidashiR(oom_talkchara), locvar_txt_conv_tmpcolor
						split8bit ocFukidashiG(oom_talkchara), locvar_txt_conv_tmpbgcolor
						split8bit ocFukidashiB(oom_talkchara), locvar_txt_conv_tmpfont
					}
					bgcolor = locvar_txt_conv_tmpbgcolor(0), locvar_txt_conv_tmpbgcolor(1), locvar_txt_conv_tmpbgcolor(2)
					if ( oom_popup(0) == 0 ) {
						oom_msgtemp = msgtemp
					}
					else {
						oom_msgtemp = ""
						repeat oom_popup(0) + 1
							oom_msgtemp += splitbuff(cnt)
						loop
					}
					if ( instr(oom_msgtemp, 0, "\"") != (-1) & instr(oom_msgtemp, 0, "\"") != (-1) ) {
						buffer 200 + txtpopupcnt, 800, 600
						font locvar_txt_conv_fontlist(locvar_txt_conv_tmpfont(0)), 2 + locvar_txt_conv_tmpfont(1) - en * 2, locvar_txt_conv_tmpfont(2)
						brex_match "m/\".+(?=\")/", oom_msgtemp, 0, oom_idx, oom_len
						poptemp = strmid(oom_msgtemp, oom_idx, oom_len)
						strrep poptemp, "ÅÙ1", "!"
						poptemp = strmid(poptemp, 1, 1000)
						autoinsertlf poptemp, txtpopupn, 48 * 5
						dim oom_txtsize, 2
						getstrrect hdc, txtpopupn, oom_txtsize
						width (oom_txtsize(0) + 10) * 3, oom_txtsize(1) + 20
						color 255, 0, 255
						boxf
						repeat 3
							color locvar_txt_conv_tmpcolor(0), locvar_txt_conv_tmpcolor(1), locvar_txt_conv_tmpcolor(2)
							fukidashi (oom_txtsize(0) + 10) * cnt, 0, oom_txtsize(0) + 10, oom_txtsize(1) + 10, 5, cnt + 1, bgcolor
							pos 5 + (oom_txtsize(0) + 10) * cnt, 5
							mes txtpopupn
						loop
						txtpopup(0, txtpopupcnt) = timeGetTime(), oom_talkchara, oom_txtsize(0) + 10, oom_txtsize(1) + 20
						txtpopupcnt = (txtpopupcnt + 1) \ length2(txtpopup)
						gsel BUFFER_SCREEN
					}
				}
			}
		}
		repeat
			await
			locvar_talk_conv_p = instr(msgtemp, 0, " ") + 1
			if ( locvar_talk_conv_p == 0 ) {
				break
			}
			if ( msglen + locvar_talk_conv_p > inf_maxmsglen ) {
				msg_newline
				continue
			}
			locvar_txt_conv_mst = strmid(msgtemp, 0, locvar_talk_conv_p)
			msg(msgline \ inf_maxlog) += locvar_txt_conv_mst
			msg_write locvar_txt_conv_mst
			msglen += locvar_talk_conv_p
			msgtemp = strmid(msgtemp, locvar_talk_conv_p, strlen(msgtemp) - locvar_talk_conv_p)
		loop
		msg(msgline \ inf_maxlog) += msgtemp
		msg_write msgtemp
		msglen += strlen(msgtemp)
	}
	return

#defcfunc name int name_arg1
	if ( name_arg1 == 0 ) {
		return lang("Ç†Ç»ÇΩ", "you")
	}
	if ( synccheck(name_arg1, -1) == 0 & petcheck(name_arg1) == 0 ) {
		return lang("âΩÇ©", "something")
	}
	if ( cBlind(CHARA_PLAYER) != 0 | (cbit(CHARA_BIT_INVISIBLE, name_arg1) == TRUE & cbit(CHARA_BIT_SEE_INVISIBLE, CHARA_PLAYER) == FALSE & cWet(name_arg1) == 0) ) {
		return lang("âΩÇ©", "something")
	}
	if ( en ) {
		locvar_name_s = strmid(cnName(name_arg1), 0, 1)
		if ( locvar_name_s == "\"" | locvar_name_s == "<" ) {
			return cnName(name_arg1)
		}
		if ( cbit(CHARA_BIT_HAS_NAME, name_arg1) == FALSE ) {
			return "the " + cnName(name_arg1)
		}
	}
	return cnName(name_arg1)

#defcfunc name2 int name2_prm0
	if ( name2_prm0 == 0 ) {
		return lang("Ç†Ç»ÇΩ", "you")
	}
	if ( en ) {
		locvar_name_s = strmid(cnName(name2_prm0), 0, 1)
		if ( locvar_name_s == "\"" | locvar_name_s == "<" ) {
			return cnName(name2_prm0)
		}
		if ( cbit(CHARA_BIT_HAS_NAME, name2_prm0) == FALSE ) {
			return "the " + cnName(name2_prm0)
		}
	}
	return cnName(name2_prm0)

#defcfunc aln int aln_charid
	if ( aln_charid == CHARA_PLAYER ) {
		return ""
	}
	if ( synccheck(aln_charid, -1) == 0 ) {
		return "ÇªÇÍÇÕ"
	}
	return "" + cnName(aln_charid) + "ÇÕ"

#defcfunc npcn int npcn_charid
	if ( npcn_charid == CHARA_PLAYER ) {
		return ""
	}
	if ( synccheck(npcn_charid, -1) == 0 ) {
		return "ÇªÇÍÇÕ"
	}
	return "" + cnName(npcn_charid) + "ÇÕ"

#defcfunc _s int _s_charid, int _s_arg2
	if ( _s_charid < CHARA_PLAYER | _s_charid >= MAX_CHARA_TOTAL ) {
		if ( _s_arg2 ) {
			return "es"
		}
		else {
			return "s"
		}
	}
	if ( _s_charid == CHARA_PLAYER ) {
		return ""
	}
	if ( _s_arg2 ) {
		return "es"
	}
	else {
		return "s"
	}

#defcfunc _s2 int _s2_arg1
	if ( _s2_arg1 > 1 ) {
		return ""
	}
	else {
		return "s"
	}

#defcfunc is2 int is2_arg1
	if ( is2_arg1 > 1 ) {
		return "are"
	}
	else {
		return "is"
	}

#defcfunc is int is_charid
	if ( is_charid < CHARA_PLAYER | is_charid >= MAX_CHARA_TOTAL ) {
		return "is"
	}
	if ( is_charid == CHARA_PLAYER ) {
		return "are"
	}
	return "is"

#defcfunc was int was_charid
	if ( was_charid < CHARA_PLAYER | was_charid >= MAX_CHARA_TOTAL ) {
		return "was"
	}
	if ( was_charid == CHARA_PLAYER ) {
		return "were"
	}
	return "was"

#defcfunc have int have_charid
	if ( have_charid < CHARA_PLAYER | have_charid >= MAX_CHARA_TOTAL ) {
		return "has"
	}
	if ( have_charid == CHARA_PLAYER ) {
		return "have"
	}
	return "has"

#defcfunc does int does_arg1
	if ( does_arg1 == 1 ) {
		return "do"
	}
	else {
		return "does"
	}

#defcfunc he int he_charid, int he_arg2
	if ( he_arg2 ) {
		if ( jp ) {
			if ( cSex(he_charid) == 0 ) {
				return "îﬁ"
			}
			else {
				return "îﬁèó"
			}
		}
		if ( cSex(he_charid) == 0 ) {
			return "he"
		}
		else {
			return "she"
		}
	}
	if ( he_charid < CHARA_PLAYER | he_charid >= MAX_CHARA_TOTAL ) {
		return "it"
	}
	if ( synccheck(he_charid, -1) == 0 ) {
		return "it"
	}
	if ( he_charid == CHARA_PLAYER ) {
		return "you"
	}
	if ( cSex(he_charid) == 0 ) {
		return "he"
	}
	return "she"

#defcfunc his int his_charid, int his_arg2
	if ( his_arg2 ) {
		if ( jp ) {
			if ( his_charid == CHARA_PLAYER ) {
				return "Ç†Ç»ÇΩÇÃ"
			}
			else {
				if ( cSex(his_charid) == 0 ) {
					return "îﬁÇÃ"
				}
				else {
					return "îﬁèóÇÃ"
				}
			}
		}
		if ( his_charid == CHARA_PLAYER ) {
			return "your"
		}
		else {
			if ( cSex(his_charid) == 0 ) {
				return "his"
			}
			else {
				return "her"
			}
		}
	}
	if ( his_charid < CHARA_PLAYER | his_charid >= MAX_CHARA_TOTAL ) {
		return "its"
	}
	if ( synccheck(his_charid, -1) == 0 ) {
		return "its"
	}
	if ( his_charid == CHARA_PLAYER ) {
		return "your"
	}
	if ( cSex(his_charid) == 0 ) {
		return "his"
	}
	return "her"

#defcfunc him int him_charid, int him_arg2
	if ( him_arg2 ) {
		if ( jp ) {
			if ( cSex(him_charid) == 0 ) {
				return "îﬁ"
			}
			else {
				return "îﬁèó"
			}
		}
		if ( cSex(him_charid) == 0 ) {
			return "him"
		}
		else {
			return "her"
		}
	}
	if ( him_charid < CHARA_PLAYER | him_charid >= MAX_CHARA_TOTAL ) {
		return "it"
	}
	if ( synccheck(him_charid, -1) == 0 ) {
		return "it"
	}
	if ( him_charid == CHARA_PLAYER ) {
		return "yourself"
	}
	if ( cSex(him_charid) == 0 ) {
		return "him"
	}
	return "her"

#defcfunc your int your_charid, int your_arg1
	if ( your_charid < CHARA_PLAYER | your_charid >= MAX_CHARA_TOTAL ) {
		return "'s"
	}
	if ( your_charid == CHARA_PLAYER ) {
		return "r"
	}
	return "'s"

#defcfunc yourself int yourself_charid
	if ( yourself_charid < CHARA_PLAYER | yourself_charid >= MAX_CHARA_TOTAL ) {
		return "itself"
	}
	if ( synccheck(yourself_charid, -1) == 0 ) {
		return "itself"
	}
	if ( yourself_charid == CHARA_PLAYER ) {
		return "yourself"
	}
	if ( cSex(yourself_charid) == 0 ) {
		return "himself"
	}
	return "herself"

#deffunc txt_select int txt_select_arg1, str txt_select_arg2, str txt_select_arg3, str txt_select_arg4, str txt_select_arg5, str txt_select_arg6, str txt_select_arg7, str txt_select_arg8, str txt_select_arg9, str txt_select_prm9
	locvar_txt_conv_cc = txt_select_arg1
	if ( cfg_nolog == 0 & nolog == 0 & item_count == 0 ) {
		if ( hear != 0 ) {
			snd hear
			hear = 0
		}
		oom_talkchara = txt_select_arg1
		if ( txtc == 0 ) {
			msgtemp = txt_select_arg2
			txt_conv
		}
		else {
			if ( txtc == 1 ) {
				msgtemp = txt_select_arg3
				txt_conv
			}
			else {
				if ( txtc == 2 ) {
					msgtemp = txt_select_arg4
					txt_conv
				}
				else {
					if ( txtc == 3 ) {
						msgtemp = txt_select_arg5
						txt_conv
					}
					else {
						if ( txtc == 4 ) {
							msgtemp = txt_select_arg6
							txt_conv
						}
						else {
							if ( txtc == 5 ) {
								msgtemp = txt_select_arg7
								txt_conv
							}
							else {
								if ( txtc == 6 ) {
									msgtemp = txt_select_arg8
									txt_conv
								}
								else {
									if ( txtc == 7 ) {
										msgtemp = txt_select_arg9
										txt_conv
									}
									else {
										msgtemp = txt_select_prm9
										txt_conv
									}
								}
							}
						}
					}
				}
			}
		}
		locvar_randskill_tcol = 255, 255, 255
		locvar_randskill_tcolfix = 0
	}
	return

#defcfunc cnvfix int cnvfix_arg1
	if ( cnvfix_arg1 >= 0 ) {
		return "+" + cnvfix_arg1
	}
	else {
		return "" + cnvfix_arg1
	}
	goto *label_0752

#deffunc stxt int stxt_arg1, str stxt_arg2
	if ( stxt_arg1 == 0 | (synccheck(stxt_arg1, -1) & cBlind(CHARA_PLAYER) == 0) ) {
		txt -1, stxt_arg2
	}
	return

#defcfunc cnvdate int cnvdate_arg1, int cnvdate_arg2
	locvar_cnvdate_p = cnvdate_arg1
	locvar_cnvdate_hour = cnvdate_arg1 \ 24
	locvar_cnvdate_day = cnvdate_arg1 / 24 \ 30
	if ( locvar_cnvdate_day == 0 ) {
		locvar_cnvdate_day = 30
		locvar_cnvdate_p -= 24 * 30
	}
	locvar_cnvdate_month = locvar_cnvdate_p / 24 / 30 \ 12
	if ( locvar_cnvdate_month == 0 ) {
		locvar_cnvdate_month = 12
		locvar_cnvdate_p -= 24 * 30 * 12
	}
	locvar_cnvdate_year = locvar_cnvdate_p / 24 / 30 / 12
	if ( jp ) {
		locvar_cnvdate_s = "" + locvar_cnvdate_year + "îN" + locvar_cnvdate_month + "åé" + locvar_cnvdate_day + "ì˙"
		if ( cnvdate_arg2 == 1 ) {
			locvar_cnvdate_s += "" + locvar_cnvdate_hour + "éû"
		}
	}
	else {
		locvar_cnvdate_s = "" + locvar_cnvdate_year + " " + locvar_cnvdate_month + "/" + locvar_cnvdate_day + " "
		if ( cnvdate_arg2 == 1 ) {
			locvar_cnvdate_s += "" + locvar_cnvdate_hour + "h"
		}
	}
	return locvar_cnvdate_s

#defcfunc cnvplaytime int cnvplaytime_arg1
	return "" + cnvplaytime_arg1 / 60 / 60 + lang("éûä‘", ":") + cnvplaytime_arg1 / 60 \ 60 + lang("ï™", ":") + cnvplaytime_arg1 \ 60 + lang("ïb", " Sec")

#defcfunc roundmargin int roundmargin_arg1, int roundmargin_arg2
	if ( roundmargin_arg1 > roundmargin_arg2 ) {
		return roundmargin_arg1 - rnd(roundmargin_arg1 - roundmargin_arg2)
	}
	if ( roundmargin_arg1 < roundmargin_arg2 ) {
		return roundmargin_arg1 + rnd(roundmargin_arg2 - roundmargin_arg1)
	}
	return roundmargin_arg1

*label_0752

#deffunc at int at_waittime
	if ( cc == CHARA_PLAYER ) {
		autoturn = 1
		if ( cfg_autoturn == 0 ) {
			await at_waittime
			if ( gTimeStopTime == 0 ) {
				scrturn++
			}
		}
		if ( cfg_autoturn != 2 | firstautoturn == 1 ) {
			screenupdate = -1
			gosub *screen_draw
		}
		if ( cfg_autoturn == 0 ) {
			redraw 1
		}
	}
	return

#deffunc text_set
	sdim bodyn, 4, 15
	_impression = lang("ìVìG", "Foe"), lang("åôÇ¢", "Hate"), lang("Ç§Ç¥Ç¢", "Annoying"), lang("ïÅí ", "Normal"), lang("çDà”ìI", "Amiable"), lang("óFíB", "Friend"), lang("êeóF", "Fellow"), lang("ç∞ÇÃóF", "Soul Mate"), lang("*Love*", " *Love*")
	if ( jp ) {
		_weather = "", "*ÉGÅ[ÉeÉã*", "ê·", "âJ", "óãâJ"
	}
	else {
		_weather = "", "Etherwind", "Snow", "Rain", "Hard rain"
	}
	if ( jp ) {
		_homename = "ì¥åA", "êXÇÃÇŸÇ¡ÇΩÇƒè¨âÆ", "èZÇ›êSínÇÃÇ¢Ç¢â∆", "ÉZÉåÉuì@", "ÉTÉCÉoÅ[ÉnÉEÉX", "è¨èÈ"
		_furniture = "", "Ç›Ç∑Ç⁄ÇÁÇµÇ¢", "ãCÇ…Ç»ÇÈ", "Ç¢Ç¢ä¥Ç∂ÇÃ", "É}É_ÉÄéEÇµÇÃ", "évÇÌÇ∏å©ì¸ÇËÇªÇ§Ç»", "É}ÉjÉAå¸ÇØÇÃ", "ê¶Ç≠âÿóÌÇ»", "â§â∆å‰ópíBÇÃ", "å|èpìIÇ»", "ê_ÅXÇµÇ¢", "ê¢äEç≈çÇÇÃ"
		_weight = "í¥É~ÉjÇ…", "è¨êUÇËÇ…", "éËÇ≤ÇÎÇ…", "Ç‚Ç‚ëÂÇ´Ç≠", "Ç«Ç≈Ç©Ç≠", "Ç©Ç»ÇËãêëÂÇ…", "âªÇØï®ÉTÉCÉYÇ…", "êlÇÊÇËëÂÇ´Ç≠", "ì`ê‡ìIÉTÉCÉYÇ…", "è€ÇÊÇËèdÇ≠"
	}
	else {
		_homename = "cave", "shack", "cozy house", "estate", "cyber house", "small castle"
		_furniture = "", "stupid", "lame", "cool", "madam's favorite", "bewitched", "maniac", "magnificent", "royal", "masterpiece", "heavenly", "godly"
		_weight = "extremely mini", "small", "handy", "rather big", "huge", "pretty huge", "monstrous-size", "bigger than a man", "legendary-size", "heavier than an elephant"
	}
	sdim _tone, 20, 10
	if ( jp ) {
		_reward = "", "ëïîıïi", "ñÇìπãÔ", "ñhãÔ", "ïêäÌ", "ï‚ããïi"
	}
	else {
		_reward = "", "equipment", "magical goods", "armor", "weapons", "ores", "furnitures"
	}
	if ( jp ) {
		_time = "ê[ñÈ", "ñÈñæÇØ", "í©", "íã", "è™", "ñÈ", "", ""
	}
	else {
		_time = "Midnight", "Dawn", "Morning", "Noon", "Dusk", "Night", "", ""
	}
	if ( jp ) {
		_stats = " óÕ", " ëœ", " äÌ", " ä¥", " èK", " à”", " ñÇ", " ñ£"
		_stats2 = "ãÿóÕ", "ëœãv", "äÌóp", "ä¥äo", "èKìæ", "à”év", "ñÇóÕ", "ñ£óÕ"
	}
	else {
		_stats = "STR", "CON", "DEX", "PER", "LER", "WIL", "MAG", "CHR"
		_stats2 = " STR", " CON", " DEX", " PER", " LER", " WIL", " MAG", " CHR"
	}
	if ( jp ) {
		_hunger = "âÏéÄíÜ", "ãQâÏ", "ãÛï†", "ãÛï†", "ãÛï†", "", "", "", "", "", "ñûï†", "ñûï†", "êHâﬂÇ¨"
		_burden = "", "èdâ◊", "à≥îó", "í¥âﬂ", "í◊ÇÍíÜ"
		_sleep = "êáñ∞â¬", "óvêáñ∞", "óvêáñ∞"
		_consick = "ïaãC", "èdïa"
		_conpoison = "ì≈", "ñ“ì≈"
		_condim = "ûNûO", "ç¨ë˜", "ãCê‚"
		_conangry = "åÉì{", "ã∂óê"
		_conbleed = "êÿÇËèù", "èoåå", "ëÂèoåå"
		_coninsane = "ïsà¿íË", "ã∂ãC", "ïˆâÛ"
		_condrunk = "êåï•Ç¢"
		_conwet = "îGÇÍ"
		_congravity = "èdóÕ"
		_consleep = "êáñ∞", "îöêá"
		_conblind = "ñ”ñ⁄"
		_conparalyze = "ñÉ·É"
		_storned = "êŒâª"
		_conmochi = "íÇëß"
		_conconfuse = "ç¨óê"
		_confear = "ã∞ï|"
		_confatigue = "åyîÊòJ", "îÊòJ", "âﬂòJ", "å≥ãC"
		_stress = "àÀë∂è«"
		_aphrodisiac = "ç√à˙"
	}
	else {
		_hunger = "Starving!", "Starving", "Hungry!", "Hungry", "Hungry", "", "", "", "", "", "Satisfied", "Satisfied!", "Bloated"
		_burden = "", "Burden", "Burden!", "Overweight", "Overweight!"
		_sleep = "Sleepy", "Need Sleep", "Need Sleep!"
		_consick = "Sick", "Very Sick"
		_conpoison = "Poisoned", "Poisoned Bad!"
		_condim = "Dim", "Muddled", "Unconscious"
		_conangry = "Fury", "Berserk"
		_conbleed = "Bleeding", "Bleeding!", "Hemorrhage"
		_coninsane = "Unsteady", "Insane", "Paranoia"
		_condrunk = "Drunk"
		_conwet = "Wet"
		_congravity = "Gravity"
		_consleep = "Sleep", "Deep Sleep"
		_conblind = "Blinded"
		_conparalyze = "Paralyzed"
		_storned = "Storned"
		_conmochi = "Choked"
		_conconfuse = "Confused"
		_confear = "Fear"
		_confatigue = "Tired", "Very tired", "VERY tired", "Spry"
		_stress = "Frustration"
		_aphrodisiac = "Aphrodisiac"
	}
	if ( jp ) {
		_quality = "", "ëeà´", "ó«éø", "çÇïiéø", "äÔê’", "ê_äÌ", "ì¡ï "
	}
	else {
		_quality = "", "bad", "good", "great", "miracle", "godly", "special"
	}
	if ( jp ) {
		_resist = "ívñΩìIÇ»é„ì_", "é„ì_", "ëœê´Ç»Çµ", "é„Ç¢ëœê´", "ïÅí ÇÃëœê´", "ã≠Ç¢ëœê´", "ëfê∞ÇÁÇµÇ¢ëœê´"
	}
	else {
		_resist = "Critically Weak", "Weak", "No Resist", "Little", "Normal", "Strong", "Superb"
	}
	if ( jp ) {
		_mark = "ÅB", "ÅH", "ÅI", ""
	}
	else {
		_mark = ".", "?", "!", ""
	}
	if ( jp ) {
		_sex = "íj", "èó"
		_sex2 = "íj", "èó"
	}
	else {
		_sex = "Male", "Female"
		_sex2 = "boy", "girl"
	}
	dim _onii2, 14, 2
	dim _onii3, 6, 2
	if ( jp ) {
		_onii = "Ç®åZ", "Ç®éo"
		_nii = "åZ", "éo"
		_onii2(0, 0) = "", "Ç®åZÇøÇ·ÇÒ", "Ç®åZÇøÇ·Ç‹", "Ç†Ç…Ç°", "Ç®åZól", "Ç®Ç…Ç¢ÇΩÇ‹", "åZè„ól", "Ç…Ç¢Ç≥Ç‹", "ÉAÉjÉL", "åZÇ≠ÇÒ", "åZåNÇ≥Ç‹", "åZÉ`ÉÉÉ}", "åZÇ‚", "åZÇ≥ÇÒ"
		_onii2(0, 1) = "", "Ç®éoÇøÇ·ÇÒ", "Ç®éoÇøÇ·Ç‹", "Ç®ÇÀÇ•", "Ç®éoól", "Ç®ÇÀÇ¶ÇΩÇ‹", "éoè„ól", "Ç†ÇÀÇ≥Ç‹", "ÉAÉlÉL", "éoÇ≠ÇÒ", "éoåNÇ≥Ç‹", "éoÉ`ÉÉÉ}", "éoÇ‚", "éoÇ≥ÇÒ"
		_onii3(0, 0) = "Ç®åZÇøÇ·ÇÒÅI", "Ç®åZÇøÇ·Å`ÇÒ", "Ç®åZÇøÇ·ÇÒÇ¡", "Ç®åZÇøÇ·ÇÒÅH", "Ç®åZÅ`ÇøÇ·ÇÒ", "Ç®åZÇøÇ·ÇÒÅÙ"
		_onii3(0, 1) = "Ç®éoÇøÇ·ÇÒÅI", "Ç®éoÇøÇ·Å`ÇÒ", "Ç®éoÇøÇ·ÇÒÇ¡", "Ç®éoÇøÇ·ÇÒÅH", "Ç®éoÅ`ÇøÇ·ÇÒ", "Ç®éoÇøÇ·ÇÒÅÙ"
		_onii4 = "Ç®Ç…Å[ÇøÇ·ÇÒ", "Ç®ÇÀÅ[ÇøÇ·ÇÒ"
		_syujin = "Ç≤éÂêlól", "Ç®èÏól"
	}
	else {
		_onii = "onii", "onee"
		_nii = "nii", "nee"
		_onii2(0, 0) = "", "Oniichan", "Oniichama", "Big bro", "Oniisama", "Oniitama", "My dear brother", "Niisama", "Bro", "Older brother", "Dear brother", "Brother", "Elder brother", "Niisan"
		_onii2(0, 1) = "", "Oneechan", "Oneechama", "Big sis", "Oneesama", "Oneetama", "My dear sister", "Neesama", "Sis", "Older sister", "Dear sister", "Sister", "Elder sister", "Neesan"
		_onii3(0, 0) = "Brother!", "Brother~", "Brother", "Brother?", "Bro~ther", "BrotherÅÙ"
		_onii3(0, 1) = "Sister!", "Sister~", "Sister", "Sister?", "Sis~ter", "SisterÅÙ"
		_onii4 = "Onii-chan", "Onee-chan"
		_syujin = "my master", "my lady"
	}
	if ( jp ) {
		strhint1 = "∂∞øŸ [ëIë]  "
		strhint2 = "" + key_pageup + "," + key_pagedown + " [ÉyÅ[ÉWêÿë÷]  "
		strhint3 = "Shift,Esc [ï¬Ç∂ÇÈ]  "
		strhint3b = "Shift,Esc [ñﬂÇÈ]  "
		strhint4 = "åàíËÅA"
		strhint5 = "" + key_identify + " [ä˘ímÇÃèÓïÒ]  "
		strhint5b = "" + key_mode + "," + key_msglog + " [èÓïÒêÿë÷]  "
		strhint6 = "p [É|Å[ÉgÉåÉCÉgïœçX]  "
		strhint7 = "0Å`9 [ÉVÉáÅ[ÉgÉJÉbÉg]  "
		oom_strhint1 = "" + key_drink + " [ÉGÉìÉ`ÉÉÉìÉgÉtÉBÉãÉ^]  "
		oom_strhint2 = "" + key_search + " [É\Å[Égèáêÿë÷]  "
		oom_strhint3 = "" + key_prev + "," + key_next + " [ÉJÉeÉSÉäêÿë÷]  "
		oom_strhint4 = "" + key_southwest + "," + key_southeast + " [ã≠ìxéwíË]  "
		oom_strhint5 = "" + key_mode2 + " [ëïîıÉZÉbÉgï€ë∂]  "
		oom_strhint6 = "" + key_msglog + " [ëïîıÉZÉbÉgì«Ç›çûÇ›]  "
		oom_strhint7 = "" + key_drink + " [ÉGÉìÉ`ÉÉÉìÉgéwíËé©ìÆëïîı]  "
		oom_strhint8 = "" + key_mode2 + " [åpè≥éwíË]  " + key_msglog + " [ê∂Ç´ïêäÌéwíË]  "
		oom_strhint9 = "" + key_read + " [ÉAÉCÉeÉÄÉJÉEÉìÉg]  "
		oomsest_strhint1 = "" + key_msglog + " [ÉtÉBÉãÉ^]  "
		oomsest_strhint2 = "" + key_mode3 + " [ëSÇƒíuÇ≠]  "
		oomsest_strhint3 = "" + key_mode3 + " [ëSÇƒèEÇ§]  "
		oomsest_strhint4 = "" + key_mode3 + " [Ç∑Ç◊Çƒçwì¸]  "
		oomsest_strhint5 = "" + key_mode3 + " [Ç∑Ç◊ÇƒîÑãp]  "
		oomsest_strhint6 = "" + key_mode3 + " [ÉAÉCÉeÉÄÇÃèÓïÒÇÉçÉOÇ…ëóÇÈ]  "
		oomsest_strhint7 = "" + key_mode3 + " [ã‡â›ÇìnÇ∑]  "
		strmale = "íjê´"
		strfemale = "èóê´"
		strbye = "Ç≥ÇÊÇ§Ç»ÇÁ"
		strmore = "(ë±Ç≠)"
		strnogold = "(èäéùã‡Ç™ë´ÇËÇ»Ç¢ÅI)"
		strinteractfail = "ÇªÇÃï˚å¸Ç…ÇÕÅAëÄçÏÇ≈Ç´ÇÈëŒè€ÇÕÇ»Ç¢ÅB"
		invtitle = "", "í≤Ç◊ÇÈ", "íuÇ≠", "èEÇ§", "", "êHÇ◊ÇÈ", "ëïîıÇ∑ÇÈ", "ì«Çﬁ", "à˘Çﬁ", "êUÇÈ", "ìnÇ∑", "çwì¸Ç∑ÇÈ", "îÑãpÇ∑ÇÈ", "ä”íËÇ∑ÇÈ", "égÇ§", "äJÇ≠", "óøóùÇ∑ÇÈ", "í≤çá", "ç¨Ç∫ÇÈëŒè€", "ï˘Ç∞ÇÈ", "åä∑Ç∑ÇÈ", "íÒé¶Ç∑ÇÈ", "éÊÇÈ", "ëŒè€ÇÃ", "ì¸ÇÍÇÈ", "Ç‡ÇÁÇ§", "ìäÇ∞ÇÈ", "ìêÇﬁ", "åä∑Ç∑ÇÈ", "ó\ñÒÇ∑ÇÈ", "íbÇ¶ÇÈ", "êAÇ¶ÇÈ", "ëïíÖÇ∑ÇÈ", "ëóÇÈ", "îÏóøÇ…Ç∑ÇÈ", "åä∑Ç∑ÇÈ", ""
		bodyn = "", "ì™", "éÒ", "îwíÜ", "ì∑ëÃ", "éË", "éw", "òr", "çò", "ë´", "âìäu", "ñÓíe"
		actlistn = "çsìÆ", "êHéñ", "ì«èë", "à⁄ìÆ", "ãxëß", "çÃå@", "ââët", "íﬁÇË", "çÃéÊ", "íTçı", "çsìÆ", "çsìÆ", "çsìÆ", "çsìÆ"
	}
	else {
		strhint1 = "Cursor [Select]  "
		strhint2 = "" + key_pageup + "," + key_pagedown + " [Page]  "
		strhint3 = "Shift,Esc [Close]  "
		strhint3b = "Shift,Esc [Back]  "
		strhint4 = "Enter,"
		strhint5 = "" + key_identify + " [Known info]  "
		strhint5b = "" + key_mode + " [Mode]  "
		strhint6 = "p [Portrait]  "
		strhint7 = "0~9 [Shortcut]  "
		oom_strhint1 = "" + key_drink + " [Filter enc]  "
		oom_strhint2 = "" + key_search + " [Sort ascend/dscend]  "
		oom_strhint3 = "" + key_prev + "," + key_next + " [Switch category]  "
		oom_strhint4 = "" + key_southwest + "," + key_southeast + " [Filter strength]  "
		oom_strhint5 = "" + key_mode2 + " [Save equips]  "
		oom_strhint6 = "" + key_msglog + " [Load equips]  "
		oom_strhint7 = "" + key_drink + " [Auto-equip]  "
		oom_strhint8 = "" + key_mode2 + " [Only Inherited]  " + key_msglog + " [Only Alive]  "
		oomsest_strhint1 = "" + key_msglog + " [Filter]  "
		oomsest_strhint2 = "" + key_mode3 + " [Drop all]  "
		oomsest_strhint3 = "" + key_mode3 + " [Pickup all]  "
		oomsest_strhint4 = "" + key_mode3 + " [Buy all]  "
		oomsest_strhint5 = "" + key_mode3 + " [Sell all]  "
		oomsest_strhint6 = "" + key_mode3 + " [Item info to Log]  "
		strmale = "male"
		strfemale = "female"
		strbye = "Bye bye."
		strmore = "(More)"
		strnogold = "(You don't have enough money!)"
		strinteractfail = "There's no valid target in that direction."
		invtitle = "", "Examine", "Drop", "Pick Up", "", "Eat", "Wear", "Read", "Drink", "Zap", "Give", "Buy", "Sell", "Identify", "Use", "Open", "Cook", "Mix", "Mix Target", "Offer", "Trade", "Present", "Take", "Target", "Put", "Take", "Throw", "Pickpocket", "Trade", "Reserve", "Forge", "Plant", "Equip", "Conpost", "Trade", ""
		bodyn = "", "Head", "Neck", "Back", "Body", "Hand", "Ring", "Arm", "Waist", "Leg", "Shoot", "Ammo"
		actlistn = "current action", "eating", "reading", "moving", "resting", "mining", "playing", "fishing", "collecting materials", "searching", "current action", "current action", "current action", "current action"
	}
	sdim _cast, 30, 7
	_cast(0) = lang("ñÇñ@Çârè•ÇµÇΩÅB", " casts a spell.")
	_cast(1) = lang("éÖÇìfÇ¢ÇΩÅB", " splits cobweb.")
	_cast(2) = lang("ëÃâtÇÇ‹Ç´éUÇÁÇµÇΩÅB", " spreads body fluid.")
	_cast(3) = lang("êGéËÇêLÇŒÇµÇΩÅB", " puts out a tentacle.")
	_cast(4) = lang("âsÇ≠·…ÇÒÇæÅB", " gazes.")
	_cast(5) = lang("ñEéqÇîÚÇŒÇµÇΩÅB", " scatters spores.")
	_cast(6) = lang("ç◊Ç©Ç≠êUìÆÇµÇΩÅB", " vibrates.")
	sdim _melee, 20, 4, 8
	if ( jp ) {
		_melee(0, 0) = "â£Ç¡Çƒ", "â£ÇÁÇÍÇΩÅB", "éË", "â£Ç¡ÇΩÅB"
		_melee(0, 1) = "à¯Ç¡ë~Ç´", "à¯Ç¡ë~Ç©ÇÍÇΩÅB", "í‹", "à¯Ç¡ë~Ç¢ÇΩÅB"
		_melee(0, 3) = "äöÇ›ïtÇ¢Çƒ", "äöÇ›ïtÇ©ÇÍÇΩÅB", "âÂ", "äöÇ›ïtÇ¢ÇΩÅB"
		_melee(0, 4) = "·…ÇÒÇ≈", "·…Ç‹ÇÍÇΩÅB", "ä·", "·…ÇÒÇæÅB"
		_melee(0, 5) = "éhÇµ", "éhÇ≥ÇÍÇΩÅB", "êj", "éhÇµÇΩÅB"
		_melee(0, 6) = "êGÇ¡Çƒ", "êGÇÁÇÍÇΩÅB", "éË", "êGÇ¡ÇΩÅB"
		_melee(0, 7) = "ñEéqÇéTÇ´éUÇÁÇµ", "ñEéqÇîÚÇŒÇ≥ÇÍÇΩÅB", "ñEéq", "ñEéqÇéTÇ´éUÇÁÇµÇΩÅB"
	}
	else {
		_melee(0, 0) = "punch", "punch", "hand", "punch"
		_melee(0, 1) = "claw", "claw", "claw", "claw"
		_melee(0, 3) = "bite", "bite", "fang", "bite"
		_melee(0, 4) = "gaze", "gaze", "eye", "gaze"
		_melee(0, 5) = "sting", "sting", "needle", "sting"
		_melee(0, 6) = "touch", "touch", "hand", "touch"
		_melee(0, 7) = "attack", "attack", "spore", "attack"
	}
	randcolor = 0, 4, 2, 5, 6
	_randcolor = 0, 2, 4, 5, 6, 3
	if ( jp ) {
		_namepotion = "ìßñæÇ»", "óŒêFÇÃ", "ê¬Ç¢", "ã‡êFÇÃ", "íÉêFÇ¢", "ê‘Ç¢"
		_namespellbook = "ï™å˙Ç¢", "ë€ÇﬁÇµÇΩ", "ê^êVÇµÇ¢", "çãâÿÇ»", "å√Ç—ÇΩ", "ååÇÃìHÇÈ"
		_namescroll = "Ç©Ç∑ÇÍÇΩ", "ë€ÇﬁÇµÇΩ", "Ç⁄ÇÎÇ⁄ÇÎÇÃ", "ìÔÇµÇªÇ§Ç»", "å√Ç—ÇΩ", "ååï∂éöÇÃ"
		_namestaff = "ìSÇÃ", "Ç¬ÇΩÇÃ", "ÉTÉtÉ@ÉCÉAÇÃ", "ã‡ÇÃ", "ñÿÇÃ", "éKÇÃ"
		_namering = "ìSÇÃ", "óŒÇÃ", "ÉTÉtÉ@ÉCÉAÇÃ", "ã‡ÇÃ", "ñÿÇÃ", "éKÇ—ÇΩ"
	}
	else {
		_namepotion = "clear", "green", "blue", "gold", "brown", "red"
		_namespellbook = "thick", "mossy", "clear", "luxurious", "old", "bloody"
		_namescroll = "blurred", "mossy", "ragged", "boring", "old", "bloody"
		_namestaff = "iron", "ivy", "sapphire", "golden", "wooden", "rusty"
		_namering = "iron", "green", "sapphire", "golden", "wooden", "rusty"
	}
	if ( jp ) {
		homepage = "http://homepage3.nifty.com/rfish/index.html"
	}
	else {
		homepage = "http://homepage3.nifty.com/rfish/index_e.html"
	}
	if ( jp ) {
		strcursed = "éÙÇÌÇÍÇΩ"
		strblessed = "èjïüÇ≥ÇÍÇΩ"
		strdoomed = "ë¬óéÇµÇΩ"
	}
	else {
		strcursed = "cursed"
		strblessed = "blessed"
		strdoomed = "doomed"
	}
	if ( jp ) {
		stramulet = "éÒè¸ÇË"
		strring = "éwó÷"
		strpotion = "É|Å[ÉVÉáÉì"
		strspellbook = "ñÇñ@èë"
		strscroll = "ä™ï®"
		strstaff = "ñÇñ@ñ_"
	}
	else {
		stramulet = "amulet"
		strring = "ring"
		strpotion = "potion"
		strspellbook = "spellbook"
		strscroll = "scroll"
		strstaff = "rod"
	}
	if ( jp ) {
		strbracketleft = "Åw"
		strbracketright = "Åx"
	}
	else {
		strbracketleft = "<"
		strbracketright = ">"
	}
	if ( jp ) {
		strfix = "èCê≥"
	}
	else {
		strfix = "bonus"
	}
	if ( jp ) {
		strsex = "ê´ï "
	}
	else {
		strsex = "sex"
	}
	if ( jp ) {
		strgold = " gold"
		strplat = " plat"
	}
	else {
		strgold = " gold pieces"
		strplat = " platinum pieces"
	}
	if ( jp ) {
		strweight = "s"
	}
	else {
		strweight = "s"
	}
	if ( jp ) {
		stryes = "Ç†Ç†"
		strno = "Ç¢Ç‚Åc"
	}
	else {
		stryes = "Yes"
		strno = "No.."
	}
	if ( jp ) {
		strblank = ""
	}
	else {
		strblank = " "
	}
	return

#defcfunc elename int elename_ele
	if ( efid == SKILL_SPACT_TOUCH_OF_HUNGER ) {
		return lang("ãQÇ¶ÇΩ", "starving")
	}
	if ( efid == SKILL_SPACT_TOUCH_OF_WEAKNESS ) {
		return lang("ïÖÇ¡ÇΩ", "rotten")
	}
	if ( efid == SKILL_SPACT_TOUCH_OF_FEAR ) {
		return lang("ã∞ÇÎÇµÇ¢", "fearful")
	}
	if ( efid == SKILL_SPACT_TOUCH_OF_SLEEP ) {
		return lang("è_ÇÁÇ©Ç¢", "silky")
	}
	if ( elename_ele == SKILL_RES_FIRE ) {
		return lang("îRÇ¶ÇÈ", "burning")
	}
	if ( elename_ele == SKILL_RES_COLD ) {
		return lang("ó‚ÇΩÇ¢", "icy")
	}
	if ( elename_ele == SKILL_RES_LIGHTNING ) {
		return lang("ï˙ìdÇ∑ÇÈ", "electric")
	}
	if ( elename_ele == SKILL_RES_MIND ) {
		return lang("óÏìIÇ»", "psychic")
	}
	if ( elename_ele == SKILL_RES_NERVE ) {
		return lang("·ÉÇÍÇÈ", "numb")
	}
	if ( elename_ele == SKILL_RES_SOUND ) {
		return lang("êkÇ¶ÇÈ", "shivering")
	}
	if ( elename_ele == SKILL_RES_POISON ) {
		return lang("ì≈ÇÃ", "poisonous")
	}
	if ( elename_ele == SKILL_RES_NETHER ) {
		return lang("ínçñÇÃ", "infernal")
	}
	if ( elename_ele == SKILL_RES_CHAOS ) {
		return lang("ç¨ì◊ÇÃ", "chaotic")
	}
	if ( elename_ele == SKILL_RES_DARKNESS ) {
		return lang("à√çïÇÃ", "gloomy")
	}
	if ( elename_ele == SKILL_RESDMG_CUT ) {
		return lang("èoååÇÃ", "cut")
	}
	if ( elename_ele == SKILL_RESDMG_ETHER ) {
		return lang("ÉGÅ[ÉeÉãÇÃ", "ether")
	}
	return "?"

#deffunc txttargetlevel
	if ( cLevel(CHARA_PLAYER) * 20 < cLevel(tc) ) {
		s = lang("ëäéËÇ™ãêêlÇæÇ∆Ç∑ÇÍÇŒÅAÇ†Ç»ÇΩÇÕãaÇÃÉtÉìà»â∫ÇæÅB", "If " + he(tc) + " is a giant, you are less than a dropping of an ant.")
		return
	}
	if ( cLevel(CHARA_PLAYER) * 10 < cLevel(tc) ) {
		s = lang("ê‚ëŒÇ…èüÇƒÇ»Ç¢ëäéËÇæÅB", cnven(he(tc)) + " can mince you with " + his(tc) + " eyes closed.")
		return
	}
	if ( cLevel(CHARA_PLAYER) * 5 < cLevel(tc) ) {
		s = lang("ämé¿Ç…éEÇ≥ÇÍÇÈÇæÇÎÇ§ÅB", "You will get killed, a hundred percent sure.")
		return
	}
	if ( cLevel(CHARA_PLAYER) * 3 < cLevel(tc) ) {
		s = lang("äÔê’Ç™ãNÇ´Ç»ÇØÇÍÇŒéEÇ≥ÇÍÇÈÇæÇÎÇ§ÅB", "You will get killed unless miracles happen.")
		return
	}
	if ( cLevel(CHARA_PLAYER) * 2 < cLevel(tc) ) {
		s = lang("è≠Ç»Ç≠Ç∆Ç‡ÅAÇ†Ç»ÇΩÇÃî{ÇÕã≠ÇªÇ§ÇæÅB", cnven(he(tc)) + " " + is(tc) + " at least twice stronger than you.")
		return
	}
	if ( cLevel(CHARA_PLAYER) * 3 / 2 < cLevel(tc) ) {
		s = lang("ëäéËÇÕÇ©Ç»ÇËã≠ÇªÇ§ÇæÅB", "The opponent looks quite strong.")
		return
	}
	if ( cLevel(CHARA_PLAYER) < cLevel(tc) ) {
		s = lang("èüÇƒÇ»Ç¢ëäéËÇ≈ÇÕÇ»Ç¢ÅB", "Won't be an easy fight.")
		return
	}
	if ( cLevel(CHARA_PLAYER) / 3 * 2 < cLevel(tc) ) {
		s = lang("ÇΩÇ‘ÇÒèüÇƒÇªÇ§ÇæÅB", "You will probably win.")
		return
	}
	if ( cLevel(CHARA_PLAYER) / 2 < cLevel(tc) ) {
		s = lang("ïâÇØÇÈãCÇÕÇµÇ»Ç¢ÅB", cnven(he(tc)) + " " + is(tc) + " an easy opponent.")
		return
	}
	if ( cLevel(CHARA_PLAYER) / 3 < cLevel(tc) ) {
		s = lang("ñ⁄âBÇµÇµÇƒÇ¢ÇƒÇ‡èüÇƒÇªÇ§ÇæÅB", "You bet you can beat " + him(tc) + " with your eyes closed.")
		return
	}
	s = lang("ñ⁄âBÇµÇµÇƒç¿Ç¡ÇƒÇ¢ÇƒÇ‡èüÇƒÇÈÅB", "You can absolutely beat " + him(tc) + " with your eyes closed and arms crossed.")
	return

#defcfunc sncnv var sncnv_arg1
	return strmid(sncnv_arg1, 0, instr(sncnv_arg1, 0, " ")) + " "

#deffunc sngeneral var sngeneral_arg1
	sngeneral_arg1 = lang("éGâ›âÆÇÃ" + sngeneral_arg1, sncnv(sngeneral_arg1) + "the general vendor")
	return

#deffunc sninn var sninn_arg1
	sninn_arg1 = lang("èhâÆÇÃ" + sninn_arg1, sncnv(sninn_arg1) + "the innkeeper")
	return

#deffunc sntrade var sntrade_arg1
	sntrade_arg1 = lang("åà’ìXÇÃ" + sntrade_arg1, sncnv(sntrade_arg1) + "the trader")
	return

#deffunc sngoods var sngoods_arg1
	sngoods_arg1 = lang("âΩÇ≈Ç‡âÆÇÃ" + sngoods_arg1, sncnv(sngoods_arg1) + "the goods vendor")
	return

#deffunc snbakery var snbakery_arg1
	snbakery_arg1 = lang("ÉpÉìâÆÇÃ" + snbakery_arg1, sncnv(snbakery_arg1) + "the baker")
	return

#deffunc snmagic var snmagic_arg1
	snmagic_arg1 = lang("ñÇñ@ìXÇÃ" + snmagic_arg1, sncnv(snmagic_arg1) + "the magic vendor")
	return

#deffunc snarmor var snarmor_arg1
	snarmor_arg1 = lang("ïêãÔìXÇÃ" + snarmor_arg1, sncnv(snarmor_arg1) + "the blacksmith")
	return

#deffunc sntrainer var sntrainer_arg1
	sntrainer_arg1 = lang("ÉMÉãÉhÇÃ" + sntrainer_arg1, sncnv(sntrainer_arg1) + "the trainer")
	return

#deffunc snfish var snfish_arg1
	snfish_arg1 = lang("íﬁãÔìXÇÃ" + snfish_arg1, sncnv(snfish_arg1) + "the fisher")
	return

#deffunc snblack var snblack_arg1
	snblack_arg1 = lang("ÉuÉâÉbÉNÉ}Å[ÉPÉbÉgÇÃ" + snblack_arg1, sncnv(snblack_arg1) + "the blackmarket vendor")
	return

#deffunc snfood var snfood_arg1
	snfood_arg1 = lang("êHïiìX" + snfood_arg1, sncnv(snfood_arg1) + "the food vendor")
	return

#deffunc snhorse var snhorse_prm0
	snhorse_prm0 = lang("înâÆÇÃ" + snhorse_prm0, sncnv(snhorse_prm0) + "the horse master")
	return

#deffunc txtsetlastword
	notesel buff
	noteload exedir + "user\\" + lang("lastwords.txt", "lastwords-e.txt")
	noteget lastword, rnd(noteinfo(0))
	return

#deffunc txtsetwinword int txtsetwinword_arg1
	repeat 6
		i = rnd(cnt + 1)
		p(cnt) = p(i)
		p(i) = cnt
	loop
	repeat txtsetwinword_arg1
		if ( p(cnt) == 0 ) {
			s(cnt) = lang("êãÇ…ÅcÅI", "Finally!")
		}
		if ( p(cnt) == 1 ) {
			s(cnt) = lang("ìñëRÇÃåãâ Çæ", "It's a matter of course.")
		}
		if ( p(cnt) == 2 ) {
			s(cnt) = lang("Ç®ÇßÇßÇßÇßÅI", "Woooooo!")
		}
		if ( p(cnt) == 3 ) {
			s(cnt) = lang("Ç”Ç¡", "Heh.")
		}
		if ( p(cnt) == 4 ) {
			s(cnt) = lang("ç°ì˙ÇÕñ∞ÇÍÇ»Ç¢Ç»", "I can't sleep tonight.")
		}
		if ( p(cnt) == 5 ) {
			s(cnt) = lang("Ç‹ÇΩÇªÇÒÇ»èÁíkÇ", "You're kidding.")
		}
	loop
	return

#defcfunc limitmax int limitmax_arg1, int limitmax_arg2
	if ( limitmax_arg1 > limitmax_arg2 ) {
		return limitmax_arg2
	}
	else {
		return limitmax_arg1
	}

*map_randNameInit
	sdim mapnamerd, 20, 2, 5
	mapnamerd(0, 0) = lang("ÇÕÇ∂Ç‹ÇËÇÃ", "Beginner's "), lang("à¿ëSÇ»", "Safe ")
	mapnamerd(0, 1) = lang("ñ`åØé“ÇÃ", "Adventurer's "), lang("éûÇﬂÇ´ÇÃ", "Exciting ")
	mapnamerd(0, 2) = lang("ñ¿Ç¢ÇÃ", "Dangerous "), lang("óEé“ÇÃ", "Servant's ")
	mapnamerd(0, 3) = lang("éÄÇÃ", "Fearful "), lang("à≈ÇÃ", "Shadow ")
	mapnamerd(0, 4) = lang("ïsãAÇÃ", "King's "), lang("ç¨ì◊ÇÃ", "Chaotic ")
	return

#defcfunc maplevel int maplevel_arg0
	if ( gArea  == AREA_HOME ) {
		if ( gLevel  != 1 ) {
			if ( gLevel  > 0 ) {
				return "B." + (gLevel  - 1)
			}
			else {
				return "L." + (gLevel  - 2) * (-1)
			}
		}
	}
	if ( areaType(gArea ) != MAP_TYPE_TOWN ) {
		if ( areaId(gArea ) == AREA_LESIMAS | areaId(gArea ) == AREA_RANDOM_DUNGEON | areaId(gArea ) == AREA_QUEST | (mType >= (20 /*!!!@[MAP_TYPE_DUNGEON @@@ MAP_TYPE_DUNGEON_MIN]@!!! */) & mType <= (23 /*!!!@[MAP_TYPE_DUNGEON_MAX @@@ MAP_TYPE_FORT]@!!! */)) == 1 ) {
			return "" + cnvrank(gLevel  - areaMinLevel(gArea ) + 1) + lang("ëw", "")
		}
	}
	return ""

#defcfunc mapfile int mapfile_mapid
	if ( areaId(mapfile_mapid) == AREA_VERNIS ) {
		return "vernis"
	}
	if ( areaId(mapfile_mapid) == AREA_PORT_KAPUL ) {
		return "kapul"
	}
	if ( areaId(mapfile_mapid) == AREA_YOWYN ) {
		return "yowyn"
	}
	if ( areaId(mapfile_mapid) == AREA_DERPHY ) {
		return "rogueden"
	}
	if ( areaId(mapfile_mapid) == AREA_PALMIA ) {
		return "palmia"
	}
	if ( areaId(mapfile_mapid) == AREA_NOYEL ) {
		return "noyel"
	}
	if ( areaId(mapfile_mapid) == AREA_LUMIEST ) {
		return "lumiest"
	}
	if ( areaId(mapfile_mapid) == MAX_AREA_OLD ) {
		return "nc_crippletown"
	}
	if ( areaId(mapfile_mapid) == 50 ) {
		return "st_serria"
	}
	if ( areaId(mapfile_mapid) == 51 ) {
		return "st_tormat"
	}
	if ( areaId(mapfile_mapid) == 52 ) {
		return "st_khios"
	}
	if ( areaId(mapfile_mapid) == 53 ) {
		return "st_carlia"
	}
	if ( areaId(mapfile_mapid) == 54 ) {
		return "st_trian"
	}
	return "vernis"

#defcfunc mapname int mapname_mapid, int mapname_arg2
	s = "", ""
	if ( areaId(mapname_mapid) == AREA_NORTH_TYRIS ) {
		s = lang("ÉmÅ[ÉXÉeÉBÉäÉX", "North Tyris")
	}
	if ( areaId(mapname_mapid) == AREA_VERNIS ) {
		s = lang("ÉîÉFÉãÉjÅ[ÉX", "Vernis"), lang("ÉîÉFÉãÉjÅ[ÉXÇÃäXÇ™å©Ç¶ÇÈÅBï”ÇËÇÕäàãCÇ…ñûÇøÇƒÇ¢ÇÈÅB", "You see Vernis. The mining town is full of liveliness.")
	}
	if ( areaId(mapname_mapid) == AREA_PORT_KAPUL ) {
		s = lang("É|Å[ÉgÅEÉJÉvÅ[Éã", "Port Kapul"), lang("É|Å[ÉgÅEÉJÉvÅ[ÉãÇ™å©Ç¶ÇÈÅBç`ÇÕëDÇ≈ìˆÇÌÇ¡ÇƒÇ¢ÇÈÅB", "You see Port Kapul. The port is crowded with merchants.")
	}
	if ( areaId(mapname_mapid) == AREA_YOWYN ) {
		s = lang("ÉàÉEÉBÉì", "Yowyn"), lang("ÉàÉEÉBÉìÇÃë∫Ç™å©Ç¶ÇÈÅBâ˘Ç©ÇµÇ¢ìyÇÃìıÇ¢Ç™Ç∑ÇÈÅB", "You see a small town, Yowyn. You remember fondly the smell of the soil.")
	}
	if ( areaId(mapname_mapid) == AREA_DERPHY ) {
		s = lang("É_ÉãÉtÉB", "Derphy"), lang("É_ÉãÉtÉBÇÃäXÇ™Ç†ÇÈÅBâΩÇ‚ÇÁäÎåØÇ»çÅÇËÇ™Ç∑ÇÈÅB", "You see the infamous rogue's den Derphy.")
	}
	if ( areaId(mapname_mapid) == AREA_PALMIA ) {
		s = lang("ÉpÉãÉ~ÉA", "Palmia"), lang("ÉpÉãÉ~ÉAÇÃìsÇ™Ç†ÇÈÅBìsÇÕçÇÇ¢ï«Ç…àÕÇÌÇÍÇƒÇ¢ÇÈÅB", "You see the great city of Palmia. Entire city is surrounded by tall wall.")
	}
	if ( areaId(mapname_mapid) == AREA_TOWER_OF_FIRE ) {
		s = lang("é‹îMÇÃìÉ", "the Tower of Fire")
	}
	if ( areaId(mapname_mapid) == AREA_CRYPT_OF_THE_DAMNED ) {
		s = lang("éÄé“ÇÃì¥åA", "the crypt of the damned")
	}
	if ( areaId(mapname_mapid) == AREA_ANCIENT_CASTLE ) {
		s = lang("å√èÈ", "the Ancient Castle")
	}
	if ( areaId(mapname_mapid) == AREA_HOME ) {
		s = lang("ÇÌÇ™â∆", "Your Home"), lang("Ç†Ç»ÇΩÇÃâ∆ÇæÅB", "It's your sweet home.")
	}
	if ( areaId(mapname_mapid) == AREA_LESIMAS ) {
		s = lang("ÉåÉVÉ}ÉX", "Lesimas"), lang("ÉåÉVÉ}ÉXÇÃì¥åAÇ™Ç†ÇÈÅBâ^ñΩÇÃå€ìÆÇä¥Ç∂ÇÈÅB", "You see the dungeon of Lesimas. The wheel of fortune starts to turn.")
	}
	if ( areaId(mapname_mapid) == AREA_VOID ) {
		s = lang("Ç∑Ç≠Ç¬", "the Void"), lang("Ç»ÇÒÇæÇ±ÇÃèÍèäÇÕÅcÅH", "What is this place?")
	}
	if ( areaId(mapname_mapid) == AREA_WILDERNESS ) {
		s = lang("ñÏäO", "Wilderness")
	}
	if ( areaId(mapname_mapid) == AREA_GRAVEYARD ) {
		s = lang("ÉãÉ~ÉGÉXÉgïÊèä", "the graveyard"), lang("ïÊèäÇ™å©Ç¶ÇÈÅBï”ÇËÇÕê√é‚Ç…ïÔÇ‹ÇÍÇƒÇ¢ÇÈÅc", "You see the graveyard of Lumiest. It's silent. Very silent.")
	}
	if ( areaId(mapname_mapid) == AREA_ARENA ) {
		s = lang("ì¨ãZèÍ", "Arena")
	}
	if ( areaId(mapname_mapid) == AREA_DRAGON_NEST ) {
		s = lang("ó≥åA", "the Dragon's Nest")
	}
	if ( areaId(mapname_mapid) == AREA_TRUCE_GROUND ) {
		s = lang("ê_ÅXÇÃãxêÌín", "the Truce Ground"), lang("éõâ@Ç™Ç†ÇÈÅBê_êπÇ»ïµàÕãCÇ™Ç∑ÇÈÅB", "You see old shrines. Sacred air surrounds the ground.")
	}
	if ( areaId(mapname_mapid) == AREA_CYBER_DOME ) {
		s = lang("ÉAÉNÉäÅEÉeÉIÉâ", "Cyber Dome"), lang("âΩÇ‚ÇÁäÔñ≠Ç»åöï®Ç™Ç†ÇÈÅB", "You see a very strange building.")
	}
	if ( areaId(mapname_mapid) == AREA_BEAST_FORT ) {
		s = lang("ç¨ì◊ÇÃèÈÅsèbÅt", "Fort of Chaos <Beast>"), lang("ïsãCñ°Ç»èÈÇ™Ç†ÇÈÅBê‚ëŒÇ…ì¸Ç¡ÇƒÇÕÇ¢ÇØÇ»Ç¢ó\ä¥Ç™Ç∑ÇÈÅB(äÎåØìxÇÕ666äKëäìñ)", "You see an unearthly fort. Your inner voice warns you to not go there. (Approximate danger level: 666) ")
	}
	if ( areaId(mapname_mapid) == AREA_MACHINE_FORT ) {
		s = lang("ç¨ì◊ÇÃèÈÅsã@çbÅt", "Fort of Chaos <Machine>"), lang("ïsãCñ°Ç»èÈÇ™Ç†ÇÈÅBê‚ëŒÇ…ì¸Ç¡ÇƒÇÕÇ¢ÇØÇ»Ç¢ó\ä¥Ç™Ç∑ÇÈÅB(äÎåØìxÇÕ666äKëäìñ)", "You see an unearthly fort. Your inner voice warns you to not go there. (Approximate danger level: 666) ")
	}
	if ( areaId(mapname_mapid) == AREA_COLLAPSED_FORT ) {
		s = lang("ç¨ì◊ÇÃèÈÅsäÔå`Åt", "Fort of Chaos <Collapsed>"), lang("ïsãCñ°Ç»èÈÇ™Ç†ÇÈÅBê‚ëŒÇ…ì¸Ç¡ÇƒÇÕÇ¢ÇØÇ»Ç¢ó\ä¥Ç™Ç∑ÇÈÅB(äÎåØìxÇÕ666äKëäìñ)", "You see an unearthly fort. Your inner voice warns you to not go there. (Approximate danger level: 666) ")
	}
	if ( areaId(mapname_mapid) == AREA_PET_ARENA ) {
		if ( arenaop == 2 ) {
			s = lang("ÉvÉ`äiì¨èÍ", "Putit Arena")
		}
		else {
			s = lang("ÉRÉçÉVÉAÉÄ", "Pet Arena")
		}
	}
	if ( areaId(mapname_mapid) == AREA_MUSEUM ) {
		s = lang("îéï®äŸ", "My Museum")
	}
	if ( areaId(mapname_mapid) == AREA_SHOP ) {
		s = lang("ìX", "Shop")
	}
	if ( areaId(mapname_mapid) == AREA_CROP ) {
		s = lang("î®", "Crop")
	}
	if ( areaId(mapname_mapid) == AREA_STORAGE_HOUSE ) {
		s = lang("ëqå…", "Storage House")
	}
	if ( areaId(mapname_mapid) == AREA_DUNGEON ) {
		s = lang("É_ÉìÉWÉáÉì", "dungeon")
	}
	if ( areaId(mapname_mapid) == AREA_RANCH ) {
		s = lang("ñqèÍ", "Ranch")
	}
	if ( areaId(mapname_mapid) == AREA_SHELTER ) {
		s = lang("ÉVÉFÉãÉ^Å[", "Shelter")
	}
	if ( areaId(mapname_mapid) == AREA_EMBASSY ) {
		s = lang("ÉpÉãÉ~ÉAëÂégäŸ", "the Embassy")
	}
	if ( areaId(mapname_mapid) == AREA_TEST_GROUND ) {
		s = lang("é¿å±èÍ", "Test Ground")
	}
	if ( areaId(mapname_mapid) == AREA_NOYEL ) {
		s = lang("ÉmÉCÉGÉã", "Noyel"), lang("ÉmÉCÉGÉãÇÃë∫Ç™Ç†ÇÈÅBéqãüÇΩÇøÇÃèŒÇ¢ê∫Ç™ï∑Ç±Ç¶ÇÈÅB", "You see Noyel. The laughters of children travel from the playground.")
	}
	if ( areaId(mapname_mapid) == AREA_MIROK_WORKSHOP ) {
		s = lang("çHñ[É~ÉâÉãÅEÉKÉçÉN", "Miral and Garok's Workshop")
	}
	if ( areaId(mapname_mapid) == AREA_SHOW_HOUSE ) {
		s = lang("ÉnÉEÉXÉhÅ[ÉÄ", "Show House")
	}
	if ( areaId(mapname_mapid) == AREA_LARNA ) {
		s = lang("ÉâÅ[Éi", "Larna")
	}
	if ( areaId(mapname_mapid) == AREA_MOUNTAIN_PASS ) {
		s = lang("éRìπ", "the Mountain Pass")
	}
	if ( areaId(mapname_mapid) == AREA_PUPPY_CAVE ) {
		s = lang("éqå¢ÇÃì¥åA", "the Puppy Cave")
	}
	if ( areaId(mapname_mapid) == AREA_YEEK_NEST ) {
		s = lang("ÉCÅ[ÉNÇÃì¥åA", "the Yeek's Nest")
	}
	if ( areaId(mapname_mapid) == AREA_SISTER_MANSION ) {
		s = lang("ñÖÇÃäŸ", "the mansion of younger sister")
	}
	if ( areaId(mapname_mapid) == AREA_LUMIEST ) {
		s = lang("ÉãÉ~ÉGÉXÉg", "Lumiest"), lang("ÉãÉ~ÉGÉXÉgÇÃìsÇ™å©Ç¶ÇÈÅBêÖÇÃÇπÇπÇÁÇ¨Ç™íÆÇ±Ç¶ÇÈÅB", "You see Lumiest. Murmuring of water pleasantly echoes.")
	}
	if ( areaId(mapname_mapid) == AREA_PYRAMID ) {
		s = lang("ÉsÉâÉ~ÉbÉh", "the Pyramid")
	}
	if ( areaId(mapname_mapid) == AREA_MINOTAUR_NEST ) {
		s = lang("–…¿≥€ΩÇÃëÉ", "the Minotaur's Nest")
	}
	if ( areaId(mapname_mapid) == AREA_JAIL ) {
		s = lang("òSçñ", "Jail"), lang("é˚óeèäÇ™Ç†ÇÈÅBì¸ÇËå˚ÇÕå≈Ç≠ï¬Ç¥Ç≥ÇÍÇƒÇ¢ÇÈÅB", "You see a prison. The entrance is strictly closed.")
	}
	if ( areaId(mapname_mapid) == AREA_NT_SOUTH_BORDER ) {
		s = lang("ÉmÅ[ÉXÉeÉBÉäÉXìÏä÷èä", "North Tyris south border")
	}
	if ( areaId(mapname_mapid) == AREA_SOUTH_TYRIS ) {
		s = lang("ÉTÉEÉXÉeÉBÉäÉX", "South Tyris")
	}
	if ( areaId(mapname_mapid) == AREA_ST_NORTH_BORDER ) {
		s = lang("ÉTÉEÉXÉeÉBÉäÉXñkä÷èä", "South Tyris north border")
	}
	if ( areaId(mapname_mapid) == AREA_SMOKE_AND_PIPE ) {
		s = lang("âåÇ∆ÉpÉCÉví‡", "The smoke and pipe")
	}
	if ( areaId(mapname_mapid) == AREA_TEST_WORLD ) {
		s = lang("ÉtÉFÉAÉäÉ]Å[Ég", "Fairy island")
	}
	if ( areaId(mapname_mapid) == AREA_TW_NORTH_BORDER ) {
		s = lang("ÉtÉFÉAÉäÉ]Å[Égä÷èä", "Fairy island border")
	}
	if ( areaId(mapname_mapid) == 49 ) {
		s = lang("ÉtÉFÉAÉäÉ]Å[ÉgÉåÅ[ÉXèÍ", "Fairy island race track")
	}
	if ( areaId(mapname_mapid) == 50 ) {
		s = lang("É|Å[ÉgÅEÉZÉäÉA", "Port Serria"), lang("É|Å[ÉgÅEÉZÉäÉAÇ™Ç†ÇÈÅBí™ïóÇ™çÅÇËÅAëDàıÇΩÇøÇÃê∫Ç™ï∑Ç±Ç¶ÇÈÅB", "You see Port Serria.")
	}
	if ( areaId(mapname_mapid) == 51 ) {
		s = lang("ÉgÅ[É}ÉbÉg", "Tormat"), lang("ÉgÅ[É}ÉbÉgÇ™Ç†ÇÈÅB", "You see Tormat.")
	}
	if ( areaId(mapname_mapid) == 52 ) {
		s = lang("ÉLÉIÉX", "Khios"), lang("ÉLÉIÉXÇ™Ç†ÇÈÅB", "You see Khios.")
	}
	if ( areaId(mapname_mapid) == 53 ) {
		s = lang("ÉJÅ[ÉäÉA", "Carlia"), lang("ÉJÅ[ÉäÉAÇ™Ç†ÇÈÅB", "You see Carlia.")
	}
	if ( areaId(mapname_mapid) == 54 ) {
		s = lang("ÉgÉâÉCÉAÉì", "Trian"), lang("ÉgÉâÉCÉAÉìÇ™Ç†ÇÈÅB", "You see Trian.")
	}
	if ( areaId(mapname_mapid) == 57 ) {
		s = lang("å√ë„ÇÃà‚ê’", "Ancient ruins")
	}
	if ( areaId(mapname_mapid) == 58 ) {
		s = lang("ä¸ÇƒÇÁÇÍÇΩî_ë∫ín", "Abandoned rural area")
	}
	if ( areaId(mapname_mapid) == 59 ) {
		s = lang("ç¨ì◊ÇÃèÈÅsódÅt", "Fort of Chaos <Fairy>"), lang("ïsãCñ°Ç»èÈÇ™Ç†ÇÈÅBê‚ëŒÇ…ì¸Ç¡ÇƒÇÕÇ¢ÇØÇ»Ç¢ó\ä¥Ç™Ç∑ÇÈÅB(äÎåØìxÇÕ666äKëäìñ)", "You see an unearthly fort. Your inner voice warns you to not go there. (Approximate danger level: 666) ")
	}
	if ( areaId(mapname_mapid) == 60 ) {
		s = lang("ïœàŸéÌÇÃì¥åA", "Mutant cave"), lang("ïœàŸéÌÇÃì¥åAÇ™Ç†ÇÈÅBâˆï®ÇΩÇøÇÃóYã©Ç—Ç™ï∑Ç±Ç¶ÇÈÅB", "You see the dungeon of Mutant cave.")
	}
	if ( areaId(mapname_mapid) == 61 ) {
		s = lang("ÉVÅ[ÉNÉåÉbÉgÉ]Å[Éì", "Secret zone")
	}
	if ( areaId(mapname_mapid) == 62 ) {
		s = lang("ïXåA", "Ice Cave")
	}
	if ( areaId(mapname_mapid) == 63 ) {
		s = lang("ñYÇÍÇÁÇÍÇΩé¿å±èÍ", "The forgotten laboratory")
	}
	if ( areaId(mapname_mapid) == AREA_QUEST ) {
		if ( gQuest == QUEST_TYPE_HUNT ) {
			s = lang("äXãﬂï”", "The outskirts")
		}
		if ( gQuest == QUEST_TYPE_HUNTEX | gQuest == QUEST_TYPE_CONQUER ) {
			s = lang("ésäXín", "Urban area")
		}
	}
	if ( areaId(mapname_mapid) == MAX_AREA_OLD ) {
		s = lang("ÉNÉäÉbÉvÉãÉ^ÉEÉì", "Town of Void")
	}
	if ( areaId(mapname_mapid) == 210 ) {
		s = lang("Ç»ÇÁÇ≠", "The Abyss"), lang("ínçñÇ÷ÇÊÇ§Ç±ÇªÅI", "Welcome to hell!")
	}
	if ( areaId(mapname_mapid) == AREA_RANDOM_DUNGEON ) {
		p(60) = 1
		if ( oabit(11, mapname_mapid) ) {
			if ( getfactionvalue(mapname_mapid - 450 + 245, "race") != "" ) {
				dbidn = refstr
				dbmode = DBMODE_REF
				gosub *cm_race
				s = lang(racename + "ÇÃ", racename + "'s ")
				p(60) = 0
			}
		}
		else {
			if ( oabit(12, mapname_mapid) ) {
				s = lang("ÉvÉ`ÇÃ", "the Putit's ")
				p(60) = 0
			}
		}
		if ( p(60) ) {
			s = mapnamerd(areaName(mapname_mapid), limitmax(areaMinLevel(mapname_mapid) / 5, length2(mapnamerd) - 1))
		}
		repeat 32
			if ( cnt == 11 | cnt == 12 ) {
				continue
			}
			if ( oabit(cnt, mapname_mapid) ) {
				s += oadatastr(cnt) + lang("ÇÃ", " ")
			}
		loop
		if ( oabit(12, mapname_mapid) ) {
			s += lang("ëÉ", "Nest")
		}
		else {
			if ( areaType(mapname_mapid) == (20 /*!!!@[MAP_TYPE_DUNGEON @@@ MAP_TYPE_DUNGEON_MIN]@!!! */) ) {
				s += lang("ì¥åA", "Dungeon")
			}
			if ( areaType(mapname_mapid) == MAP_TYPE_FOREST ) {
				s += lang("êX", "Forest")
			}
			if ( areaType(mapname_mapid) == MAP_TYPE_TOWER ) {
				s += lang("ìÉ", "Tower")
			}
			if ( areaType(mapname_mapid) == (23 /*!!!@[MAP_TYPE_DUNGEON_MAX @@@ MAP_TYPE_FORT]@!!! */) ) {
				s += lang("ç‘", "Fort")
			}
		}
	}
	if ( mapname_arg2 == 1 ) {
		if ( areaId(mapname_mapid) == AREA_SISTER_MANSION ) {
			return ""
		}
		if ( s(1) != "" ) {
			return s(1)
		}
		if ( areaType(mapname_mapid) >= (20 /*!!!@[MAP_TYPE_DUNGEON @@@ MAP_TYPE_DUNGEON_MIN]@!!! */) ) {
			return lang(s + "Ç÷ÇÃì¸ÇËå˚Ç™Ç†ÇÈ(ì¸ÇËå˚ÇÃäÎåØìxÇÕ" + areaMinLevel(mapname_mapid) + "äKëäìñ)ÅB", "You see an entrance leading to " + s + ".(Approximate danger level: " + areaMinLevel(mapname_mapid) + ") ")
		}
		return lang(s + "Ç™Ç†ÇÈÅB", "You see " + s + ".")
	}
	return s

#defcfunc txtbuilding int txtbuilding_arg1, int txtbuilding_arg2
	locvar_txtbuilding_p = bddata(0, txtbuilding_arg1, txtbuilding_arg2)
	locvar_txtbuilding_s = lang(bdrefn(locvar_txtbuilding_p) + "Ç™Ç†ÇÈÅB", "You see " + bdrefn(locvar_txtbuilding_p) + ".")
	return locvar_txtbuilding_s

#defcfunc txtskillchange int txtskillchange_skillid, int txtskillchange_negative, int txtskillchange_charid
	if ( txtskillchange_charid < MAX_CHARA_FOLLOWER ) {
		if ( txtskillchange_negative == 0 ) {
			throwsstpevent "SkillUp", txtskillchange_charid, skillname(txtskillchange_skillid), sorgex(txtskillchange_skillid, txtskillchange_charid)
		}
		else {
			throwsstpevent "SkillDown", txtskillchange_charid, skillname(txtskillchange_skillid), sorgex(txtskillchange_skillid, txtskillchange_charid)
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_LIFE ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "ÇÕê∂ñΩóÕÇÃè„è∏Çä¥Ç∂ÇΩÅB", name(txtskillchange_charid) + your(txtskillchange_charid) + " life force increases.")
		}
		else {
			return lang(name(txtskillchange_charid) + "ÇÕê∂ñΩóÕÇÃêäÇ¶Çä¥Ç∂ÇΩÅB", name(txtskillchange_charid) + your(txtskillchange_charid) + " life force decreases.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_MANA ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "ÇÕÉ}ÉiÇÃå¸è„Çä¥Ç∂ÇΩÅB", name(txtskillchange_charid) + your(txtskillchange_charid) + " mana increases.")
		}
		else {
			return lang(name(txtskillchange_charid) + "ÇÕÉ}ÉiÇÃêäÇ¶Çä¥Ç∂ÇΩÅB", name(txtskillchange_charid) + your(txtskillchange_charid) + " mana decreases.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_STR ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "ÇÕÇÊÇËã≠Ç≠Ç»Ç¡ÇΩÅB", name(txtskillchange_charid) + your(txtskillchange_charid) + " muscles feel stronger.")
		}
		else {
			return lang(name(txtskillchange_charid) + "ÇÕè≠ÇµÊ“ì˜Ç™ëùÇ¶ÇΩÇÊÇ§Ç»ãCÇ™ÇµÇΩÅB", name(txtskillchange_charid) + your(txtskillchange_charid) + " muscles soften.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_CON ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "ÇÕâ‰ñùÇ∑ÇÈÇ±Ç∆ÇÃâıä¥ÇímÇ¡ÇΩÅB", name(txtskillchange_charid) + " begin" + _s(txtskillchange_charid) + " to feel good when being hit hard.")
		}
		else {
			return lang(name(txtskillchange_charid) + "ÇÕâ‰ñùÇ™Ç≈Ç´Ç»Ç≠Ç»Ç¡ÇΩÅB", name(txtskillchange_charid) + " lose" + _s(txtskillchange_charid) + " patience.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_DEX ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "ÇÕäÌópÇ…Ç»Ç¡ÇΩÅB", name(txtskillchange_charid) + " become" + _s(txtskillchange_charid) + " dexterous.")
		}
		else {
			return lang(name(txtskillchange_charid) + "ÇÕïsäÌópÇ…Ç»Ç¡ÇΩÅB", name(txtskillchange_charid) + " become" + _s(txtskillchange_charid) + " clumsy.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_PER ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "ÇÕê¢äEÇÇÊÇËêgãﬂÇ…ä¥Ç∂ÇÈÇÊÇ§Ç…Ç»Ç¡ÇΩÅB", name(txtskillchange_charid) + " feel" + _s(txtskillchange_charid) + " more in touch with the world.")
		}
		else {
			return lang(name(txtskillchange_charid) + "ÇÕä¥äoÇÃÇ∏ÇÍÇä¥Ç∂ÇΩÅB", name(txtskillchange_charid) + " " + is(txtskillchange_charid) + " getting out of touch with the world")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_LER ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "ÇÕã}Ç…êFÅXÇ»Ç±Ç∆ÇäwÇ—ÇΩÇ≠Ç»Ç¡ÇΩÅB", name(txtskillchange_charid) + " feel" + _s(txtskillchange_charid) + " studious.")
		}
		else {
			return lang(name(txtskillchange_charid) + "ÇÃäwèKà”ó~Ç™í·â∫ÇµÇΩÅB", name(txtskillchange_charid) + " lose" + _s(txtskillchange_charid) + " curiosity.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_WIL ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "ÇÃà”évÇÕå≈Ç≠Ç»Ç¡ÇΩÅB", name(txtskillchange_charid) + your(txtskillchange_charid) + " will hardens.")
		}
		else {
			return lang(name(txtskillchange_charid) + "ÇÕâΩÇ≈Ç‡Ç∑ÇÆí˙ÇﬂÇÈÅB", name(txtskillchange_charid) + your(txtskillchange_charid) + " will softens.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_MAG ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "ÇÕñÇóÕÇÃè„è∏Çä¥Ç∂ÇΩÅB", name(txtskillchange_charid) + your(txtskillchange_charid) + " magic improves.")
		}
		else {
			return lang(name(txtskillchange_charid) + "ÇÕñÇóÕÇÃêäÇ¶Çä¥Ç∂ÇΩÅB", name(txtskillchange_charid) + your(txtskillchange_charid) + " magic degrades.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_CHA ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "ÇÕé¸àÕÇÃéãê¸ÇêSínÇÊÇ≠ä¥Ç∂ÇÈÅB", name(txtskillchange_charid) + " enjoy" + _s(txtskillchange_charid) + " showing off " + his(txtskillchange_charid) + " body.")
		}
		else {
			return lang(name(txtskillchange_charid) + "ÇÕã}Ç…êlëOÇ…èoÇÈÇÃÇ™åôÇ…Ç»Ç¡ÇΩÅB", name(txtskillchange_charid) + " start" + _s(txtskillchange_charid) + " to avoid eyes of people.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_SPD ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "ÇÕé¸ÇËÇÃìÆÇ´Ç™íxÇ≠å©Ç¶ÇÈÇÊÇ§Ç…Ç»Ç¡ÇΩÅB", name(txtskillchange_charid) + your(txtskillchange_charid) + " speed increases.")
		}
		else {
			return lang(name(txtskillchange_charid) + "ÇÕíxÇ≠Ç»Ç¡ÇΩÅB", name(txtskillchange_charid) + your(txtskillchange_charid) + " speed decreases.")
		}
	}
	if ( txtskillchange_skillid == SKILL_ATTR_LUC ) {
		if ( txtskillchange_negative == 0 ) {
			return lang(name(txtskillchange_charid) + "ÇÕçKâ^Ç…Ç»Ç¡ÇΩÅB", name(txtskillchange_charid) + " become" + _s(txtskillchange_charid) + " lucky.")
		}
		else {
			return lang(name(txtskillchange_charid) + "ÇÕïsçKÇ…Ç»Ç¡ÇΩÅB", name(txtskillchange_charid) + " become" + _s(txtskillchange_charid) + " unlucky.")
		}
	}
	if ( txtskillchange_negative == 0 ) {
		return lang(name(txtskillchange_charid) + "ÇÕ" + skillnameref(txtskillchange_skillid, txtskillchange_charid) + "ÇÃãZèpÇÃå¸è„Çä¥Ç∂ÇΩÅB", name(txtskillchange_charid) + your(txtskillchange_charid) + " " + skillnameref(txtskillchange_skillid, txtskillchange_charid) + " skill increases.")
	}
	else {
		return lang(name(txtskillchange_charid) + "ÇÕ" + skillnameref(txtskillchange_skillid, txtskillchange_charid) + "ÇÃãZèpÇÃêäÇ¶Çä¥Ç∂ÇΩÅB", name(txtskillchange_charid) + your(txtskillchange_charid) + " " + skillnameref(txtskillchange_skillid, txtskillchange_charid) + " skill falls off.")
	}
	goto *item_foodInit

*item_foodInit
	dim picfood, 10, 9
	picfood(0, FOOD_TYPE_MEAT) = xy2pic(32, 6), xy2pic(32, 6), xy2pic(32, 6), xy2pic(30, 5), xy2pic(29, 6), xy2pic(2, 5), xy2pic(2, 5), xy2pic(29, 5), xy2pic(31, 6), xy2pic(29, 6)
	picfood(0, FOOD_TYPE_VEGETABLE) = xy2pic(32, 6), xy2pic(32, 6), xy2pic(32, 6), xy2pic(31, 6), xy2pic(12, 10), xy2pic(29, 5), xy2pic(31, 6), xy2pic(12, 10), xy2pic(31, 6), xy2pic(29, 5)
	picfood(0, FOOD_TYPE_FRUIT) = xy2pic(32, 6), xy2pic(32, 6), xy2pic(32, 6), xy2pic(31, 6), xy2pic(16, 10), xy2pic(16, 10), xy2pic(15, 10), xy2pic(15, 10), xy2pic(17, 10), xy2pic(16, 10)
	picfood(0, FOOD_TYPE_SWEET) = xy2pic(32, 6), xy2pic(32, 6), xy2pic(32, 6), xy2pic(9, 3), xy2pic(16, 10), xy2pic(11, 3), xy2pic(16, 10), xy2pic(17, 10), xy2pic(17, 10), xy2pic(17, 10)
	picfood(0, FOOD_TYPE_PASTA) = xy2pic(32, 6), xy2pic(32, 6), xy2pic(31, 6), xy2pic(13, 10), xy2pic(14, 10), xy2pic(14, 10), xy2pic(13, 10), xy2pic(13, 10), xy2pic(14, 10), xy2pic(13, 10)
	picfood(0, FOOD_TYPE_FISH) = xy2pic(32, 6), xy2pic(32, 6), xy2pic(32, 6), xy2pic(30, 6), xy2pic(12, 10), xy2pic(12, 10), xy2pic(30, 6), xy2pic(11, 10), xy2pic(30, 6), xy2pic(30, 6)
	picfood(0, FOOD_TYPE_BREAD) = xy2pic(32, 6), xy2pic(32, 6), xy2pic(11, 3), xy2pic(9, 3), xy2pic(11, 3), xy2pic(13, 3), xy2pic(15, 3), xy2pic(14, 3), xy2pic(16, 3), xy2pic(12, 3)
	picfood(0, FOOD_TYPE_EGG) = xy2pic(32, 6), xy2pic(32, 6), xy2pic(32, 6), xy2pic(25, 5), xy2pic(31, 6), xy2pic(25, 5), xy2pic(12, 10), xy2pic(3, 5), xy2pic(17, 10), xy2pic(29, 5)
	picfood(0, MAX_FOOD_TYPE) = xy2pic(32, 6), xy2pic(7, 21), xy2pic(8, 21), xy2pic(9, 21), xy2pic(10, 21), xy2pic(11, 21), xy2pic(12, 21), xy2pic(13, 21), xy2pic(14, 21), xy2pic(15, 21)
	if ( cfg_useffhp ) {
		picfood(0, 10) = xy2pic(5, 5), xy2pic(17, 21), xy2pic(18, 21), xy2pic(18, 21), xy2pic(18, 21), xy2pic(18, 21), xy2pic(18, 21), xy2pic(18, 21), xy2pic(18, 21), xy2pic(18, 21)
	}
	else {
		picfood(0, 10) = xy2pic(5, 5), xy2pic(5, 5), xy2pic(24, 10), xy2pic(24, 10), xy2pic(24, 10), xy2pic(24, 10), xy2pic(24, 10), xy2pic(24, 10), xy2pic(24, 10), xy2pic(24, 10)
	}
	return

#defcfunc _yoro int _yoro_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÊÇÎÇµÇ≠Ç®äËÇ¢ÇµÇ‹Ç∑", "Ç«Ç§ÇºÅAÇÊÇÎÇµÇ≠Ç≈Ç∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_yoro_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÊÇÎÇµÇ≠Ç®äËÇ¢ÇµÇ‹Ç∑ÇÌ", "ÇÊÇÎÇµÇ≠Ç≈Ç∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_yoro_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÊÇÎÇµÇ≠óäÇﬁÇ∫", "ÇÊÇÎÇµÇ≠Ç»"
			return locvar__yoro__tone(rnd(2)) + _mark(_yoro_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÊÇÎÇµÇ≠ÇÀ", "ÇÊÇÎÇµÇ≠Ç»"
			return locvar__yoro__tone(rnd(2)) + _mark(_yoro_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÊÇÎÇµÇ≠ÇÀ", "ÇÊÇÎÇµÇ≠Ç®äËÇ¢Ç∑ÇÈÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_yoro_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÊÇÎÇµÇ≠ÇÀÇ¡", "ÇÊÇÎÇµÇ≠Å`"
			return locvar__yoro__tone(rnd(2)) + _mark(_yoro_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÊÇÎÇµÇ≠Åc", "ç°å„Ç∆Ç‡ÅAÇÊÇÎÇµÇ≠Åc"
			return locvar__yoro__tone(rnd(2)) + _mark(_yoro_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÊÇÎÇµÇ≠ÇÀÅc", "ÇÊÇÎÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_yoro_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÊÇÎÇµÇ≠óäÇ‡Ç§", "ÇÊÇÎÇµÇ≠óäÇﬁÇºÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_yoro_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÊÇÎÇµÇ≠óäÇﬁÇºÇÊ", "ÇÊÇÎÇµÇ≠óäÇﬁÇºÇ»"
			return locvar__yoro__tone(rnd(2)) + _mark(_yoro_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÊÇµÇ»Ç…", "ÇÊÇÎÇµÇ≠óäÇﬁÇ≈Ç≤Ç¥ÇÈ"
			return locvar__yoro__tone(rnd(2)) + _mark(_yoro_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÊÇÎÇµÇ≠Ç≈Ç≤Ç¥ÇËÇ‹Ç∑ÇÈ", "Ç«Ç§ÇºÇÊÇµÇ»Ç…"
			return locvar__yoro__tone(rnd(2)) + _mark(_yoro_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇÊÇÎÇµÇ≠ÉbÉX" + _mark(_yoro_arg1)
		}
		else {
			return "ÇÊÇÎÇµÇ≠Ç…Ç·ÇÃ" + _mark(_yoro_arg1)
		}
	}
	return ""

#defcfunc _dozo int _dozo_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÕÇ¢ÅAÇ«Ç§Çº", "Ç®ë“ÇøÇ«Ç§Ç≥Ç‹Ç≈Ç∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_dozo_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÕÇ¢ÅAÇ«Ç§Çº", "íçï∂ÇÃïiÇ≈Ç∑ÇÌ"
			return locvar__yoro__tone(rnd(2)) + _mark(_dozo_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇŸÇÁÇÊ", "ÇŸÇÍ"
			return locvar__yoro__tone(rnd(2)) + _mark(_dozo_arg1)
		}
		else {
			locvar__yoro__tone = "ÇŸÇÁ", "ë“ÇΩÇπÇΩÇÀ"
			return locvar__yoro__tone(rnd(2)) + _mark(_dozo_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÕÇ¢ÅAÇ®ë“Çø", "Ç≥Ç†ÅAÇ«Ç§Çº"
			return locvar__yoro__tone(rnd(2)) + _mark(_dozo_arg1)
		}
		else {
			locvar__yoro__tone = "Ç≥Ç†ÅAÇ«Ç§Çº", "Ç®ë“ÇøÇ«Ç§Ç≥Ç‹"
			return locvar__yoro__tone(rnd(2)) + _mark(_dozo_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇŸÇÁÅc", "ë“ÇΩÇπÇΩÇ»Åc"
			return locvar__yoro__tone(rnd(2)) + _mark(_dozo_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÕÇ¢Åc", "Ç«Ç§ÇºÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_dozo_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇŸÇ§ÇÍ", "ÇŸÇÍÅAéÛÇØéÊÇËÇΩÇ‹Ç¶"
			return locvar__yoro__tone(rnd(2)) + _mark(_dozo_arg1)
		}
		else {
			locvar__yoro__tone = "ÇŸÇÍÅAéÛÇØéÊÇÈÇ™ó«Ç¢", "ÇŸÇÍÅAë“ÇΩÇπÇΩÇÃÇ§"
			return locvar__yoro__tone(rnd(2)) + _mark(_dozo_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç®ë“ÇΩÇπê\ÇµÇΩ", "ë“ÇΩÇπÇΩÇ≈Ç≤Ç¥ÇÈ"
			return locvar__yoro__tone(rnd(2)) + _mark(_dozo_arg1)
		}
		else {
			locvar__yoro__tone = "Ç®ë“ÇΩÇπívÇµÇ‹ÇµÇΩ", "Ç≥Ç≥ÅAÇ«Ç§Çº"
			return locvar__yoro__tone(rnd(2)) + _mark(_dozo_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç®ë“ÇΩÇπÉbÉX" + _mark(_dozo_arg1)
		}
		else {
			return "Ç®ë“ÇΩÇπÇ…Ç·ÇÒ" + _mark(_dozo_arg1)
		}
	}
	return ""

#defcfunc _thanks int _thanks_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ä¥é”ÇµÇ‹Ç∑", "Ç†ÇËÇ™Ç∆Ç§Ç≤Ç¥Ç¢Ç‹Ç∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_thanks_arg1)
		}
		else {
			locvar__yoro__tone = "ä¥é”ÇµÇ‹Ç∑", "Ç†ÇËÇ™Ç∆Ç§Ç≤Ç¥Ç¢Ç‹Ç∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_thanks_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç†ÇËÇ™Ç∆ÇÊ", "Ç†ÇËÇ™ÇΩÇ¢"
			return locvar__yoro__tone(rnd(2)) + _mark(_thanks_arg1)
		}
		else {
			locvar__yoro__tone = "óÁÇåæÇ§ÇÊ", "Ç†ÇËÇ™ÇΩÇ¢ÇÀ"
			return locvar__yoro__tone(rnd(2)) + _mark(_thanks_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç†ÇËÇ™Ç∆Ç§", "ä¥é”Ç∑ÇÈÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_thanks_arg1)
		}
		else {
			locvar__yoro__tone = "Ç†ÇËÇ™Ç∆Ç§Å`", "ä¥é”Ç∑ÇÈÇÌ"
			return locvar__yoro__tone(rnd(2)) + _mark(_thanks_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "óÁÇåæÇ§Åc", "ä¥é”Ç∑ÇÈÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_thanks_arg1)
		}
		else {
			locvar__yoro__tone = "Ç†ÇËÇ™Ç∆Åc", "óÁÇåæÇ§ÇÌÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_thanks_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "óÁÇê\Ç∑Çº", "ä¥é”ÇµÇƒÇ¬Ç©ÇÌÇ∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_thanks_arg1)
		}
		else {
			locvar__yoro__tone = "Ç≠ÇÈÇµÇ„Ç§Ç»Ç¢", "óÁÇÇ¢Ç¡ÇƒÇ¬Ç©ÇÌÇ∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_thanks_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç©ÇΩÇ∂ÇØÇ»Ç¢", "â∂Ç…íÖÇÈ"
			return locvar__yoro__tone(rnd(2)) + _mark(_thanks_arg1)
		}
		else {
			locvar__yoro__tone = "Ç†ÇËÇ™ÇΩÇ‚", "Ç®óÁê\Çµè„Ç∞Ç‹Ç∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_thanks_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "ÉAÉUÅ[ÉbÉX" + _mark(_thanks_arg1)
		}
		else {
			return "Ç…Ç·ÇËÅ[ÇÒ" + _mark(_thanks_arg1)
		}
	}
	return ""

#defcfunc _rob int _rob_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "à´Ç¢Ç±Ç∆ÇÕåæÇÌÇ»Ç¢ÅBÇ®Ç‚ÇﬂÇ»Ç≥Ç¢", "é~ÇﬂÇƒÇ≠ÇæÇ≥Ç¢ÅBÇ´Ç¡Ç∆å„â˜ÇµÇ‹Ç∑ÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_rob_arg1)
		}
		else {
			locvar__yoro__tone = "é~ÇﬂÇƒÇ≠ÇæÇ≥Ç¢Ç‹Çπ", "Ç±Ç§Ç¢Ç§éûÇÃÇΩÇﬂÇ…ÅAóbï∫Ç…ã‡ÇÇ©ÇØÇƒÇ¢ÇÈÇÃÇ≈Ç∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_rob_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç»ÇÒÇæÅAãMólëØÇæÇ¡ÇΩÇÃÇ©", "îné≠Ç»ìzÇæÅBå„Ç…Ç»Ç¡Çƒé”Ç¡ÇƒÇ‡íxÇ¢Çº"
			return locvar__yoro__tone(rnd(2)) + _mark(_rob_arg1)
		}
		else {
			locvar__yoro__tone = "Ç”ÇÒÅAï‘ÇËì¢ÇøÇ…ÇµÇƒÇ≠ÇÍÇÈÇÊ", "Ç≤ÇÎÇ¬Ç´ïóèÓÇ…âΩÇ™Ç≈Ç´ÇÈ"
			return locvar__yoro__tone(rnd(2)) + _mark(_rob_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç®Ç¢ÅAóbï∫Ç≥ÇÒÇΩÇøÅAÇ±ÇÃÇ≤ÇÎÇ¬Ç´Çí«Ç¢ï•Ç¡ÇƒÇ≠ÇÍ", "îné≠Ç»ê^éóÇÇ∑ÇÈÇ»ÅBÇ±Ç¡ÇøÇ…ÇÕã¸ã≠ÇÃóbï∫Ç™Ç¢ÇÈÇÒÇæÇº"
			return locvar__yoro__tone(rnd(2)) + _mark(_rob_arg1)
		}
		else {
			locvar__yoro__tone = "Ç‚ÇﬂÇƒ", "óbï∫Ç≥ÇÒÇΩÇøÅ`èoî‘Ç≈Ç∑ÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_rob_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ä√Ç≠å©ÇÁÇÍÇΩÇ‡ÇÃÇæÅc", "Ç±ÇÃåÏâqÇÃêîÇ™å©Ç¶Ç»Ç¢ÇÃÇ©Åc"
			return locvar__yoro__tone(rnd(2)) + _mark(_rob_arg1)
		}
		else {
			locvar__yoro__tone = "Ç®Ç‚ÇﬂÅc", "ãÇ©Ç»ééÇ›ÇÊÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_rob_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç»ÇÒÇΩÇÈñ≥óÁé“Ç©", "ÇŸÇŸÇŸÅAÇ±Ç‚Ç¬Çﬂ"
			return locvar__yoro__tone(rnd(2)) + _mark(_rob_arg1)
		}
		else {
			locvar__yoro__tone = "â∫ÊÀÇÃé“Ç«Ç‡ÇÃï™ç€Ç≈", "ÇŸÇŸÇŸÅAéEÇµÇƒÇ†Ç∞Ç»Ç≥Ç¢"
			return locvar__yoro__tone(rnd(2)) + _mark(_rob_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			return "âΩÇÇ∑ÇÈÇ≈Ç≤Ç¥ÇÈÇ©" + _mark(_rob_arg1)
		}
		else {
			locvar__yoro__tone = "Ç≤ñ≥ëÃÇ»", "Ç‹Ç†ÅAÇ®ãYÇÍÇ™âﬂÇ¨Ç‹Ç∑ÇÌ"
			return locvar__yoro__tone(rnd(2)) + _mark(_rob_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "å©ëπÇ»Ç¡ÇΩÉbÉX" + _mark(_rob_arg1)
		}
		else {
			return "Ç…Ç·ÇËÅ[ÇÒ" + _mark(_rob_arg1)
		}
	}
	return ""

#defcfunc _ka int _ka_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç≈Ç∑Ç©" + _mark(_ka_arg1)
		}
		else {
			return "Ç≈Ç∑Ç©" + _mark(_ka_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç©ÇÊ", "Ç©"
			return locvar__yoro__tone(rnd(2)) + _mark(_ka_arg1)
		}
		else {
			return "Ç©Ç¢" + _mark(_ka_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç©Ç¢", "Ç»ÇÃ"
			return locvar__yoro__tone(rnd(2)) + _mark(_ka_arg1)
		}
		else {
			return "Ç»ÇÃ" + _mark(_ka_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç©Åc", "Ç©ÇÊÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_ka_arg1)
		}
		else {
			return "Ç»ÇÃÅc" + _mark(_ka_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç©ÇÃÇ§", "Ç≈Ç†ÇÈÇ©"
			return locvar__yoro__tone(rnd(2)) + _mark(_ka_arg1)
		}
		else {
			return "Ç≈Ç†ÇÈÇ©" + _mark(_ka_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç≈Ç≤Ç¥ÇÈÇ©" + _mark(_ka_arg1)
		}
		else {
			return "Ç≈Ç≤Ç¥ÇËÇ‹Ç∑ÇÈÇ©" + _mark(_ka_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "ÉbÉXÇ©" + _mark(_ka_arg1)
		}
		else {
			locvar__yoro__tone = "Ç©Ç…Ç·", "Ç©ÉjÉÉÉì"
			return locvar__yoro__tone(rnd(2)) + _mark(_ka_arg1)
		}
	}
	return ""

#defcfunc _da int _da_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç≈Ç∑", "Ç≈Ç∑ÇÀ"
			return locvar__yoro__tone(rnd(2)) + _mark(_da_arg1)
		}
		else {
			locvar__yoro__tone = "Ç≈Ç∑ÇÌ", "Ç≈Ç∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_da_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇæÇ∫", "Çæ"
			return locvar__yoro__tone(rnd(2)) + _mark(_da_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÀ", "ÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_da_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇæÇÊ" + _mark(_da_arg1)
		}
		else {
			locvar__yoro__tone = "ÇæÇÌ", "ÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_da_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇæÅc", "Ç≥Åc"
			return locvar__yoro__tone(rnd(2)) + _mark(_da_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÊÅc", "ÇÀÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_da_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç∂Ç·", "Ç≈Ç®Ç∂Ç·ÇÈ"
			return locvar__yoro__tone(rnd(2)) + _mark(_da_arg1)
		}
		else {
			locvar__yoro__tone = "Ç∂Ç·", "Ç≈Ç®Ç∂Ç·ÇÈÇº"
			return locvar__yoro__tone(rnd(2)) + _mark(_da_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç≈Ç≤Ç¥ÇÈ", "Ç≈Ç≤Ç¥ÇÈÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_da_arg1)
		}
		else {
			return "Ç≈Ç≤Ç¥ÇËÇ‹Ç∑ÇÈ" + _mark(_da_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "ÉbÉX" + _mark(_da_arg1)
		}
		else {
			locvar__yoro__tone = "Ç›Ç·ÇÒ", "É~ÉÉ"
			return locvar__yoro__tone(rnd(2)) + _mark(_da_arg1)
		}
	}
	return ""

#defcfunc _nda int _nda_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÃÇ≈Ç∑", "ÇÒÇ≈Ç∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÃÇ≈Ç∑ÇÌ", "ÇÃÇ≈Ç∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "", "ÇÒÇæ"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda_arg1)
		}
		else {
			return "ÇÃ" + _mark(_nda_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÒÇæÇÊ", "ÇÒÇæ"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÌ", "ÇÃÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Åc", "ÇÒÇæÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÃÅc", "ÇÌÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÃÇ∂Ç·", "ÇÃÇæÇºÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÃÇ∂Ç·ÇÌ", "ÇÃÇæÇºÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇÃÇ≈Ç≤Ç¥ÇÈ" + _mark(_nda_arg1)
		}
		else {
			return "ÇÃÇ≈Ç≤Ç¥Ç¢Ç‹Ç∑" + _mark(_nda_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇÒÇæÉbÉX" + _mark(_nda_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÃÉjÉÉ", "ÇÃÇ…Ç·ÇÒ"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda_arg1)
		}
	}
	return ""

#defcfunc _nda2 int _nda2_prm0
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÃÇ≈Ç∑Ç©", "ÇÒÇ≈Ç∑Ç©"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda2_prm0)
		}
		else {
			return "ÇÃÇ≈Ç∑Ç©" + _mark(_nda2_prm0)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "", "ÇÒÇæ"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda2_prm0)
		}
		else {
			return "ÇÃ" + _mark(_nda2_prm0)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÒÇæÇÊ", "ÇÒÇæ"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda2_prm0)
		}
		else {
			return "ÇÃÇÊ" + _mark(_nda2_prm0)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Åc", "ÇÒÇæÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda2_prm0)
		}
		else {
			return "ÇÃÅc" + _mark(_nda2_prm0)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÃÇ∂Ç·", "ÇÃÇæÇºÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda2_prm0)
		}
		else {
			locvar__yoro__tone = "ÇÃÇ∂Ç·", "ÇÃÇæÇºÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda2_prm0)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇÃÇ≈Ç≤Ç¥ÇÈ" + _mark(_nda2_prm0)
		}
		else {
			return "ÇÃÇ≈Ç≤Ç¥Ç¢Ç‹Ç∑Ç©" + _mark(_nda2_prm0)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇÒÇæÉbÉX" + _mark(_nda2_prm0)
		}
		else {
			locvar__yoro__tone = "ÇÃÉjÉÉ", "ÇÃÇ…Ç·ÇÒ"
			return locvar__yoro__tone(rnd(2)) + _mark(_nda2_prm0)
		}
	}
	return ""

#defcfunc _noka int _noka_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÃÇ≈Ç∑Ç©", "ÇÒÇ≈Ç∑Ç©"
			return locvar__yoro__tone(rnd(2)) + _mark(_noka_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÃÇ≈Ç∑Ç©", "ÇÒÇ≈Ç∑Ç©"
			return locvar__yoro__tone(rnd(2)) + _mark(_noka_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÃÇ©", "ÇÃÇæÇ»"
			return locvar__yoro__tone(rnd(2)) + _mark(_noka_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÃ", "ÇÃÇ©Ç¢"
			return locvar__yoro__tone(rnd(2)) + _mark(_noka_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÃÇ©Ç¢", "ÇÃ"
			return locvar__yoro__tone(rnd(2)) + _mark(_noka_arg1)
		}
		else {
			return "ÇÃ" + _mark(_noka_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇÃÇ©Åc" + _mark(_noka_arg1)
		}
		else {
			return "ÇÃÅc" + _mark(_noka_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÃÇ©ÇÃÇ§", "ÇÃÇæÇ»"
			return locvar__yoro__tone(rnd(2)) + _mark(_noka_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÃÇ©ÇÀ", "ÇÃÇæÇ»"
			return locvar__yoro__tone(rnd(2)) + _mark(_noka_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇÃÇ≈Ç≤Ç¥ÇÈÇ©" + _mark(_noka_arg1)
		}
		else {
			return "ÇÃÇ≈Ç≤Ç¥Ç¢Ç‹Ç∑" + _mark(_noka_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇÃÉbÉXÇ©" + _mark(_noka_arg1)
		}
		else {
			locvar__yoro__tone = "Ç…Ç·ÇÒÇ©", "ÉjÉÉÉì"
			return locvar__yoro__tone(rnd(2)) + _mark(_noka_arg1)
		}
	}
	return ""

#defcfunc _kana int _kana_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç≈ÇµÇÂÇ§Ç©", "Ç≈Ç∑Ç©"
			return locvar__yoro__tone(rnd(2)) + _mark(_kana_arg1)
		}
		else {
			locvar__yoro__tone = "Ç©ÇµÇÁ", "Ç≈ÇµÇÂÇ§"
			return locvar__yoro__tone(rnd(2)) + _mark(_kana_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç©", "Ç©Ç¢"
			return locvar__yoro__tone(rnd(2)) + _mark(_kana_arg1)
		}
		else {
			locvar__yoro__tone = "Ç©", "Ç©Ç¢"
			return locvar__yoro__tone(rnd(2)) + _mark(_kana_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç©Ç»", "Ç©Ç»Çü"
			return locvar__yoro__tone(rnd(2)) + _mark(_kana_arg1)
		}
		else {
			locvar__yoro__tone = "Ç©Ç»", "Ç©Ç»Å["
			return locvar__yoro__tone(rnd(2)) + _mark(_kana_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç©Ç»Åc", "Ç©Åc"
			return locvar__yoro__tone(rnd(2)) + _mark(_kana_arg1)
		}
		else {
			locvar__yoro__tone = "Ç©Ç»Åc", "Ç©Åc"
			return locvar__yoro__tone(rnd(2)) + _mark(_kana_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç©ÇÃÇ§", "Ç©ÇÃ"
			return locvar__yoro__tone(rnd(2)) + _mark(_kana_arg1)
		}
		else {
			locvar__yoro__tone = "Ç©ÇÃÇ§", "Ç©ÇÃ"
			return locvar__yoro__tone(rnd(2)) + _mark(_kana_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç≈Ç≤Ç¥ÇÈÇ©" + _mark(_kana_arg1)
		}
		else {
			return "Ç≈Ç≤Ç¥Ç¢Ç‹Ç∑Ç©" + _mark(_kana_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "ÉbÉXÇ©" + _mark(_kana_arg1)
		}
		else {
			locvar__yoro__tone = "Ç©Ç…Ç·ÇÒ", "Ç©ÉjÉÉ"
			return locvar__yoro__tone(rnd(2)) + _mark(_kana_arg1)
		}
	}
	return ""

#defcfunc _kimi int _kimi_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			return "ãMï˚" + _mark(_kimi_arg1)
		}
		else {
			return "ãMï˚" + _mark(_kimi_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç®ëO" + _mark(_kimi_arg1)
		}
		else {
			return "Ç®ëO" + _mark(_kimi_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			return "åN" + _mark(_kimi_arg1)
		}
		else {
			return "åN" + _mark(_kimi_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			return "åN" + _mark(_kimi_arg1)
		}
		else {
			return "åN" + _mark(_kimi_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç®éÂ" + _mark(_kimi_arg1)
		}
		else {
			return "Ç®éÂ" + _mark(_kimi_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇªÇ±Ç‡Ç∆" + _mark(_kimi_arg1)
		}
		else {
			return "ÇªÇ»ÇΩól" + _mark(_kimi_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "ÉAÉìÉ^" + _mark(_kimi_arg1)
		}
		else {
			return "Ç†Ç…Ç·ÇΩ" + _mark(_kimi_arg1)
		}
	}
	return ""

#defcfunc _ru int _ru_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç‹Ç∑", "Ç‹Ç∑ÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_ru_arg1)
		}
		else {
			locvar__yoro__tone = "Ç‹Ç∑ÇÌ", "Ç‹Ç∑ÇÃ"
			return locvar__yoro__tone(rnd(2)) + _mark(_ru_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÈÇ∫", "ÇÈÇº"
			return locvar__yoro__tone(rnd(2)) + _mark(_ru_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÈÇÌ", "ÇÈÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_ru_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÈÇÊ", "ÇÈÇÀ"
			return locvar__yoro__tone(rnd(2)) + _mark(_ru_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÈÇÃ", "ÇÈÇÌ"
			return locvar__yoro__tone(rnd(2)) + _mark(_ru_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÈÅc", "ÇÈÇ™Åc"
			return locvar__yoro__tone(rnd(2)) + _mark(_ru_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÈÅc", "ÇÈÇÌÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_ru_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÈÇºÇÊ", "ÇÈÇº"
			return locvar__yoro__tone(rnd(2)) + _mark(_ru_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÈÇºÇÊ", "ÇÈÇº"
			return locvar__yoro__tone(rnd(2)) + _mark(_ru_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÈÇ≈Ç≤Ç¥ÇÈ", "ÇÈÇ≈Ç≤Ç¥ÇÈÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_ru_arg1)
		}
		else {
			return "ÇÈÇÃÇ≈Ç≤Ç¥Ç¢Ç‹Ç∑" + _mark(_ru_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇÈÉbÉX" + _mark(_ru_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÈÇÃÉjÉÉ", "ÇÈÇ…Ç·ÇÒ"
			return locvar__yoro__tone(rnd(2)) + _mark(_ru_arg1)
		}
	}
	return ""

#defcfunc _tanomu int _tanomu_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç®äËÇ¢ÇµÇ‹Ç∑", "óäÇ›Ç‹Ç∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_tanomu_arg1)
		}
		else {
			locvar__yoro__tone = "Ç®äËÇ¢ÇµÇ‹Ç∑ÇÌ", "óäÇ›Ç‹Ç∑ÇÌ"
			return locvar__yoro__tone(rnd(2)) + _mark(_tanomu_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "óäÇﬁ", "óäÇﬁÇ»"
			return locvar__yoro__tone(rnd(2)) + _mark(_tanomu_arg1)
		}
		else {
			locvar__yoro__tone = "óäÇﬁÇÊ", "óäÇﬁ"
			return locvar__yoro__tone(rnd(2)) + _mark(_tanomu_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "óäÇﬁÇÀ", "óäÇﬁÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_tanomu_arg1)
		}
		else {
			locvar__yoro__tone = "óäÇﬁÇÌ", "óäÇﬁÇÀ"
			return locvar__yoro__tone(rnd(2)) + _mark(_tanomu_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "óäÇﬁÅc", "óäÇﬁÇºÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_tanomu_arg1)
		}
		else {
			locvar__yoro__tone = "óäÇﬁÇÌÅc", "óäÇﬁÇÊÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_tanomu_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			return "óäÇﬁÇºÇÊ" + _mark(_tanomu_arg1)
		}
		else {
			return "óäÇﬁÇºÇÊ" + _mark(_tanomu_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "óäÇ›ê\Ç∑", "óäÇﬁÇ≈Ç≤Ç¥ÇÈ"
			return locvar__yoro__tone(rnd(2)) + _mark(_tanomu_arg1)
		}
		else {
			return "Ç®óäÇ›ê\Çµè„Ç∞Ç‹Ç∑" + _mark(_tanomu_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "óäÇﬁÉbÉX" + _mark(_tanomu_arg1)
		}
		else {
			locvar__yoro__tone = "Ç®ÇÀÇ™Ç¢Ç…Ç·", "Ç®ÇÀÇ™Ç¢ÉjÉÉÉì"
			return locvar__yoro__tone(rnd(2)) + _mark(_tanomu_arg1)
		}
	}
	return ""

#defcfunc _ore int _ore_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			return "éÑ" + _mark(_ore_arg1)
		}
		else {
			return "éÑ" + _mark(_ore_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			return "â¥" + _mark(_ore_arg1)
		}
		else {
			return "Ç†ÇΩÇµ" + _mark(_ore_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			return "ñl" + _mark(_ore_arg1)
		}
		else {
			return "ÇÌÇΩÇµ" + _mark(_ore_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			return "é©ï™" + _mark(_ore_arg1)
		}
		else {
			return "é©ï™" + _mark(_ore_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			return "ñÉòC" + _mark(_ore_arg1)
		}
		else {
			return "ÇÌÇÁÇÌ" + _mark(_ore_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			return "êŸé“" + _mark(_ore_arg1)
		}
		else {
			return "éËëO" + _mark(_ore_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç†Ç¡Çµ" + _mark(_ore_arg1)
		}
		else {
			return "Ç›Ç„Å[" + _mark(_ore_arg1)
		}
	}
	return ""

#defcfunc _ga int _ga_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç≈Ç∑Ç™", "Ç≈Ç∑ÇØÇ«"
			return locvar__yoro__tone(rnd(2)) + _mark(_ga_arg1)
		}
		else {
			locvar__yoro__tone = "Ç≈Ç∑Ç™", "Ç≈Ç∑ÇØÇ«"
			return locvar__yoro__tone(rnd(2)) + _mark(_ga_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç™", "Ç™Ç»"
			return locvar__yoro__tone(rnd(2)) + _mark(_ga_arg1)
		}
		else {
			return "Ç™" + _mark(_ga_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇØÇ«", "Ç™"
			return locvar__yoro__tone(rnd(2)) + _mark(_ga_arg1)
		}
		else {
			locvar__yoro__tone = "Ç™", "ÇØÇ«"
			return locvar__yoro__tone(rnd(2)) + _mark(_ga_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç™Åc", "ÇØÇ«Åc"
			return locvar__yoro__tone(rnd(2)) + _mark(_ga_arg1)
		}
		else {
			locvar__yoro__tone = "Ç™Åc", "ÇØÇ«Åc"
			return locvar__yoro__tone(rnd(2)) + _mark(_ga_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç≈Ç†ÇÈÇ™" + _mark(_ga_arg1)
		}
		else {
			return "Ç≈Ç†ÇÈÇ™" + _mark(_ga_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç≈Ç≤Ç¥ÇÈÇ™" + _mark(_ga_arg1)
		}
		else {
			return "Ç≈Ç≤Ç¥Ç¢Ç‹Ç∑Ç™" + _mark(_ga_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÉbÉXÇØÇ«", "ÉbÉXÇ™"
			return locvar__yoro__tone(rnd(2)) + _mark(_ga_arg1)
		}
		else {
			locvar__yoro__tone = "ÉjÉÉÇØÇ«", "Ç…Ç·Ç™"
			return locvar__yoro__tone(rnd(2)) + _mark(_ga_arg1)
		}
	}
	return ""

#defcfunc _dana int _dana_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç≈Ç∑ÇÀ" + _mark(_dana_arg1)
		}
		else {
			locvar__yoro__tone = "Ç≈Ç∑ÇÌÇÀ", "Ç≈Ç∑ÇÀ"
			return locvar__yoro__tone(rnd(2)) + _mark(_dana_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇæÇ»" + _mark(_dana_arg1)
		}
		else {
			locvar__yoro__tone = "ÇæÇÀ", "ÇÀ"
			return locvar__yoro__tone(rnd(2)) + _mark(_dana_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇæÇÀ" + _mark(_dana_arg1)
		}
		else {
			return "ÇÀ" + _mark(_dana_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇæÇ»Åc" + _mark(_dana_arg1)
		}
		else {
			locvar__yoro__tone = "ÇæÇÀÅc", "ÇÀÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_dana_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç≈Ç†ÇÈÇ»" + _mark(_dana_arg1)
		}
		else {
			return "Ç≈Ç†ÇÈÇ»" + _mark(_dana_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç≈Ç≤Ç¥ÇÈÇ»" + _mark(_dana_arg1)
		}
		else {
			return "Ç≈Ç≤Ç¥Ç¢Ç‹Ç∑ÇÀ" + _mark(_dana_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "ÉbÉXÇÀ" + _mark(_dana_arg1)
		}
		else {
			locvar__yoro__tone = "Ç…Ç·", "Ç›Ç·"
			return locvar__yoro__tone(rnd(2)) + _mark(_dana_arg1)
		}
	}
	return ""

#defcfunc _kure int _kure_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç≠ÇæÇ≥Ç¢", "Ç≠ÇæÇ≥Ç¢ÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_kure_arg1)
		}
		else {
			locvar__yoro__tone = "Ç≠ÇæÇ≥Ç¢Ç»", "Ç≠ÇæÇ≥Ç¢"
			return locvar__yoro__tone(rnd(2)) + _mark(_kure_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç≠ÇÍ", "Ç≠ÇÍÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_kure_arg1)
		}
		else {
			locvar__yoro__tone = "Ç≠ÇÍ", "ÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_kure_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÀ", "ÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_kure_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÀ", "ÇÀ"
			return locvar__yoro__tone(rnd(2)) + _mark(_kure_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç≠ÇÍÅc", "Åc"
			return locvar__yoro__tone(rnd(2)) + _mark(_kure_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÊÅc", "Åc"
			return locvar__yoro__tone(rnd(2)) + _mark(_kure_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç¬Ç©ÇÌÇπ", "ÇΩÇ‡ÇÍ"
			return locvar__yoro__tone(rnd(2)) + _mark(_kure_arg1)
		}
		else {
			locvar__yoro__tone = "Ç¬Ç©ÇÌÇπ", "ÇΩÇ‡ÇÍ"
			return locvar__yoro__tone(rnd(2)) + _mark(_kure_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			return "í∏Ç´ÇΩÇ¢Ç≈Ç≤Ç¥ÇÈ" + _mark(_kure_arg1)
		}
		else {
			return "Ç≠ÇæÇ≥Ç¢Ç‹Çπ" + _mark(_kure_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç≠ÇÍÉbÉX" + _mark(_kure_arg1)
		}
		else {
			locvar__yoro__tone = "Ç…Ç·", "Ç›Ç·"
			return locvar__yoro__tone(rnd(2)) + _mark(_kure_arg1)
		}
	}
	return ""

#defcfunc _daro int _daro_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç≈ÇµÇÂÇ§" + _mark(_daro_arg1)
		}
		else {
			return "Ç≈ÇµÇÂÇ§" + _mark(_daro_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇæÇÎ" + _mark(_daro_arg1)
		}
		else {
			return "ÇæÇÎÇ§ÇÀ" + _mark(_daro_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇæÇÎÇ§ÇÀ" + _mark(_daro_arg1)
		}
		else {
			return "Ç≈ÇµÇÂ" + _mark(_daro_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇæÇÎÅc" + _mark(_daro_arg1)
		}
		else {
			return "Ç≈ÇµÇÂÅc" + _mark(_daro_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç≈Ç†ÇÎÇ§" + _mark(_daro_arg1)
		}
		else {
			return "Ç≈Ç†ÇÎÇ§Ç»" + _mark(_daro_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç≈Ç≤Ç¥ÇÎÇ§Ç»" + _mark(_daro_arg1)
		}
		else {
			return "Ç≈Ç≤Ç¥Ç¢Ç‹ÇµÇÂÇ§" + _mark(_daro_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			return "ÉbÉXÇÀ" + _mark(_daro_arg1)
		}
		else {
			locvar__yoro__tone = "Ç…Ç·", "Ç›Ç·"
			return locvar__yoro__tone(rnd(2)) + _mark(_daro_arg1)
		}
	}
	return ""

#defcfunc _yo int _yo_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç≈Ç∑ÇÊ", "Ç≈Ç∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_yo_arg1)
		}
		else {
			locvar__yoro__tone = "Ç≈Ç∑ÇÊ", "Ç≈Ç∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_yo_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç∫", "Çº"
			return locvar__yoro__tone(rnd(2)) + _mark(_yo_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÌ", "ÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_yo_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÊ", "Çº"
			return locvar__yoro__tone(rnd(2)) + _mark(_yo_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÌÇÊ", "ÇÌ"
			return locvar__yoro__tone(rnd(2)) + _mark(_yo_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Åc", "ÇºÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_yo_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÌÅc", "Åc"
			return locvar__yoro__tone(rnd(2)) + _mark(_yo_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç≈Ç†ÇÎÇ§", "Ç≈Ç®Ç∂Ç·ÇÈ"
			return locvar__yoro__tone(rnd(2)) + _mark(_yo_arg1)
		}
		else {
			locvar__yoro__tone = "Ç≈Ç†ÇÎÇ§Çº", "Ç≈Ç®Ç∂Ç·ÇÈ"
			return locvar__yoro__tone(rnd(2)) + _mark(_yo_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç≈Ç≤Ç¥ÇÎÇ§" + _mark(_yo_arg1)
		}
		else {
			return "Ç≈Ç≤Ç¥Ç¢Ç‹Ç∑ÇÌ" + _mark(_yo_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÉbÉXÇÊ", "ÉbÉX"
			return locvar__yoro__tone(rnd(2)) + _mark(_yo_arg1)
		}
		else {
			locvar__yoro__tone = "Ç…Ç·Çü", "Ç›Ç·Çü"
			return locvar__yoro__tone(rnd(2)) + _mark(_yo_arg1)
		}
	}
	return ""

#defcfunc _aru int _aru_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç†ÇËÇ‹Ç∑", "Ç†ÇËÇ‹Ç∑ÇÀ"
			return locvar__yoro__tone(rnd(2)) + _mark(_aru_arg1)
		}
		else {
			locvar__yoro__tone = "Ç†ÇËÇ‹Ç∑", "Ç†ÇËÇ‹Ç∑ÇÌ"
			return locvar__yoro__tone(rnd(2)) + _mark(_aru_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç†ÇÈ", "Ç†ÇÈÇ»"
			return locvar__yoro__tone(rnd(2)) + _mark(_aru_arg1)
		}
		else {
			locvar__yoro__tone = "Ç†ÇÈÇÀ", "Ç†ÇÈÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_aru_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç†ÇÈÇÀ", "Ç†ÇÈÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_aru_arg1)
		}
		else {
			locvar__yoro__tone = "Ç†ÇÈÇÌ", "Ç†ÇÈÇÌÇÀ"
			return locvar__yoro__tone(rnd(2)) + _mark(_aru_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç†ÇÈÅc", "Ç†ÇÈÇºÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_aru_arg1)
		}
		else {
			return "Ç†ÇÈÇÌÅc" + _mark(_aru_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç†ÇÎÇ§", "Ç®Ç∂Ç·ÇÈ"
			return locvar__yoro__tone(rnd(2)) + _mark(_aru_arg1)
		}
		else {
			locvar__yoro__tone = "Ç†ÇÎÇ§", "Ç®Ç∂Ç·ÇÈ"
			return locvar__yoro__tone(rnd(2)) + _mark(_aru_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç†ÇÈÇ≈Ç≤Ç¥ÇÈ", "Ç†ÇÈÇ≈Ç≤Ç¥ÇÈÇ»"
			return locvar__yoro__tone(rnd(2)) + _mark(_aru_arg1)
		}
		else {
			return "Ç≤Ç¥Ç‹Ç∑" + _mark(_aru_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç†ÇÈÉbÉXÇÊ", "Ç†ÇÈÉbÉX"
			return locvar__yoro__tone(rnd(2)) + _mark(_aru_arg1)
		}
		else {
			locvar__yoro__tone = "Ç†Ç…Ç„", "Ç†Ç›Ç£"
			return locvar__yoro__tone(rnd(2)) + _mark(_aru_arg1)
		}
	}
	return ""

#defcfunc _u int _u_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç¢Ç‹Ç∑", "Ç¢Ç‹Ç∑ÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_u_arg1)
		}
		else {
			locvar__yoro__tone = "Ç¢Ç‹Ç∑ÇÌ", "Ç¢Ç‹Ç∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_u_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç§Ç∫", "Ç§Çº"
			return locvar__yoro__tone(rnd(2)) + _mark(_u_arg1)
		}
		else {
			locvar__yoro__tone = "Ç§ÇÌ", "Ç§ÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_u_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç§ÇÊ", "Ç§"
			return locvar__yoro__tone(rnd(2)) + _mark(_u_arg1)
		}
		else {
			locvar__yoro__tone = "Ç§ÇÌ", "Ç§"
			return locvar__yoro__tone(rnd(2)) + _mark(_u_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç§Åc", "Ç§ÇºÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_u_arg1)
		}
		else {
			locvar__yoro__tone = "Ç§ÇÌÅc", "Ç§Åc"
			return locvar__yoro__tone(rnd(2)) + _mark(_u_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç§ÇºÇÊ", "Ç§Çº"
			return locvar__yoro__tone(rnd(2)) + _mark(_u_arg1)
		}
		else {
			locvar__yoro__tone = "Ç§ÇºÇÊ", "Ç§Çº"
			return locvar__yoro__tone(rnd(2)) + _mark(_u_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç§Ç≈Ç≤Ç¥ÇÈ", "Ç§Ç≈Ç≤Ç¥ÇÈÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_u_arg1)
		}
		else {
			return "Ç§Ç≈Ç≤Ç¥Ç¢Ç‹Ç∑" + _mark(_u_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç§ÉbÉXÇÊ", "Ç§ÉbÉX"
			return locvar__yoro__tone(rnd(2)) + _mark(_u_arg1)
		}
		else {
			locvar__yoro__tone = "Ç§Ç…Çü", "Ç§Ç›Çü"
			return locvar__yoro__tone(rnd(2)) + _mark(_u_arg1)
		}
	}
	return ""

#defcfunc _na int _na_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç≈Ç∑ÇÀ", "Ç≈Ç∑"
			return locvar__yoro__tone(rnd(2)) + _mark(_na_arg1)
		}
		else {
			locvar__yoro__tone = "Ç≈Ç∑ÇÌ", "Ç≈Ç∑ÇÀ"
			return locvar__yoro__tone(rnd(2)) + _mark(_na_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç∫", "Ç»"
			return locvar__yoro__tone(rnd(2)) + _mark(_na_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÀ", "Ç»"
			return locvar__yoro__tone(rnd(2)) + _mark(_na_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇÀ", "Ç»Çü"
			return locvar__yoro__tone(rnd(2)) + _mark(_na_arg1)
		}
		else {
			locvar__yoro__tone = "ÇÌ", "ÇÌÇÀ"
			return locvar__yoro__tone(rnd(2)) + _mark(_na_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Åc", "Ç»Åc"
			return locvar__yoro__tone(rnd(2)) + _mark(_na_arg1)
		}
		else {
			locvar__yoro__tone = "Åc", "ÇÌÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_na_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç≈Ç®Ç∂Ç·ÇÈÇ»", "ÇÃÇ§"
			return locvar__yoro__tone(rnd(2)) + _mark(_na_arg1)
		}
		else {
			locvar__yoro__tone = "Ç≈Ç®Ç∂Ç·ÇÈÇ»", "ÇÃÇ§"
			return locvar__yoro__tone(rnd(2)) + _mark(_na_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			return "Ç≈Ç≤Ç¥ÇÈÇ»" + _mark(_na_arg1)
		}
		else {
			return "Ç≈Ç≤Ç¥Ç¢Ç‹Ç∑ÇÌ" + _mark(_na_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÉbÉXÇÀ", "ÉbÉX"
			return locvar__yoro__tone(rnd(2)) + _mark(_na_arg1)
		}
		else {
			locvar__yoro__tone = "ÉjÉ@", "É~É@"
			return locvar__yoro__tone(rnd(2)) + _mark(_na_arg1)
		}
	}
	return ""

#defcfunc _ta int _ta_arg1
	if ( cTone(tc) == 0 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "Ç‹ÇµÇΩ", "Ç‹ÇµÇΩÇÀ"
			return locvar__yoro__tone(rnd(2)) + _mark(_ta_arg1)
		}
		else {
			locvar__yoro__tone = "Ç‹ÇµÇΩ", "Ç‹ÇµÇΩÇÌ"
			return locvar__yoro__tone(rnd(2)) + _mark(_ta_arg1)
		}
	}
	if ( cTone(tc) == 1 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇΩ", "ÇΩÇ»"
			return locvar__yoro__tone(rnd(2)) + _mark(_ta_arg1)
		}
		else {
			locvar__yoro__tone = "ÇΩÇÀ", "ÇΩÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_ta_arg1)
		}
	}
	if ( cTone(tc) == 2 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇΩÇÀ", "ÇΩÇÊ"
			return locvar__yoro__tone(rnd(2)) + _mark(_ta_arg1)
		}
		else {
			locvar__yoro__tone = "ÇΩÇÊ", "ÇΩÇÀ"
			return locvar__yoro__tone(rnd(2)) + _mark(_ta_arg1)
		}
	}
	if ( cTone(tc) == 3 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇΩÅc", "ÇΩÇºÅc"
			return locvar__yoro__tone(rnd(2)) + _mark(_ta_arg1)
		}
		else {
			return "ÇΩÇÌÅc" + _mark(_ta_arg1)
		}
	}
	if ( cTone(tc) == 4 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇΩÇºÇÊ", "ÇΩÇºÇ»"
			return locvar__yoro__tone(rnd(2)) + _mark(_ta_arg1)
		}
		else {
			return "ÇΩÇºÇÊ" + _mark(_ta_arg1)
		}
	}
	if ( cTone(tc) == 5 ) {
		if ( cSex(tc) == 0 ) {
			return "ÇΩÇ≈Ç≤Ç¥ÇÈ" + _mark(_ta_arg1)
		}
		else {
			return "Ç‹ÇµÇƒÇ≤Ç¥Ç¢Ç‹Ç∑" + _mark(_ta_arg1)
		}
	}
	if ( cTone(tc) == 6 ) {
		if ( cSex(tc) == 0 ) {
			locvar__yoro__tone = "ÇΩÉbÉXÇÊ", "ÇΩÉbÉX"
			return locvar__yoro__tone(rnd(2)) + _mark(_ta_arg1)
		}
		else {
			locvar__yoro__tone = "ÇΩÇ…Ç·Çü", "ÇΩÇ›Ç·Çü"
			return locvar__yoro__tone(rnd(2)) + _mark(_ta_arg1)
		}
	}
	return ""

#deffunc convert_word var convert_word_prm0, int convert_word_prm1, int convert_word_prm2
	nc_intb_modimp = 0
	repeat 20
		await
		splitpoint = instr(convert_word_prm0, 0, "{"), instr(convert_word_prm0, splitpoint, "}"), strlen(convert_word_prm0)
		if ( splitpoint == (-1) ) {
			break
		}
		splitword = strmid(convert_word_prm0, splitpoint + 1, splitpoint(1) - 1), strmid(convert_word_prm0, 0, splitpoint), strmid(convert_word_prm0, splitpoint + splitpoint(1) + 1, splitpoint(2) - splitpoint(1) - splitpoint)
		repeat 1
			if ( strmid(splitword, 0, 4) == "snd:" ) {
				s = strmid(splitword, -1, strlen(splitword) - 4)
				playsound s
				splitword = ""
				break
			}
			if ( strmid(splitword, 0, 4) == "bgm:" ) {
				s = strmid(splitword, -1, strlen(splitword) - 4)
				playbgm s
				splitword = ""
				break
			}
			if ( splitword == "ref" ) {
				if ( talkref == 1 ) {
					splitword = lang("" + gGuest, "" + gGuest + " guest" + _s2(gGuest))
					break
				}
			}
			if ( splitword == "mati" ) {
				if ( talkref == 1 ) {
					splitword = lang("" + mati, "" + mati)
					break
				}
			}
			if ( splitword == "matiname" ) {
				if ( talkref == 1 ) {
					splitword = lang("" + mdatan(0), "" + mdatan(0))
					break
				}
			}
			if ( splitword == "you" ) {
				splitword = _kimi(3)
				break
			}
			if ( splitword == "me" ) {
				splitword = _ore(3)
				break
			}
			if ( splitword == "sex" ) {
				splitword = _sex2(cSex(convert_word_prm1))
				break
			}
			if ( splitword == "player" ) {
				splitword = cnName(CHARA_PLAYER)
				break
			}
			if ( splitword == "aka" ) {
				splitword = cnAka(CHARA_PLAYER)
				break
			}
			if ( splitword == "npc" ) {
				splitword = cnName(convert_word_prm2)
				break
			}
			if ( splitword == "nnpc" ) {
				namae = refchara(cId(convert_word_prm2), DBSPEC_CHARA_NAME_ORG, 1) + "ÇÃ"
				if ( instr(cnName(convert_word_prm2), 0, namae) != (-1) ) {
					splitword = cnName(convert_word_prm2)
					delstr splitword, namae
				}
				else {
					splitword = cnName(convert_word_prm2)
				}
				break
			}
			if ( splitword == "snpc" ) {
				splitword = cnName(convert_word_prm1)
				break
			}
			if ( splitword == "nsnpc" ) {
				namae = refchara(cId(convert_word_prm1), DBSPEC_CHARA_NAME_ORG, 1) + "ÇÃ"
				if ( instr(cnName(convert_word_prm1), 0, namae) != (-1) ) {
					splitword = cnName(convert_word_prm1)
					delstr splitword, namae
				}
				else {
					splitword = cnName(convert_word_prm1)
				}
				break
			}
			if ( splitword == "wholeprice" ) {
				splitword = lang("" + sexvalue, "" + sexvalue)
				break
			}
			if ( splitword == "cost" ) {
				splitword = "" + thousandsep(str(costvalue))
				break
			}
			if ( splitword == "giveprice" ) {
				splitword = lang("" + costvalue, "" + costvalue)
				break
			}
			if ( splitword == "csskill" ) {
				splitword = ""
				if ( csskill >= 0 & csskill < length(skillname) ) {
					splitword = "" + skillname(csskill)
				}
				break
			}
			if ( splitword == "cmaka" ) {
				splitword = "" + cmaka
				break
			}
			if ( splitword == "psex" ) {
				splitword = _sex2(cSex(CHARA_PLAYER))
				break
			}
			if ( splitword == "csex" ) {
				splitword = _sex2(cSex(convert_word_prm0))
				break
			}
			if ( splitword == "tsex" ) {
				splitword = _sex2(cSex(convert_word_prm1))
				break
			}
			if ( splitword == "caka" ) {
				splitword = cnAka(convert_word_prm0)
				if ( splitword == "" ) {
					splitword = cnName(convert_word_prm0)
				}
				break
			}
			if ( splitword == "taka" ) {
				splitword = cnAka(prm_587)
				if ( splitword == "" ) {
					splitword = cnName(prm_587)
				}
				break
			}
			if ( splitword == "nptc" ) {
				splitword = cnName(tc)
				break
			}
			if ( splitword == "npcc" ) {
				splitword = cnName(cc)
				break
			}
			if ( splitword == "spell" ) {
				splitword = skillname(efid)
				break
			}
			if ( splitword == "calcadv" ) {
				splitword = str(calchireadv(convert_word_prm1))
				break
			}
			if ( splitword == "ciname" ) {
				splitword = ""
				if ( ci != (-1) ) {
					splitword = itemname(ci)
				}
				break
			}
			if ( splitword == "tiname" ) {
				splitword = ""
				if ( ti != (-1) ) {
					splitword = itemname(ti)
				}
				break
			}
			if ( splitword == "winame" ) {
				splitword = ""
				if ( cw != (-1) ) {
					splitword = itemname(cw)
				}
				break
			}
			if ( splitword == "ainame" ) {
				splitword = ""
				if ( ammo != (-1) ) {
					splitword = itemname(ammo)
				}
				break
			}
			if ( splitword == "ciname1" ) {
				splitword = ""
				if ( ci != (-1) ) {
					splitword = itemname(ci, 1)
				}
				break
			}
			if ( splitword == "tiname1" ) {
				splitword = ""
				if ( ti != (-1) ) {
					splitword = itemname(ti, 1)
				}
				break
			}
			if ( splitword == "pickitem" ) {
				splitword = ""
				if ( ti != (-1) ) {
					splitword = itemname(ti, in)
					str_replace splitword, "[", "Åm"
					str_replace splitword, "]", "Ån"
				}
				break
			}
			if ( splitword == "winame1" ) {
				splitword = ""
				if ( cw != (-1) ) {
					splitword = itemname(cw, 1)
				}
				break
			}
			if ( splitword == "ainame1" ) {
				splitword = ""
				if ( ammo != (-1) ) {
					splitword = itemname(ammo, 1)
				}
				break
			}
			if ( splitword == "cititle" ) {
				splitword = ""
				if ( ci != (-1) ) {
					splitword = lang("", "The ") + iknownnameref(iID(ci))
					if ( iID(ci) == ITEM_ID_CARNEADES_PLANK ) {
						splitword = lang("", "The ") + iknownnamecnv(ci)
					}
					if ( iQuality(ci) >= FIX_QUALITY_MIRACLE & iSubName(ci) >= 40000 & refitem(iID(ci), DBSPEC_TYPE, ci) < FILTER_ITEM_MIN ) {
						rndseed = rnd(32768)
						randomize iSubName(ci) - 40000
						splitword = random_title(1)
						randomize rndseed
					}
				}
				break
			}
			if ( splitword == "tititle" ) {
				splitword = ""
				if ( ti != (-1) ) {
					splitword = lang("", "The ") + iknownnameref(iID(ti))
					if ( iID(ti) == ITEM_ID_CARNEADES_PLANK ) {
						splitword = lang("", "The ") + iknownnamecnv(ti)
					}
					if ( iQuality(ti) >= FIX_QUALITY_MIRACLE & iSubName(ti) >= 40000 & refitem(iID(ti), DBSPEC_TYPE, ti) < FILTER_ITEM_MIN ) {
						rndseed = rnd(32768)
						randomize iSubName(ti) - 40000
						splitword = random_title(1)
						randomize rndseed
					}
				}
				break
			}
			if ( splitword == "wititle" ) {
				splitword = ""
				if ( cw != (-1) ) {
					splitword = lang("", "The ") + iknownnameref(iID(cw))
					if ( iID(cw) == ITEM_ID_CARNEADES_PLANK ) {
						splitword = lang("", "The ") + iknownnamecnv(cw)
					}
					if ( iQuality(cw) >= FIX_QUALITY_MIRACLE & iSubName(cw) >= 40000 & refitem(iID(cw), DBSPEC_TYPE, cw) < FILTER_ITEM_MIN ) {
						rndseed = rnd(32768)
						randomize iSubName(cw) - 40000
						splitword = random_title(1)
						randomize rndseed
					}
				}
				break
			}
			if ( splitword == "aititle" ) {
				splitword = ""
				if ( ammo != (-1) ) {
					splitword = lang("", "The ") + iknownnameref(iID(ammo))
					if ( iID(ammo) == ITEM_ID_CARNEADES_PLANK ) {
						splitword = lang("", "The ") + iknownnamecnv(ammo)
					}
					if ( iQuality(ammo) >= FIX_QUALITY_MIRACLE & iSubName(ammo) >= 40000 & refitem(iID(ammo), DBSPEC_TYPE, ammo) < FILTER_ITEM_MIN ) {
						rndseed = rnd(32768)
						randomize iSubName(ammo) - 40000
						splitword = random_title(1)
						randomize rndseed
					}
				}
				break
			}
			if ( splitword == "ccname" ) {
				splitword = ""
				if ( convert_word_prm0 != (-1) ) {
					if ( cId(convert_word_prm0) == CREATURE_ID_USER ) {
						if ( cUNID(convert_word_prm0) < usernpcmax ) {
							splitword = userdatan(1, cUNID(convert_word_prm0))
							break
						}
					}
					splitword = name(convert_word_prm0)
				}
				break
			}
			if ( splitword == "tcname" ) {
				splitword = ""
				if ( convert_word_prm1 != (-1) ) {
					if ( cId(convert_word_prm1) == CREATURE_ID_USER ) {
						if ( cUNID(convert_word_prm1) < usernpcmax ) {
							splitword = userdatan(1, cUNID(convert_word_prm1))
							break
						}
					}
					splitword = name(convert_word_prm1)
				}
				break
			}
			if ( splitword == "dropitem" ) {
				splitword = nc_ctalkbuff_str
				str_replace splitword, "[", "Åm"
				str_replace splitword, "]", "Ån"
			}
			if ( splitword == "itemcount" ) {
				splitword = str(nc_ctalkbuff_int)
			}
			if ( splitword == "pgod" ) {
				splitword = godname(godcheck(0))
				break
			}
			if ( splitword == "cgod" ) {
				splitword = godname(godcheck(convert_word_prm0))
				break
			}
			if ( splitword == "tgod" ) {
				splitword = godname(godcheck(convert_word_prm1))
				break
			}
			if ( splitword == "psgod" ) {
				splitword = sgodname(godcheck(0))
				break
			}
			if ( splitword == "csgod" ) {
				splitword = sgodname(godcheck(convert_word_prm0))
				break
			}
			if ( splitword == "tsgod" ) {
				splitword = sgodname(godcheck(convert_word_prm1))
				break
			}
			if ( strmid(splitword, 0, 5) == "gdata" & strlen(splitword) > 5 ) {
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= length(gdata) ) {
					splitword = ""
					break
				}
				cope = instr(s, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = gdata(cnum)
					splitword = ""
					break
				}
				splitword = "" + gdata(cnum)
				break
			}
			if ( strmid(splitword, 0, 5) == "mdata" & strlen(splitword) > 5 ) {
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= length(mdata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = mdata(cnum)
					splitword = ""
					break
				}
				splitword = "" + mdata(cnum)
				break
			}
			if ( strmid(splitword, 0, 6) == "madata" & strlen(splitword) > 6 ) {
				cnum = int(strmid(splitword, 6, strlen(splitword) - 6))
				if ( cnum < 0 | cnum >= length(adata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = adata(cnum, gArea )
					splitword = ""
					break
				}
				splitword = "" + adata(cnum, gArea )
				break
			}
			if ( strmid(splitword, 0, 6) == "wadata" & strlen(splitword) > 6 ) {
				cnum = int(strmid(splitword, 6, strlen(splitword) - 6))
				if ( cnum < 0 | cnum >= length(adata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = adata(cnum, gWorld)
					splitword = ""
					break
				}
				splitword = "" + adata(cnum, gWorld)
				break
			}
			if ( strmid(splitword, 0, 6) == "cgdata" & strlen(splitword) > 6 ) {
				cgdatatarget = convert_word_prm2
				if ( cId(cgdatatarget) != CREATURE_ID_USER | cUNID(cgdatatarget) >= usernpcmax ) {
					splitword = ""
					break
				}
				cnum = int(strmid(splitword, 6, strlen(splitword) - 6))
				if ( cnum < 0 | cnum >= length(usergdata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "add")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					usergdata(cnum, cUNID(cgdatatarget)) += onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "sub")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					usergdata(cnum, cUNID(cgdatatarget)) -= onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "mpl")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					usergdata(cnum, cUNID(cgdatatarget)) *= onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "div")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum != 0 ) {
						usergdata(cnum, cUNID(cgdatatarget)) /= onum
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "mod")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum != 0 ) {
						usergdata(cnum, cUNID(cgdatatarget)) \= onum
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "set")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					usergdata(cnum, cUNID(cgdatatarget)) = onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "rnd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum > 0 ) {
						usergdata(cnum, cUNID(cgdatatarget)) = rnd(onum) + 1
					}
					else {
						usergdata(cnum, cUNID(cgdatatarget)) = 0
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = usergdata(cnum, cUNID(cgdatatarget))
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pop")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					usergdata(cnum, cUNID(cgdatatarget)) = cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pad")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					if ( cRole(cgdatatarget) != ROLE_USER ) {
						splitword = ""
						break
					}
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					usergdata(cnum, cUNID(cgdatatarget)) += cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psb")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					if ( cRole(cgdatatarget) != ROLE_USER ) {
						splitword = ""
						break
					}
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					usergdata(cnum, cUNID(cgdatatarget)) -= cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pmp")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					if ( cRole(cgdatatarget) != ROLE_USER ) {
						splitword = ""
						break
					}
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					usergdata(cnum, cUNID(cgdatatarget)) *= cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pdv")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					if ( cRole(cgdatatarget) != ROLE_USER ) {
						splitword = ""
						break
					}
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( cmgbuff(onum) != 0 ) {
						usergdata(cnum, cUNID(cgdatatarget)) /= cmgbuff(onum)
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pmd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					if ( cRole(cgdatatarget) != ROLE_USER ) {
						splitword = ""
						break
					}
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( cmgbuff(onum) != 0 ) {
						usergdata(cnum, cUNID(cgdatatarget)) \= cmgbuff(onum)
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "prd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					if ( cRole(cgdatatarget) != ROLE_USER ) {
						splitword = ""
						break
					}
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					usergdata(cnum, cUNID(cgdatatarget)) = 0
					if ( cmgbuff(onum) > 0 ) {
						usergdata(cnum, cUNID(cgdatatarget)) = rnd(cmgbuff(onum)) + 1
					}
					splitword = ""
					break
				}
				splitword = "" + usergdata(cnum, cUNID(cgdatatarget))
				break
			}
			if ( strmid(splitword, 0, 5) == "cdata" & strlen(splitword) > 5 ) {
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= length(cdata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = cdata(cnum, CHARA_PLAYER)
					splitword = ""
					break
				}
				splitword = "" + cdata(cnum, CHARA_PLAYER)
				break
			}
			if ( strmid(splitword, 0, 5) == "cdata" & strlen(splitword) > 5 ) {
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= length(cdata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = cdata(cnum, CHARA_PLAYER)
					splitword = ""
					break
				}
				splitword = "" + cdata(cnum, CHARA_PLAYER)
				break
			}
			if ( strmid(splitword, 0, 6) == "ccdata" & strlen(splitword) > 6 ) {
				if ( convert_word_prm0 == (-1) ) {
					splitword = ""
					break
				}
				cnum = int(strmid(splitword, 6, strlen(splitword) - 6))
				if ( cnum < 0 | cnum >= length(cdata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = cdata(cnum, convert_word_prm0)
					splitword = ""
					break
				}
				splitword = "" + cdata(cnum, convert_word_prm0)
				break
			}
			if ( strmid(splitword, 0, 6) == "tcdata" & strlen(splitword) > 6 ) {
				if ( convert_word_prm1 == (-1) ) {
					splitword = ""
					break
				}
				cnum = int(strmid(splitword, 6, strlen(splitword) - 6))
				if ( cnum < 0 | cnum >= length(cdata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = cdata(cnum, convert_word_prm1)
					splitword = ""
					break
				}
				splitword = "" + cdata(cnum, convert_word_prm1)
				break
			}
			if ( strmid(splitword, 0, 4) == "cbit" & strlen(splitword) > 4 ) {
				cnum = int(strmid(splitword, 4, strlen(splitword) - 4))
				if ( cnum < 0 | cnum >= 50 * 32 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 4 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 4 + 1 + cope + 3, strlen(splitword) - (4 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = cbit(cnum, CHARA_PLAYER)
					splitword = ""
					break
				}
				splitword = "" + cbit(cnum, CHARA_PLAYER)
				break
			}
			if ( strmid(splitword, 0, 5) == "ccbit" & strlen(splitword) > 5 ) {
				if ( convert_word_prm0 == (-1) ) {
					splitword = ""
					break
				}
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= 50 * 32 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = cbit(cnum, convert_word_prm0)
					splitword = ""
					break
				}
				splitword = "" + cbit(cnum, convert_word_prm0)
				break
			}
			if ( strmid(splitword, 0, 5) == "tcbit" & strlen(splitword) > 5 ) {
				if ( convert_word_prm1 == (-1) ) {
					splitword = ""
					break
				}
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= 50 * 32 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = cbit(cnum, convert_word_prm1)
					splitword = ""
					break
				}
				splitword = "" + cbit(cnum, convert_word_prm1)
				break
			}
			if ( strmid(splitword, 0, 5) == "sdata" & strlen(splitword) > 5 ) {
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= length(sdata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = sdata(cnum, CHARA_PLAYER)
					splitword = ""
					break
				}
				splitword = "" + sdata(cnum, CHARA_PLAYER)
				break
			}
			if ( strmid(splitword, 0, 6) == "csdata" & strlen(splitword) > 6 ) {
				if ( convert_word_prm0 == (-1) ) {
					splitword = ""
					break
				}
				cnum = int(strmid(splitword, 6, strlen(splitword) - 6))
				if ( cnum < 0 | cnum >= length(sdata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = sdata(cnum, convert_word_prm0)
					splitword = ""
					break
				}
				splitword = "" + sdata(cnum, convert_word_prm0)
				break
			}
			if ( strmid(splitword, 0, 6) == "tsdata" & strlen(splitword) > 6 ) {
				if ( convert_word_prm1 == (-1) ) {
					splitword = ""
					break
				}
				cnum = int(strmid(splitword, 6, strlen(splitword) - 6))
				if ( cnum < 0 | cnum >= length(sdata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = sdata(cnum, convert_word_prm1)
					splitword = ""
					break
				}
				splitword = "" + sdata(cnum, convert_word_prm1)
				break
			}
			if ( strmid(splitword, 0, 4) == "sorg" & strlen(splitword) > 4 ) {
				cnum = int(strmid(splitword, 4, strlen(splitword) - 4))
				if ( cnum < 0 | cnum >= length(sdata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 4 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 4 + 1 + cope + 3, strlen(splitword) - (4 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = sorg(cnum, CHARA_PLAYER)
					splitword = ""
					break
				}
				splitword = "" + sorg(cnum, CHARA_PLAYER)
				break
			}
			if ( strmid(splitword, 0, 5) == "csorg" & strlen(splitword) > 5 ) {
				if ( convert_word_prm0 == (-1) ) {
					splitword = ""
					break
				}
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= length(sdata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = sorg(cnum, convert_word_prm0)
					splitword = ""
					break
				}
				splitword = "" + sorg(cnum, convert_word_prm0)
				break
			}
			if ( strmid(splitword, 0, 5) == "tsorg" & strlen(splitword) > 5 ) {
				if ( convert_word_prm1 == (-1) ) {
					splitword = ""
					break
				}
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= length(sdata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = sorg(cnum, convert_word_prm1)
					splitword = ""
					break
				}
				splitword = "" + sorg(cnum, convert_word_prm1)
				break
			}
			if ( strmid(splitword, 0, 4) == "cinv" & strlen(splitword) > 4 ) {
				cnum = int(strmid(splitword, 4, strlen(splitword) - 4))
				if ( cnum < 0 | cnum >= length(inv) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 4 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 4 + 1 + cope + 3, strlen(splitword) - (4 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( ci != (-1) ) {
						cmgbuff(onum) = inv(cnum, ci)
					}
					splitword = ""
					break
				}
				if ( ci != (-1) ) {
					splitword = "" + inv(cnum, ci)
				}
				break
			}
			if ( strmid(splitword, 0, 4) == "tinv" & strlen(splitword) > 4 ) {
				cnum = int(strmid(splitword, 4, strlen(splitword) - 4))
				if ( cnum < 0 | cnum >= length(inv) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 4 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 4 + 1 + cope + 3, strlen(splitword) - (4 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( ti != (-1) ) {
						cmgbuff(onum) = inv(cnum, ti)
					}
					splitword = ""
					break
				}
				if ( ti != (-1) ) {
					splitword = "" + inv(cnum, ti)
				}
				break
			}
			if ( strmid(splitword, 0, 4) == "winv" & strlen(splitword) > 4 ) {
				cnum = int(strmid(splitword, 4, strlen(splitword) - 4))
				if ( cnum < 0 | cnum >= length(inv) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 4 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 4 + 1 + cope + 3, strlen(splitword) - (4 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( cw != (-1) ) {
						cmgbuff(onum) = inv(cnum, cw)
					}
					splitword = ""
					break
				}
				if ( cw != (-1) ) {
					splitword = "" + inv(cnum, cw)
				}
				break
			}
			if ( strmid(splitword, 0, 4) == "ainv" & strlen(splitword) > 4 ) {
				cnum = int(strmid(splitword, 4, strlen(splitword) - 4))
				if ( cnum < 0 | cnum >= length(inv) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 4 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 4 + 1 + cope + 3, strlen(splitword) - (4 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( ammo != (-1) ) {
						cmgbuff(onum) = inv(cnum, ammo)
					}
					splitword = ""
					break
				}
				if ( ammo != (-1) ) {
					splitword = "" + inv(cnum, ammo)
				}
				break
			}
			if ( strmid(splitword, 0, 5) == "cibit" & strlen(splitword) > 5 ) {
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= 5 * 32 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( ci != (-1) ) {
						cmgbuff(onum) = ibit(cnum, ci)
					}
					splitword = ""
					break
				}
				if ( ci != (-1) ) {
					splitword = "" + ibit(cnum, ci)
				}
				break
			}
			if ( strmid(splitword, 0, 5) == "tibit" & strlen(splitword) > 5 ) {
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= 5 * 32 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( ti != (-1) ) {
						cmgbuff(onum) = ibit(cnum, ti)
					}
					splitword = ""
					break
				}
				if ( ti != (-1) ) {
					splitword = "" + ibit(cnum, ti)
				}
				break
			}
			if ( strmid(splitword, 0, 5) == "wibit" & strlen(splitword) > 5 ) {
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= 5 * 32 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( cw != (-1) ) {
						cmgbuff(onum) = ibit(cnum, cw)
					}
					splitword = ""
					break
				}
				if ( cw != (-1) ) {
					splitword = "" + ibit(cnum, cw)
				}
				break
			}
			if ( strmid(splitword, 0, 5) == "aibit" & strlen(splitword) > 5 ) {
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= 5 * 32 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( ammo != (-1) ) {
						cmgbuff(onum) = ibit(cnum, ammo)
					}
					splitword = ""
					break
				}
				if ( ammo != (-1) ) {
					splitword = "" + ibit(cnum, ammo)
				}
				break
			}
			if ( strmid(splitword, 0, 4) == "kill" & strlen(splitword) > 4 ) {
				cnum = int(strmid(splitword, 4, strlen(splitword) - 4))
				if ( cnum < 0 | cnum >= length2(npcmemory) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 4 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 4 + 1 + cope + 3, strlen(splitword) - (4 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = npcmemory(0, cnum)
					splitword = ""
					break
				}
				splitword = "" + npcmemory(0, cnum)
				break
			}
			if ( strmid(splitword, 0, 4) == "item" & strlen(splitword) > 4 ) {
				cnum = int(strmid(splitword, 4, strlen(splitword) - 4))
				if ( cnum < 0 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 4 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 4 + 1 + cope + 3, strlen(splitword) - (4 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = mma_itemcount(0, cnum, "")
					splitword = ""
					break
				}
				splitword = "" + mma_itemcount(0, cnum, "")
				break
			}
			if ( strmid(splitword, 0, 5) == "citem" & strlen(splitword) > 5 ) {
				if ( convert_word_prm0 == (-1) ) {
					splitword = ""
					break
				}
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = mma_itemcount(convert_word_prm0, cnum, "")
					splitword = ""
					break
				}
				splitword = "" + mma_itemcount(convert_word_prm0, cnum, "")
				break
			}
			if ( strmid(splitword, 0, 5) == "titem" & strlen(splitword) > 5 ) {
				if ( convert_word_prm1 == (-1) ) {
					splitword = ""
					break
				}
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = mma_itemcount(convert_word_prm1, cnum, "")
					splitword = ""
					break
				}
				splitword = "" + mma_itemcount(convert_word_prm1, cnum, "")
				break
			}
			if ( strmid(splitword, 0, 5) == "fitem" & strlen(splitword) > 5 ) {
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = mma_itemcount(-1, cnum, "")
					splitword = ""
					break
				}
				splitword = "" + mma_itemcount(-1, cnum, "")
				break
			}
			if ( strmid(splitword, 0, 4) == "char" & strlen(splitword) > 4 ) {
				cnum = int(strmid(splitword, 4, strlen(splitword) - 4))
				if ( cnum < 0 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 4 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 4 + 1 + cope + 3, strlen(splitword) - (4 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = mma_charcount(cnum, "")
					splitword = ""
					break
				}
				splitword = "" + mma_charcount(cnum, "")
				break
			}
			if ( strmid(splitword, 0, 5) == "enemy" & strlen(splitword) > 5 ) {
				cgdatatarget = convert_word_prm2
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = mma_enemycount(cgdatatarget, cnum)
					splitword = ""
					break
				}
				splitword = "" + mma_enemycount(cgdatatarget, cnum)
				break
			}
			if ( strmid(splitword, 0, 5) == "dchar" & strlen(splitword) > 5 ) {
				cgdatatarget = convert_word_prm2
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = mma_dcharcount(cgdatatarget, cnum)
					splitword = ""
					break
				}
				splitword = "" + mma_dcharcount(cgdatatarget, cnum)
				break
			}
			if ( strmid(splitword, 0, 4) == "dist" & strlen(splitword) >= 4 ) {
				if ( convert_word_prm0 == (-1) ) {
					splitword = ""
					break
				}
				if ( convert_word_prm1 == (-1) ) {
					splitword = ""
					break
				}
				cnum = int(strmid(splitword, 4, strlen(splitword) - 4))
				if ( cnum < 0 | cnum >= length(sdata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 4 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 4 + 1 + cope + 3, strlen(splitword) - (4 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = dist(cX(convert_word_prm0), cY(convert_word_prm0), cX(convert_word_prm1), cY(convert_word_prm1))
					splitword = ""
					break
				}
				splitword = "" + dist(cX(convert_word_prm0), cY(convert_word_prm0), cX(convert_word_prm1), cY(convert_word_prm1))
				break
			}
			if ( strmid(splitword, 0, 5) == "cdist" & strlen(splitword) >= 5 ) {
				if ( convert_word_prm0 == (-1) ) {
					splitword = ""
					break
				}
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= length(sdata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = dist(cX(CHARA_PLAYER), cY(CHARA_PLAYER), cX(convert_word_prm0), cY(convert_word_prm0))
					splitword = ""
					break
				}
				splitword = "" + dist(cX(CHARA_PLAYER), cY(CHARA_PLAYER), cX(convert_word_prm0), cY(convert_word_prm0))
				break
			}
			if ( strmid(splitword, 0, 5) == "tdist" & strlen(splitword) >= 5 ) {
				if ( convert_word_prm1 == (-1) ) {
					splitword = ""
					break
				}
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= length(sdata) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = dist(cX(CHARA_PLAYER), cY(CHARA_PLAYER), cX(convert_word_prm1), cY(convert_word_prm1))
					splitword = ""
					break
				}
				splitword = "" + dist(cX(CHARA_PLAYER), cY(CHARA_PLAYER), cX(convert_word_prm1), cY(convert_word_prm1))
				break
			}
			if ( strmid(splitword, 0, 4) == "time" & strlen(splitword) > 4 ) {
				cnum = int(strmid(splitword, 4, strlen(splitword) - 4))
				if ( cnum < 0 | cnum > 7 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 4 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 4 + 1 + cope + 3, strlen(splitword) - (4 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = gettime(cnum)
					splitword = ""
					break
				}
				splitword = "" + gettime(cnum)
				break
			}
			if ( strmid(splitword, 0, 6) == "tlbuff" & strlen(splitword) > 6 ) {
				cnum = int(strmid(splitword, 6, strlen(splitword) - 6))
				if ( cnum < 0 | cnum >= 10 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "add")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					ocdata(cnum + 130, convert_word_prm0) += onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "sub")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					ocdata(cnum + 130, convert_word_prm0) -= onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "mpl")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					ocdata(cnum + 130, convert_word_prm0) *= onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "div")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum != 0 ) {
						ocdata(cnum + 130, convert_word_prm0) /= onum
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "mod")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum != 0 ) {
						ocdata(cnum + 130, convert_word_prm0) \= onum
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "set")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					ocdata(cnum + 130, convert_word_prm0) = onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "rnd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum > 0 ) {
						ocdata(cnum + 130, convert_word_prm0) = rnd(onum) + 1
					}
					else {
						ocdata(cnum + 130, convert_word_prm0) = 0
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = ocdata(cnum + 130, convert_word_prm0)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pop")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					ocdata(cnum + 130, convert_word_prm0) = cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pad")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					ocdata(cnum + 130, convert_word_prm0) += cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psb")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					ocdata(cnum + 130, convert_word_prm0) -= cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pmp")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					ocdata(cnum + 130, convert_word_prm0) *= cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pdv")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( cmgbuff(onum) != 0 ) {
						ocdata(cnum + 130, convert_word_prm0) /= cmgbuff(onum)
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pmd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( cmgbuff(onum) != 0 ) {
						ocdata(cnum + 130, convert_word_prm0) \= cmgbuff(onum)
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "prd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					ocdata(cnum + 130, convert_word_prm0) = 0
					if ( cmgbuff(onum) > 0 ) {
						ocdata(cnum + 130, convert_word_prm0) = rnd(cmgbuff(onum)) + 1
					}
					splitword = ""
					break
				}
				splitword = "" + ocdata(cnum + 130, convert_word_prm0)
				break
			}
			if ( strmid(splitword, 0, 6) == "tlbuff" & strlen(splitword) > 6 ) {
				cnum = int(strmid(splitword, 6, strlen(splitword) - 6))
				if ( cnum < 0 | cnum >= 10 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "add")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					ocdata(cnum + 130, convert_word_prm1) += onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "sub")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					ocdata(cnum + 130, convert_word_prm1) -= onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "mpl")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					ocdata(cnum + 130, convert_word_prm1) *= onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "div")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum != 0 ) {
						ocdata(cnum + 130, convert_word_prm1) /= onum
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "mod")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum != 0 ) {
						ocdata(cnum + 130, convert_word_prm1) \= onum
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "set")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					ocdata(cnum + 130, convert_word_prm1) = onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "rnd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum > 0 ) {
						ocdata(cnum + 130, convert_word_prm1) = rnd(onum) + 1
					}
					else {
						ocdata(cnum + 130, convert_word_prm1) = 0
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = ocdata(cnum + 130, convert_word_prm1)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pop")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					ocdata(cnum + 130, convert_word_prm1) = cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pad")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					ocdata(cnum + 130, convert_word_prm1) += cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psb")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					ocdata(cnum + 130, convert_word_prm1) -= cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pmp")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					ocdata(cnum + 130, convert_word_prm1) *= cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pdv")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( cmgbuff(onum) != 0 ) {
						ocdata(cnum + 130, convert_word_prm1) /= cmgbuff(onum)
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pmd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( cmgbuff(onum) != 0 ) {
						ocdata(cnum + 130, convert_word_prm1) \= cmgbuff(onum)
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "prd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					ocdata(cnum + 130, convert_word_prm1) = 0
					if ( cmgbuff(onum) > 0 ) {
						ocdata(cnum + 130, convert_word_prm1) = rnd(cmgbuff(onum)) + 1
					}
					splitword = ""
					break
				}
				splitword = "" + ocdata(cnum + 130, convert_word_prm1)
				break
			}
			if ( strmid(splitword, 0, 6) == "plbuff" & strlen(splitword) > 6 ) {
				cnum = int(strmid(splitword, 6, strlen(splitword) - 6))
				if ( cnum < 0 | cnum >= 10 ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "add")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					ocdata(cnum + 130, 0) += onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "sub")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					ocdata(cnum + 130, 0) -= onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "mpl")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					ocdata(cnum + 130, 0) *= onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "div")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum != 0 ) {
						ocdata(cnum + 130, 0) /= onum
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "mod")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum != 0 ) {
						ocdata(cnum + 130, 0) \= onum
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "set")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					ocdata(cnum + 130, 0) = onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "rnd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum > 0 ) {
						ocdata(cnum + 130, 0) = rnd(onum) + 1
					}
					else {
						ocdata(cnum + 130, 0) = 0
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = ocdata(cnum + 130, 0)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pop")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					ocdata(cnum + 130, 0) = cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pad")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					ocdata(cnum + 130, 0) += cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psb")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					ocdata(cnum + 130, 0) -= cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pmp")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					ocdata(cnum + 130, 0) *= cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pdv")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( cmgbuff(onum) != 0 ) {
						ocdata(cnum + 130, 0) /= cmgbuff(onum)
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pmd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( cmgbuff(onum) != 0 ) {
						ocdata(cnum + 130, 0) \= cmgbuff(onum)
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "prd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					ocdata(cnum + 130, 0) = 0
					if ( cmgbuff(onum) > 0 ) {
						ocdata(cnum + 130, 0) = rnd(cmgbuff(onum)) + 1
					}
					splitword = ""
					break
				}
				splitword = "" + ocdata(cnum + 130, 0)
				break
			}
			if ( strmid(splitword, 0, 5) == "pdata" & strlen(splitword) > 5 ) {
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				if ( cnum < 0 | cnum >= length(cmgbuff) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "add")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					cmgbuff(cnum) += onum
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "sub")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					cmgbuff(cnum) -= onum
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "mpl")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					cmgbuff(cnum) *= onum
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "div")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum != 0 ) {
						cmgbuff(cnum) /= onum
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "mod")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum != 0 ) {
						cmgbuff(cnum) \= onum
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "set")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					cmgbuff(cnum) = onum
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "rnd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum > 0 ) {
						cmgbuff(cnum) = rnd(onum) + 1
					}
					else {
						cmgbuff(cnum) = 0
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = cmgbuff(cnum)
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "pop")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(cnum) = cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "pad")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(cnum) += cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "psb")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(cnum) -= cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "pmp")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(cnum) *= cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "pdv")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( cmgbuff(onum) != 0 ) {
						cmgbuff(cnum) /= cmgbuff(onum)
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "pmd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( cmgbuff(onum) != 0 ) {
						cmgbuff(cnum) \= cmgbuff(onum)
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 5 + 1, "prd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(cnum) = 0
					if ( cmgbuff(onum) > 0 ) {
						cmgbuff(cnum) = rnd(cmgbuff(onum)) + 1
					}
					splitword = ""
					break
				}
				splitword = "" + cmgbuff(cnum)
				break
			}
			if ( strmid(splitword, 0, 6) == "gpdata" & strlen(splitword) > 6 ) {
				cnum = int(strmid(splitword, 6, strlen(splitword) - 6))
				if ( cnum < 0 | cnum >= length(nc_cmgbuff) ) {
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "add")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					nc_cmgbuff(cnum) += onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "sub")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					nc_cmgbuff(cnum) -= onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "mpl")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					nc_cmgbuff(cnum) *= onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "div")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum != 0 ) {
						nc_cmgbuff(cnum) /= onum
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "mod")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum != 0 ) {
						nc_cmgbuff(cnum) \= onum
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "set")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					nc_cmgbuff(cnum) = onum
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "rnd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum > 0 ) {
						nc_cmgbuff(cnum) = rnd(onum) + 1
					}
					else {
						nc_cmgbuff(cnum) = 0
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = nc_cmgbuff(cnum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pop")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					nc_cmgbuff(cnum) = cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pad")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					nc_cmgbuff(cnum) += cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "psb")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					nc_cmgbuff(cnum) -= cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pmp")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					nc_cmgbuff(cnum) *= cmgbuff(onum)
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pdv")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( nc_cmgbuff(onum) != 0 ) {
						nc_cmgbuff(cnum) /= cmgbuff(onum)
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "pmd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					if ( nc_cmgbuff(onum) != 0 ) {
						nc_cmgbuff(cnum) \= cmgbuff(onum)
					}
					splitword = ""
					break
				}
				cope = instr(splitword, 6 + 1, "prd")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 6 + 1 + cope + 3, strlen(splitword) - (6 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					nc_cmgbuff(cnum) = 0
					if ( nc_cmgbuff(onum) > 0 ) {
						nc_cmgbuff(cnum) = rnd(cmgbuff(onum)) + 1
					}
					splitword = ""
					break
				}
				splitword = "" + nc_cmgbuff(cnum)
				break
			}
			if ( strmid(splitword, 0, 5) == "value" & strlen(splitword) > 5 ) {
				cnum = int(strmid(splitword, 5, strlen(splitword) - 5))
				cope = instr(splitword, 5 + 1, "psh")
				if ( cope != (-1) & strlen(splitword) > cope + 3 ) {
					onum = int(strmid(splitword, 5 + 1 + cope + 3, strlen(splitword) - (5 + 1 + cope + 3)))
					if ( onum < 0 | onum >= length(cmgbuff) ) {
						splitword = ""
						break
					}
					cmgbuff(onum) = cnum
					splitword = ""
					break
				}
			}
			if ( splitword == "punishment" ) {
				if ( isgodtalk == 0 ) {
					splitword = ""
					break
				}
				evadd 2402, 0
				splitword = ""
				break
			}
			if ( splitword == "gainfaith" ) {
				if ( isgodtalk == 0 ) {
					splitword = ""
					break
				}
				evadd 2403, 0
				splitword = ""
				break
			}
			if ( splitword == "losefaith" ) {
				if ( isgodtalk == 0 ) {
					splitword = ""
					break
				}
				evadd 2404, 0
				splitword = ""
				break
			}
			if ( splitword == "gainimp" ) {
				if ( convert_word_prm0 != (-1) ) {
					modimp convert_word_prm0, 15
					cEmoIcon(convert_word_prm0) = 17 + 100 * 3
				}
				splitword = ""
				break
			}
			if ( splitword == "lostimp" ) {
				if ( convert_word_prm0 != (-1) ) {
					modimp convert_word_prm0, -15
					cEmoIcon(convert_word_prm0) = 18 + 100 * 3
				}
				splitword = ""
				break
			}
			if ( splitword == "n" ) {
				splitword = "#n#"
				break
			}
			if ( splitword == "Ç†ÇÈ" ) {
				splitword = _aru(3)
				break
			}
			if ( splitword == "Ç™" ) {
				splitword = _ga(3)
				break
			}
			if ( splitword == "Ç©" ) {
				splitword = _ka(3)
				break
			}
			if ( splitword == "Ç©Ç»" ) {
				splitword = _kana(3)
				break
			}
			if ( splitword == "Çæ" ) {
				splitword = _da(3)
				break
			}
			if ( splitword == "ÇÊ" ) {
				splitword = _yo(3)
				break
			}
			if ( splitword == "ÇæÇ»" ) {
				splitword = _dana(3)
				break
			}
			if ( splitword == "ÇæÇÎ" ) {
				splitword = _daro(3)
				break
			}
			if ( splitword == "ÇÈ" ) {
				splitword = _ru(3)
				break
			}
			if ( splitword == "ÇÃÇæ" ) {
				splitword = _nda(3)
				break
			}
			if ( splitword == "Ç»" ) {
				splitword = _na(3)
				break
			}
			if ( splitword == "Ç≠ÇÍ" ) {
				splitword = _kure(3)
				break
			}
			if ( splitword == "Ç§" ) {
				splitword = _u(3)
				break
			}
			if ( splitword == "ÇΩÇÃÇﬁ" ) {
				splitword = _tanomu(3)
				break
			}
			if ( splitword == "åZ" ) {
				splitword = _nii(cSex(CHARA_PLAYER))
				break
			}
			if ( splitword == "cåZ" ) {
				if ( convert_word_prm0 == (-1) ) {
					splitword = _nii(0)
					break
				}
				splitword = _nii(cSex(convert_word_prm0))
				break
			}
			if ( splitword == "tåZ" ) {
				if ( convert_word_prm1 == (-1) ) {
					splitword = _nii(0)
					break
				}
				splitword = _nii(cSex(convert_word_prm1))
				break
			}
			if ( splitword == "newline" ) {
				splitword = "#n#"
				break
			}
			if ( splitword == "onii" ) {
				splitword = _onii(cSex(CHARA_PLAYER))
				break
			}
			if ( splitword == "onii2" ) {
				splitword = _onii4(cSex(CHARA_PLAYER))
				break
			}
			if ( splitword == "syujin" ) {
				splitword = _syujin(cSex(CHARA_PLAYER))
				break
			}
		loop
		convert_word_prm0 = splitword(1) + splitword + splitword(2)
	loop
	return

*convert_talk
	buff = strmid(buff, p, instr(buff, p, "%END"))
	if ( noteinfo(0) <= 1 ) {
		buff3 = ""
		notesel buff3
		noteload exedir + "data\\st_talk.txt"
		buff2 = ""
		notesel buff2
		noteload exedir + "data\\oo_talk.txt"
		buff = ""
		notesel buff
		noteload exedir + "data\\talk.txt"
		buff += "\n" + buff2 + "\n" + buff3
		if ( rnd(5) ) {
			p = instr(buff, 0, "%DEFAULT," + lang("JP", "EN"))
		}
		else {
			p = instr(buff, 0, "%O_DEFAULT," + lang("JP", "EN"))
		}
		buff = strmid(buff, p, instr(buff, p, "%END"))
	}
	notedel 0
	p = rnd(noteinfo(0))
	noteget s, p
	buff = s
	convert_word buff, cc, tc
	return

*spec_talk
	buff3 = ""
	notesel buff3
	noteload exedir + "data\\st_talk.txt"
	buff2 = ""
	notesel buff2
	noteload exedir + "data\\oo_talk.txt"
	buff = ""
	notesel buff
	noteload exedir + "data\\talk.txt"
	buff += "\n" + buff2 + "\n" + buff3
	p = instr(buff, 0, valn + "," + lang("JP", "EN"))
	gosub *convert_talk
	return

*random_talk
	buff3 = ""
	notesel buff3
	noteload exedir + "data\\st_talk.txt"
	buff2 = ""
	notesel buff2
	noteload exedir + "data\\oo_talk.txt"
	buff = ""
	notesel buff
	noteload exedir + "data\\talk.txt"
	buff += "\n" + buff2 + "\n" + buff3
	p = -1
	repeat 1
		if ( cRole(tc) == ROLE_MAID | cRole(tc) == ROLE_PET_MAID ) {
			if ( gGuest > 0 ) {
				talkref = 1
				p = instr(buff, 0, "%MAID," + lang("JP", "EN"))
				break
			}
		}
		if ( cInterest(tc) <= 0 ) {
			p = instr(buff, 0, "%BORED," + lang("JP", "EN"))
			break
		}
		if ( petcheck(tc) ) {
			p = instr(buff, 0, "%ALLY_DEFAULT," + lang("JP", "EN"))
			break
		}
		if ( cId(tc) == CREATURE_ID_PROSTITUTE | eqfaction(tc, "whole") ) {
			p = instr(buff, 0, "%BITCH," + lang("JP", "EN"))
			break
		}
		if ( cRole(tc) == ROLE_SHOP_NOYEL ) {
			p = instr(buff, 0, "%MOYER," + lang("JP", "EN"))
			break
		}
		if ( cRole(tc) == ROLE_SLAVER ) {
			p = instr(buff, 0, "%SLAVEKEEPER," + lang("JP", "EN"))
			break
		}
		if ( cRole(tc) >= (1000 /*!!!@[ROLE_SHOP_MIN @@@ ROLE_SHOP_WEAPON]@!!! */) & cRole(tc) < (2000 /*!!!@[ROLE_GUEST_BEGGAR @@@ ROLE_GUEST_MIN]@!!! */) | cRole(tc) == ROLE_GUEST_MERCHANT | cRole(tc) == ROLE_SHOP_MATERIAL | cRole(tc) == ROLE_SHOP_SPELLBOOK | cRole(tc) == ROLE_SHOP_APHRODISIAC | cRole(tc) == ROLE_SHOP_DOUJINSHI | cRole(tc) == ROLE_SHOP_UNKNOWN3104 | cRole(tc) == ROLE_SHOP_HERB_MERCHANT | cRole(tc) == ROLE_SHOP_PROSTITUTE_GUILD | cRole(tc) == ROLE_SHOP_BLACKSMITH_GUILD | cRole(tc) == ROLE_SHOP_MYSTERIOUS_PRODUCER | cRole(tc) == ROLE_SHOP_FAIRY | cRole(tc) == ROLE_SHOP_MORPHY ) {
			if ( rnd(3) ) {
				if ( rnd(5) ) {
					p = instr(buff, 0, "%SHOPKEEPER," + lang("JP", "EN"))
				}
				else {
					p = instr(buff, 0, "%O_SHOPKEEPER," + lang("JP", "EN"))
				}
				break
			}
		}
		if ( cImpression(tc) >= 100 ) {
			if ( rnd(3) == 0 ) {
				p = instr(buff, 0, "%RUMOR,LOOT," + lang("JP", "EN"))
				break
			}
		}
		if ( areaFestival(gArea ) ) {
			if ( gArea  == AREA_NOYEL ) {
				if ( rnd(3) ) {
					p = instr(buff, 0, "%FEST," + gArea  + "," + lang("JP", "EN"))
					break
				}
			}
		}
		if ( rnd(2) ) {
			if ( gArea  == 50 | gArea  == 51 | gArea  == 52 | gArea  == 53 | gArea  == 54 | gArea  == 55 ) {
				p = instr(buff, 0, "%ST_PERSONALITY," + cPersonality(tc) + "," + lang("JP", "EN"))
			}
			else {
				if ( rnd(5) ) {
					p = instr(buff, 0, "%PERSONALITY," + cPersonality(tc) + "," + lang("JP", "EN"))
				}
				else {
					p = instr(buff, 0, "%O_PERSONALITY," + cPersonality(tc) + "," + lang("JP", "EN"))
				}
			}
			break
		}
		if ( rnd(3) ) {
			if ( rnd(5) ) {
				p = instr(buff, 0, "%AREA," + gArea  + "," + lang("JP", "EN"))
			}
			else {
				p = instr(buff, 0, "%O_AREA," + gArea  + "," + lang("JP", "EN"))
			}
			break
		}
	loop
	if ( p == (-1) ) {
		if ( gArea  == 50 | gArea  == 51 | gArea  == 52 | gArea  == 53 | gArea  == 54 | gArea  == 55 ) {
			p = instr(buff, 0, "%ST_DEFAULT," + lang("JP", "EN"))
		}
		else {
			if ( rnd(5) ) {
				p = instr(buff, 0, "%DEFAULT," + lang("JP", "EN"))
			}
			else {
				p = instr(buff, 0, "%O_DEFAULT," + lang("JP", "EN"))
			}
		}
	}
	gosub *convert_talk
	return

#defcfunc cnvweight int cnvweight_arg1
	locvar_cnvweight_s = "" + abs(cnvweight_arg1) / 1000 + "." + abs(cnvweight_arg1) \ 1000 / 100 + "" + strweight
	return locvar_cnvweight_s

#defcfunc fltname int fltname_type
	if ( fltname_type == 60001 ) {
		return lang("à‰åÀ", "well")
	}
	if ( fltname_type == 57000 ) {
		return lang("êHÇ◊ï®", "food")
	}
	if ( fltname_type == 56000 ) {
		return lang("èÒ", "rods")
	}
	if ( fltname_type == 53000 ) {
		return lang("ä™ï®", "scrolls")
	}
	if ( fltname_type == 52000 ) {
		return lang("É|Å[ÉVÉáÉì", "potions")
	}
	if ( fltname_type == 64000 ) {
		return lang("ÉWÉÉÉìÉN", "junks")
	}
	if ( fltname_type == 77000 ) {
		return lang("çzêŒ", "ores")
	}
	if ( fltname_type == 60000 ) {
		return lang("â∆ãÔ", "furniture")
	}
	if ( fltname_type == 25000 ) {
		return lang("ñÓíe", "ammos")
	}
	return lang("ïsñæ", "Unknown")

*quest_info
	noteadd lang("@QM[ÉÅÉCÉìÉNÉGÉXÉg]", "@QM[Main Quest]")
	if ( flagMain >= 0 & flagMain < 30 ) {
		s1 = lang("ÉîÉFÉãÉjÅ[ÉXÇÃìÏÇ…Ç†ÇÈÉlÉtÉBÉAÇÃñ¿ã{åQÇÃÇ–Ç∆Ç¬ÅsÉåÉVÉ}ÉXÅtÇ≈ÅAâΩÇ©Ç™å©Ç¬Ç©ÇÈÇ©Ç‡ÇµÇÍÇ»Ç¢ÅB", "I should check the dungeon called Lesimas. It's located south of Vernis.")
	}
	if ( flagMain >= 30 & flagMain < 50 ) {
		s1 = lang("ívñΩèùÇïâÇ¡ÇΩêÀåÛÇ…ÅAÉpÉãÉ~ÉAÇÃÉWÉÉÉrâ§Ç÷èëä»ÇìnÇ∑ÇÊÇ§óäÇ‹ÇÍÇΩÅBÉpÉãÉ~ÉAÇ…ÇÕÅAÉîÉFÉãÉjÅ[ÉXÇ©ÇÁìåÇÃäXìπÇêiÇﬂÇŒíHÇËíÖÇØÇÈÅB", "The injured scout asked me to deliver a letter to the king of Palmia. Palmia is located east of Vernis.")
	}
	if ( flagMain >= 50 & flagMain < 60 ) {
		s1 = lang("ÉWÉÉÉrâ§Ç…ÇÊÇÈÇ∆ÅAédéñÇ™ó~ÇµÇ¢éûÇÕèÈÇÃê}èëäŸÇ…Ç¢ÇÈÉGÉäÉXÉeÉAÇñKÇÀÇÍÇŒÇ¢Ç¢ÇÊÇ§ÇæÅB", "Erystia will have some tasks for me if I want to work for Palmia. She's in the library of the castle.")
	}
	if ( flagMain >= 60 & flagMain < 100 ) {
		s1 = lang("ÉåÉVÉ}ÉXÇ…ïãÇ´ÅAñ`åØé“ÉJÉâÉÄÇ∆Ç¢Ç§êlï®ÇíTÇ∑ÇÊÇ§àÀóäÇ≥ÇÍÇΩÅBîﬁÇÕç≈í·Ç≈Ç‡ÉåÉVÉ}ÉXÇÃ16äKÇÊÇËêÊÇÃäKëwÇ…Ç¢ÇÈÇÁÇµÇ¢ÅB", "Erystia asked to look for an adventurer called Karam in the dungeon of Lesimas. He was on the 16th level of the dungeon the last time he sent a report. I may have to go deeper if I am to find him.")
	}
	if ( flagMain >= 100 & flagMain < 110 ) {
		s1 = lang("ïméÄÇÃÉJÉâÉÄÇ©ÇÁìæÇΩèÓïÒÇÅAÉpÉãÉ~ÉAÇÃÉGÉäÉXÉeÉAÇ…ì`Ç¶Ç»ÇØÇÍÇŒÇ»ÇÁÇ»Ç¢ÅB", "I need to bring information Karam gave me to Erystia at once.")
	}
	if ( flagMain >= 110 & flagMain < 125 ) {
		s1 = lang("ÉåÉVÉ}ÉXç≈â∫ëwÇÃïïàÛÇâÇ≠à◊Ç…ïKóvÇ»éOÇ¬ÇÃñÇêŒÇÃì¸éËÇàÀóäÇ≥ÇÍÇΩÅBå´é“ÇÃñÇêŒÇÕÅsé‹îMÇÃìÉÅtÇ…ÅAãé“ÇÃñÇêŒÇÕÅséÄé“ÇÃì¥åAÅtÇ…ÅAîeé“ÇÃñÇêŒÇÕÅså√èÈÅtÇ…Ç†ÇÈÅB", "I need to find 3 magic stones to break the seal of Lesimas. They can be found at the Tower of Fire, the crypt of the damned and the Ancient Castle")
	}
	if ( flagMain >= 125 & flagMain < 180 ) {
		s1 = lang("éOÇ¬ÇÃñÇêŒÇÃóÕÇ≈ç≈â∫ëwÇÃïïàÛÇâÇ´ÅAÉåÉVÉ}ÉXÇÃîÈïÛÇéùÇøãAÇÈÇÊÇ§ÉGÉäÉXÉeÉAÇ…àÀóäÇ≥ÇÍÇΩÅB", "With 3 magic stones I have, I need to get to the deepest level of Lesimas and break the seal. Then bring back an item called Hidden Artifact of Lesimas, whatever it is.")
	}
	if ( flagMain >= 180 & flagMain < 1000 ) {
		s1 = lang("ëÊàÍïîÉÅÉCÉìÉNÉGÉXÉgäÆóπ", "You have completed the main quest.")
	}
	talk_conv s1, 40 - en * 4
	buff += s1
	noteadd ""
	return

*quest_info2
	if ( val == 0 ) {
		noteadd ""
		noteadd lang("@QM[ÉTÉuÉNÉGÉXÉg]", "@QM[Sub Quest]")
	}
	p = 0
	if ( sqSlime != 0 ) {
		s = lang("Ç Ç¢ÇÆÇÈÇ›ÇéÁÇÍÅI Lv6ëäìñ", "Putit attacks Lv6")
		p = sqSlime
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉîÉFÉãÉjÅ[ÉXÇÃÉ~ÉVÉFÉXÇ…ÅAÉXÉâÉCÉÄÇÃëﬁé°ÇóäÇ‹ÇÍÇΩÅBÉXÉâÉCÉÄÇÃëÉåAÇÕÅAÉ~ÉVÉFÉXÇÃâ∆ÇÃÇ∑ÇÆìÏÇÃâ∆ÇÃÇÊÇ§ÇæÅB", "Miches of Vernis asked me to investigate the house just south of her home.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("ÉîÉFÉãÉjÅ[ÉXÇÃÉ~ÉVÉFÉXÇ…óäÇ‹ÇÍÇΩÉXÉâÉCÉÄÇÃëﬁé°ÇäÆóπÇµÇΩÅBÇ†Ç∆ÇÕïÒçêÇ∑ÇÈÇæÇØÇæÅB", "I've wiped out the putit's nest. I have to visit Miches of Vernis to report it.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqRogue != 0 ) {
		s = lang("Ç®éìDñ_ Lv2ëäìñ", "Thieves' hideout Lv2")
		p = sqRogue
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉîÉFÉãÉjÅ[ÉXÇÃÉVÅ[ÉiÇ™ãŒÇﬂÇÈéèÍÇ…ÅAéìDñ_Ç™ïpèoÇµÇƒÇ¢ÇÈÇÁÇµÇ¢ÅBìêëØícÇâÛñ≈Ç≥ÇπÇƒÉVÅ[ÉiÇ…ïÒçêÇµÇÊÇ§ÅB", "Bandits have been stealing things in Vernis. I need to find and destroy their hideout.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("éíMÇìêÇÒÇ≈Ç¢ÇΩÇ≤ÇÎÇ¬Ç´ícÇürñ≈ÇµÇΩÅBÇ†Ç∆ÇÕÉîÉFÉãÉjÅ[ÉXÇÃÉVÅ[ÉiÇ…ïÒçêÇ∑ÇÈÇæÇØÇæÅB", "Those bandits are no more. All I have to do now is bring the news to Shena of Vernis.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqDog != 0 ) {
		s = lang("ñ¿éqÇÃéqå¢ Lv4ëäìñ", "Puppy's cave Lv4")
		p = sqDog
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉîÉFÉãÉjÅ[ÉXÇÃÉäÉäÉAÉìÇ…ÅAñ¿éqÇÃéqå¢É|ÉsÅ[Çë{Ç∑ÇÊÇ§óäÇ‹ÇÍÇΩÅBÇ«Ç§Ç‚ÇÁéqå¢ÇÕÉîÉFÉãÉjÅ[ÉXÇÃÇ∑ÇÆìåÇ…Ç†ÇÈì¥åAÇ…Ç¢ÇÈÇÁÇµÇ¢ÅB", "Rilian of Vernis asked me to find her puppy named poppy in the puppy's cave located east of Vernis.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqNightmare != 0 ) {
		s = lang("é¿å±èÍÇÃÉiÉCÉgÉÅÉA Lv50ëäìñ", "Nightmare Lv50")
		p = sqNightmare
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉîÉFÉãÉjÅ[ÉXÇÃÉçÉCÉ^Å[Ç…ã‡Ç…Ç»ÇÈédéñÇéùÇøÇ©ÇØÇÁÇÍÇΩÅBâΩÇ‚ÇÁäÎåØÇ»édéñÇÃÇÊÇ§ÇæÅBñúëSÇÃèÄîıÇêÆÇ¶ÇƒÇ©ÇÁÉçÉCÉ^Å[Ç…òbÇµä|ÇØÇÊÇ§ÅB", "Loyter of Vernis has a dangerous, yet highly profitable job for me. I need to prepare well before talking to him again.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("é¿å±èÍÇÃëSÇƒÇÃìGÇürñ≈ÇµÇ»ÇØÇÍÇŒÇ»ÇÁÇ»Ç¢ÅB", "I need to eliminate all of the monsters in the test ground.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("é¿å±Çê∂Ç´âÑÇ—ÇƒäÆóπÇ≥ÇπÇΩÅBÉîÉFÉãÉjÅ[ÉXÇÃÉçÉCÉ^Å[Ç…ïÒçêÇµÇÊÇ§ÅB", "I've survived the nightmare. Now to meet Loyer of Vernis to receive the reward.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqMother != 0 ) {
		s = lang("ÉGÅ[ÉeÉãïaÇé°Çπ Lv20ëäìñ", "Pael and her mom Lv20")
		p = sqMother
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉmÉCÉGÉãÇÃÉpÉGÉãÇ…ÉGÅ[ÉeÉãçRëÃÇìnÇµÇΩÅBïÍêeÇÃóeë‘Ç…ïœâªÇ™Ç†ÇÁÇÌÇÍÇÈÇÃÇë“Ç∆Ç§ÅB", "Pael's mother is suffering from Ether Disease and I gave Pael a potion of cure corruption in Noyel. Let's wait until the condition of her mother changes.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("ÉmÉCÉGÉãÇÃÉpÉGÉãÇÃïÍêeÇÃóeë‘Ç™ïœÇÌÇ¡ÇΩÇÊÇ§ÇæÅBç°ìxå©ïëÇ¢Ç…Ç¢Ç¡ÇΩÇŸÇ§Ç™Ç¢Ç¢Ç©Ç‡ÇµÇÍÇ»Ç¢ÅB", "There's a change in the condition of Pael's mother. I should go check her when I have time.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("ÉmÉCÉGÉãÇÃÉpÉGÉãÇ…ÉGÅ[ÉeÉãçRëÃÇìnÇµÇΩÅBïÍêeÇÃóeë‘Ç…ïœâªÇ™Ç†ÇÁÇÌÇÍÇÈÇÃÇë“Ç∆Ç§ÅB", "Pael's mother is suffering from Ether Disease and I gave Pael a potion of cure corruption in Noyel. Let's wait until the condition of her mother changes.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 4 ) {
			s1 = lang("ÉmÉCÉGÉãÇÃÉpÉGÉãÇÃïÍêeÇÃóeë‘Ç™ïœÇÌÇ¡ÇΩÇÊÇ§ÇæÅBç°ìxå©ïëÇ¢Ç…Ç¢Ç¡ÇΩÇŸÇ§Ç™Ç¢Ç¢Ç©Ç‡ÇµÇÍÇ»Ç¢ÅB", "There's a change in the condition of Pael's mother. I should go check her when I have time.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 5 ) {
			s1 = lang("ÉmÉCÉGÉãÇÃÉpÉGÉãÇ…ÉGÅ[ÉeÉãçRëÃÇìnÇµÇΩÅBïÍêeÇÃóeë‘Ç…ïœâªÇ™Ç†ÇÁÇÌÇÍÇÈÇÃÇë“Ç∆Ç§ÅB", "Pael's mother is suffering from Ether Disease and I gave Pael a potion of cure corruption in Noyel. Let's wait until the condition of her mother changes.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 6 ) {
			s1 = lang("ÉmÉCÉGÉãÇÃÉpÉGÉãÇÃïÍêeÇÃóeë‘Ç™ïœÇÌÇ¡ÇΩÇÊÇ§ÇæÅBç°ìxå©ïëÇ¢Ç…Ç¢Ç¡ÇΩÇŸÇ§Ç™Ç¢Ç¢Ç©Ç‡ÇµÇÍÇ»Ç¢ÅB", "There's a change in the condition of Pael's mother. I should go check her when I have time.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 7 ) {
			s1 = lang("ÉmÉCÉGÉãÇÃÉpÉGÉãÇ…ÉGÅ[ÉeÉãçRëÃÇìnÇµÇΩÅBïÍêeÇÃóeë‘Ç…ïœâªÇ™Ç†ÇÁÇÌÇÍÇÈÇÃÇë“Ç∆Ç§ÅB", "Pael's mother is suffering from Ether Disease and I gave Pael a potion of cure corruption in Noyel. Let's wait until the condition of her mother changes.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 8 ) {
			s1 = lang("ÉmÉCÉGÉãÇÃÉpÉGÉãÇÃïÍêeÇÃóeë‘Ç™ïœÇÌÇ¡ÇΩÇÊÇ§ÇæÅBç°ìxå©ïëÇ¢Ç…Ç¢Ç¡ÇΩÇŸÇ§Ç™Ç¢Ç¢Ç©Ç‡ÇµÇÍÇ»Ç¢ÅB", "There's a change in the condition of Pael's mother. I should go check her when I have time.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 9 ) {
			s1 = lang("ÉmÉCÉGÉãÇÃÉpÉGÉãÇ…ÉGÅ[ÉeÉãçRëÃÇìnÇµÇΩÅBïÍêeÇÃóeë‘Ç…ïœâªÇ™Ç†ÇÁÇÌÇÍÇÈÇÃÇë“Ç∆Ç§ÅB", "Pael's mother is suffering from Ether Disease and I gave Pael a potion of cure corruption in Noyel. Let's wait until the condition of her mother changes.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 10 ) {
			s1 = lang("ÉmÉCÉGÉãÇÃÉpÉGÉãÇÃïÍêeÇÃóeë‘Ç™ïœÇÌÇ¡ÇΩÇÊÇ§ÇæÅBç°ìxå©ïëÇ¢Ç…Ç¢Ç¡ÇΩÇŸÇ§Ç™Ç¢Ç¢Ç©Ç‡ÇµÇÍÇ»Ç¢ÅB", "There's a change in the condition of Pael's mother. I should go check her when I have time.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqWife != 0 ) {
		s = lang("â≈ìDñ_ Lv3ëäìñ", "Wife collector Lv3")
		p = sqWife
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉJÉvÅ[ÉãÇÃÉâÉtÉ@ÉGÉçÇ…â≈ÇéùÇ¡ÇƒÇ≠ÇÈÇÊÇ§óäÇ‹ÇÍÇΩÅBÇ»ÇÒÇ∆Ç¢Ç§â∫óÚÇ»íjÇæÅB", "I was asked by Raphael of Port Kapul to bring my wife. What a moron.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqCat != 0 ) {
		s = lang("îLëﬁé° Lv25ëäìñ", "Cat house Lv25")
		p = sqCat
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉàÉEÉBÉìÇÃÉ^ÉÄÇ…ÅAâ∆ÇÃîLëﬁé°ÇàÀóäÇ≥ÇÍÇΩÅBâ∆ÇÕìÏÇÃî®ÇÃÇ†ÇΩÇËÇ…Ç†ÇÈÇªÇ§ÇæÅB", "Tam of Yowyn asked me to eliminate the cats in his house. The house is located southern part of Yowyn.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("É^ÉÄÇÃâ∆ÇÃíÜÇÃîLÇëﬁé°ÇµÇΩÅBÇ†Ç∆ÇÕÉàÉEÉBÉìÇ≈É^ÉÄÇ…ïÒçêÇ∑ÇÈÇæÇØÇæÅB", "I've freed Tam's house from the cats. To get the reward, I need to speak Tam again in Yowyn.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqWar != 0 ) {
		s = lang("ñhâqêÌê¸ÇÃéÄì¨ Lv17ëäìñ", "Defense line Lv17")
		p = sqWar
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉàÉEÉBÉìÇÃÉMÉãÉoÅ[ÉgëÂç≤Ç…ÅAÉWÉÖÅ[ÉAâï˙åRÇÃâáåÏÇãÅÇﬂÇÁÇÍÇΩÅBèÄîıÇ™êÆÇ¢éüëÊÅAëÂç≤Ç…òbÇµä|ÇØÇÊÇ§ÅB", "Colonel Gilbert of Yowyn asked me to help the Juere freedom force fight the Yerles Army. I should speak to him again when I'm ready.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("ÉCÉFÉãÉXÇÃñhâqåRÇürñ≈ÇµÇ»ÇØÇÍÇŒÇ»ÇÁÇ»Ç¢ÅB", "I need to destroy the Yerles Army.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("ñhâqê¸Çå©éñÇ…ìÀîjÇµÇΩÅBÉàÉEÉBÉìÇÃÉMÉãÉoÅ[ÉgëÂç≤Ç…ïÒçêÇµÇÊÇ§ÅB", "I've won the war. Now to bring the good news to colonel Gilbert.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqYeek != 0 ) {
		s = lang("ãRémè∏äiééå±ÇÃéËì`Ç¢ Lv8ëäìñ", "Novice knightLv8")
		p = sqYeek
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉàÉEÉBÉìÇÃÉAÉCÉìÉNÇ…ãRémè∏äiééå±ÇÃéËì`Ç¢ÇóäÇ‹ÇÍÇΩÅBÉàÉEÉBÉìÇÃêºÇ…Ç†ÇÈÉCÅ[ÉNÇÃì¥åAÇ…èZÇﬁÉCÅ[ÉNÇÃéÒóÃÇì|ÇπÇŒÇ¢Ç¢ÇªÇ§ÇæÅB", "Ainc of Yowyn asked me to help his promotion task. I need to enter the Yeek's dungeon which is located west of Yowyn and kill the chief.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("ÉCÅ[ÉNÇÃéÒóÃÇñ≥éñì¢î∞ÇµÇΩÅBÉàÉEÉBÉìÇÃÉAÉCÉìÉNÇ…ïÒçêÇµÇÊÇ§ÅB", "I've defeated the chief of Yeek. I should head back to Yowyn and report to Ainc.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqKamikaze != 0 ) {
		s = lang("ÉJÉ~ÉJÉ[ì¡çUë‡ Lv14ëäìñ", "Kamikaze attack Lv14")
		p = sqKamikaze
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉJÉvÅ[ÉãÇÃÉAÅ[ÉmÉãÉhÇ…ÅAÉJÉ~ÉJÉ[ì¡çUë‡Ç…ëœÇ¶ÇÈÉpÉãÉ~ÉAåRÇ÷ÇÃâáåRÇóäÇ‹ÇÍÇΩÅBèÄîıÇ™êÆÇ¢éüëÊÅAÉAÅ[ÉmÉãÉhÇ…òbÇµä|ÇØÇÊÇ§ÅB", "Arnord of Port Kapul asked me to help the isolated Palmian 10th regiment from massive Kamikaze attacks. I should prepare and speak to Arnord when ready.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("ÉpÉãÉ~ÉAåRÇ™ìPëﬁÇäÆóπÇ∑ÇÈÇ‹Ç≈ÇÃä‘ÅAÉJÉ~ÉJÉ[ì¡çUë‡ÇÃñ“çUÇ…ëœÇ¶Ç»ÇØÇÍÇŒÇ»ÇÁÇ»Ç¢ÅBÉpÉãÉ~ÉAåRÇ™ìPëﬁÇµÇΩÇÁÅAímÇÁÇπÇ™ì¸ÇÈÇÕÇ∏ÇæÅB", "I have to hold the battle line to gain time while the Palmian army retreats. A messenger will inform me when it's done.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 3 ) {
			s1 = lang("ÉJÉ~ÉJÉ[ì¡çUë‡ÇÃñ“çUÇ…ëœÇ¶Ç´Ç¡ÇΩÅBÉJÉvÅ[ÉãÇÃÉAÅ[ÉmÉãÉhÇ…ïÒçêÇµÇÊÇ§ÅB", "I survived the kamikaze attack. I have to bring the good news to Arnord of Port Kapul.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqSilverCat != 0 ) {
		s = lang("É~Å[ÉAÇÃñ≤ Lv1ëäìñ", "Mia's dream Lv1")
		p = sqSilverCat
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉpÉãÉ~ÉAÇÃÉ~Å[ÉAÇÕÅAãHè≠îLÉVÉãÉoÅ[ÉLÉÉÉbÉgÇ™ó~ÇµÇ¢ÇÁÇµÇ¢ÅBÇ»ÇÒÇ∆Ç©ïﬂÇ‹Ç¶ÇƒÅAÉ~Å[ÉAÇ…ìnÇªÇ§ÅB", "Mia of Palmia wants a silver cat, a very rare cat. If I happen to capture one, I should bring it to Mia.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqVein != 0 ) {
		s = lang("å∂ÇÃäGñ{ Lv12ëäìñ", "Rare books Lv12")
		p = sqVein
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉãÉ~ÉGÉXÉgÇÃÉåÉìÉgÉìÇ™ÅAÉåÉCÉ`ÉFÉãÇ∆Ç¢Ç§ì∂òbçÏâ∆Ç…ÇÊÇ¡Çƒï`Ç©ÇÍÇΩäGñ{ÇíTÇµÇƒÇ¢ÇÈÅBäGñ{ÇÕëSïîÇ≈4ä™Ç†ÇÈÇÁÇµÇ¢ÅBëSÇƒå©Ç¬ÇØÇΩÇÁÅAÉåÉìÉgÉìÇ…ïÒçêÇµÇÊÇ§ÅB", "Renton of Lumiest is looking for the fairy tale books written by Rachael. I should bring it to him if I happen to find one. There're total of 4 books in the series.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqPyramid != 0 ) {
		s = lang("ÉsÉâÉ~ÉbÉhÇ©ÇÁÇÃíßêÌèÛ Lv16ëäìñ", "Pyramid trial Lv16")
		p = sqPyramid
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉsÉâÉ~ÉbÉhÇ…èoì¸ÇËÇ∑ÇÈéëäiÇìæÇΩÅBÉsÉâÉ~ÉbÉhÇÕÉJÉvÅ[ÉãÇÃñkÇ…Ç†ÇËÅAíÜÇ…ÇÕå√ë„ÇÃîÈïÛÇ™ñ∞Ç¡ÇƒÇ¢ÇÈÇ∆Ç¢ÇÌÇÍÇƒÇ¢ÇÈÅB", "I've got a invitation to the pyramid. The pyramid is located north of Port Kapul and it is rumored that it holds great treasure.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqNuke != 0 ) {
		s = lang("ÉpÉãÉ~ÉAÇ…ê‘Ç¢â‘Ç Lv14ëäìñ", "Red blossom in Palmia Lv14")
		p = sqNuke
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("É_ÉãÉtÉBÇÃÉmÉGÉãÇ…ÉpÉãÉ~ÉAÇÃäXÇ…îöíeÇÇµÇ©ÇØÇÈÇÊÇ§Ç…àÀóäÇ≥ÇÍÇΩÅBîöíeÇÉpÉãÉ~ÉAÇÃèhâÆÇÃïîâÆÇ…Ç†ÇÈÇ Ç¢ÇÆÇÈÇ›Ç…ÇµÇ©ÇØÇÊÇ§ÅB", "Noel of Derphy asked me to set up a bomb in Palmia. I need to place it right on the teddy bear in the inn.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("å©éñÇ…ÉpÉãÉ~ÉAÇâÛñ≈Ç≥ÇπÇΩÅBÇ†Ç∆ÇÕÉ_ÉãÉtÉBÇÃÉmÉGÉãÇÃå≥Ç…ñﬂÇËÅAïÒçêÇ∑ÇÈÇæÇØÇæÅB", "I have successfully destroyed Palmia. Now all I need to report back to Noel in Derphy.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqBiologist != 0 ) {
		s = lang("ê∂âªäwé“ÇÃñÏñ] Lv5ëäìñ", "Ambitious scientist Lv5")
		p = sqBiologist
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == sqBiologist * (sqBiologist < 6) + (sqBiologist == 0) ) {
			s1 = lang("ÉJÉvÅ[ÉãÇÃÉCÉRÅ[ÉãÇ…ÅAé¿å±ópÇÃê∂ï®5ëÃÇÃïﬂälÇóäÇ‹ÇÍÇΩÅBàÀóäïiÅAÉÇÉìÉXÉ^Å[É{Å[ÉãÇ…ïﬂälÇµÇΩÇ‡ÇÃÇ≈Ç»Ç≠ÇƒÇÕÇ»ÇÁÇ»Ç¢ÅBÇ†Ç∆" + (6 - sqBiologist) + "å¬ÇÃïﬂälçœÇ›ÉÇÉìÉXÉ^Å[É{Å[ÉãÇìÕÇØÇÈïKóvÇ™Ç†ÇÈÅB", "Icolle of Port Kapul asked me to bring 5 filled monster balls. I still need to bring him " + (6 - sqBiologist) + " of them.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqSewer != 0 ) {
		s = lang("â∫êÖìπëÂçÏêÌ Lv23ëäìñ", "Sewer sweeping Lv23")
		p = sqSewer
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉãÉ~ÉGÉXÉgÇÃÉoÉãÉUÉbÉNÇ…ÅAâ∫êÖìπÇÃê¥ë|ÇóäÇ‹ÇÍÇΩÅBâ∫êÖìπÇÃì¸ÇËå˚ÇÕèhâÆÇÃãﬂÇ≠Ç…Ç†ÇÈÇ›ÇΩÇ¢ÇæÅBÅB", "Balzak of Lumiest wants me to sweep the entire sewer. I can find the entrance to the sewer around the inn.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("â∫êÖìπÇÃëÂë|èúÇäÆóπÇµÇΩÅBÇ†Ç∆ÇÕÉãÉ~ÉGÉXÉgÇÃÉoÉãÉUÉbÉNÇ…ïÒçêÇ∑ÇÈÇæÇØÇæÅB", "I've finished sweeping the sewer. I need to report it to Balzak of Lumiest.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( ncgQuestThePassionOfTheEggShop != 0 ) {
		s = lang("óëâÆÇ≥ÇÒÇÃéÛìÔ Lv50ëäìñ", "The Passion of the Egg Shop Lv50")
		p = ncgQuestThePassionOfTheEggShop
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉVÅ[ÉNÉåÉbÉgÉ]Å[ÉìÇÃóëâÆÇ≥ÇÒÇÃódê∏Ç…ÅA" + refchara(ncgQuestThePassionOfTheEggShopEggType, DBSPEC_CHARA_NAME_ORG, 1) + "ÇÃóëÇ10å¬èWÇﬂÇƒéùÇ¡ÇƒÇ¢Ç¡ÇƒÇ†Ç∞ÇÊÇ§ÅB", "Collect 10 " + refchara(ncgQuestThePassionOfTheEggShopEggType, DBSPEC_CHARA_NAME_ORG, 1) + " eggs and take them to the egg shop fairy in the Secret Zone.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( ncgQuestNewcomersProblems != 0 ) {
		s = lang("êVêlÇÃÇ®îYÇ› Lv5ëäìñ", "Newcomer's problems Lv5")
		p = ncgQuestNewcomersProblems
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 10 ) {
			s1 = lang("ÉgÅ[É}ÉbÉgÇÃÉ~ÉiÇ…ÅAåÓêHÇ™éùÇ¡ÇƒÇ¢ÇÈÇÊÇ§Ç»ñ£óÕÇÃÇ†ÇÈÉyÉìÉ_ÉìÉgÇéùÇ¡ÇƒÇ≠ÇÈÇÊÇ§Ç…óäÇ‹ÇÍÇΩÅBÇªÇÍÇÁÇµÇ¢ï®ÇéËÇ…ì¸ÇÍÇΩÇÁÅAÉ~ÉiÇÃå≥Ç…éùÇ¡ÇƒÇ¢Ç±Ç§ÅB", "Mina in Tormat asked me to bring her a pendant with a charm that looks like something a beggar would have. When I get something that looks like it, I'll bring it to Mina.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( ncgQuestSpiritOfDistraction != 0 ) {
		s = lang("äCòHÇé◊ñÇÇ∑ÇÈê∏óÏ Lv25ëäìñ", "Spirit of Distraction Lv25")
		p = ncgQuestSpiritOfDistraction
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 10 ) {
			s1 = lang("É|Å[ÉgÅEÉZÉäÉAÇÃÉ^ÉCÉtÇ…ÅAãﬂäCÇ…åªÇÍÇΩÉjÉìÉtíBÇí¶ÇÁÇµÇﬂÇÈÇÊÇ§Ç…óäÇ‹ÇÍÇΩÅB", "Taif of Port Serria asked me to punish the nymphs who appeared in the nearby sea. Talk to Taif and let's go to the nearshore.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
		if ( p == 11 ) {
			s1 = lang("ãﬂäCÇ…åªÇÍÇΩÉjÉìÉtíBÇëSÇƒÇ‚Ç¡Ç¬ÇØÇΩÅBÉ|Å[ÉgÅEÉZÉäÉAÇÃÉ^ÉCÉtÇ…ïÒçêÇµÇÊÇ§ÅB", "Report to Taif in Port Serria.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( ncgQuestSingleCombat != 0 ) {
		s = lang("ñÔâÓé“Ç∆ÇÃàÍãRë≈Çø Lv30ëäìñ", "Single combat Lv30")
		p = ncgQuestSingleCombat
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 10 ) {
			s1 = lang("ÉJÅ[ÉäÉAÇ…Ç¢ÇÈÉiÉCÉìÉ_Çì|ÇªÇ§ÅB", "Defeat Nineda in Carlia.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
		if ( p == 11 ) {
			s1 = lang("ÉiÉCÉìÉ_Çì|ÇµÇΩÅBîﬁÇ™îáÇ¢è„Ç™Ç¡ÇƒóàÇÈÇÃÇë“Ç∆Ç§ÅB", "Defeated Nineda. Let's wait for him to come crawling up.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( ncgQuestAwaitOnesReturn != 0 ) {
		s = lang("ÇΩÇæãAÇËÇë“Ç¬ Lv30ëäìñ", "await one's return Lv30")
		p = ncgQuestAwaitOnesReturn
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("É|Å[ÉgÅEÉZÉäÉAÇ…Ç¢ÇÈÉtÉFÉìÇ…ñ`åØíkÇï∑Ç©ÇπÇΩÅBÇ‹ÇΩç°ìxâÔÇ¢Ç…çsÇ¡ÇƒÇ›ÇÊÇ§ÅB", "Told Fen in Port Serria about my adventures. I'll go see her again sometime.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
		if ( p == 2 ) {
			s1 = lang("É|Å[ÉgÅEÉZÉäÉAÇÃÉtÉFÉìÇ…ñ`åØíkÇòbÇµÇ…çsÇ±Ç§ÅB", "Go tell your adventure story to Fen in Port Serria.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
		if ( p == 3 ) {
			s1 = lang("É|Å[ÉgÅEÉZÉäÉAÇ…Ç¢ÇÈÉtÉFÉìÇ…ñ`åØíkÇï∑Ç©ÇπÇΩÅBÇ‹ÇΩç°ìxâÔÇ¢Ç…çsÇ¡ÇƒÇ›ÇÊÇ§ÅB", "Told Fen in Port Serria about my adventures. I'll go see her again sometime.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
		if ( p == 4 ) {
			s1 = lang("É|Å[ÉgÅEÉZÉäÉAÇÃÉtÉFÉìÇ…ñ`åØíkÇòbÇµÇ…çsÇ±Ç§ÅB", "Go tell your adventure story to Fen in Port Serria.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
		if ( p == 5 | p == 6 ) {
			s1 = lang("É|Å[ÉgÅEÉZÉäÉAÇ©ÇÁìåÇ…Ç†ÇÈïXåAÇ…ÉtÉFÉìÇÃÇ®ïÉÇ≥ÇÒÇíTÇµÇ…çsÇ±Ç§ÅB", "Let's go find Fen's father at the ice cave east of Port Serria.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
		if ( p == 7 ) {
			s1 = lang("ÉtÉFÉìÇÃÇ®ïÉÇ≥ÇÒÇÕéËíxÇÍÇæÇ¡ÇΩÅBÉtÉFÉìÇ…ïÒçêÇµÇ…çsÇ±Ç§ÅBîﬁèóÇîﬂÇµÇ‹ÇπÇΩÇ≠Ç»Ç¢Ç»ÇÁÅAÉuÉçÅ[É`ÇîﬁèóÇ…å©ÇπÇ»Ç¢ÇŸÇ§Ç™Ç¢Ç¢Ç©Ç‡ÇµÇÍÇ»Ç¢ÅB", "Fen's father was too late. Let's go tell Fen. If you don't want to make her sad, we might as well not show her the brooch.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( ncgQuestCreateDangerousArmor != 0 ) {
		s = lang("äÎÇ»Ç¢ëïçbÇçÏÇËèoÇπ Lv25ëäìñ", "create dangerous armor Lv25")
		p = ncgQuestCreateDangerousArmor
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉgÉâÉCÉAÉìÇ…Ç¢ÇÈÉjÉgÇÃÇΩÇﬂÇ…îöíeä‚ÇïﬂÇ‹Ç¶ÇƒéùÇ¡ÇƒÇ¢Ç±Ç§ÅB", "Let's catch a bomb rock for Nito in Trian and bring it with us.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( ncgQuestASmallExpense != 0 ) {
		s = lang("ÇøÇÂÇ¡Ç∆ÇµÇΩåoîÔ Lv10ëäìñ", "a small expense Lv10")
		p = ncgQuestASmallExpense
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉLÉIÉXÇ…Ç¢ÇÈÉWÉFÉìÇ™ëïîıÇîÉÇ§ÇΩÇﬂÇÃ50,000gpÇópà”ÇµÇƒÇ†Ç∞ÇÊÇ§ÅB", "Get you 50,000gp to buy equipment for Jen in Khios.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( ncgQuestForMyFriends != 0 ) {
		s = lang("óFÇÃà◊Ç… Lv65ëäìñ", "for my friends Lv65")
		p = ncgQuestForMyFriends
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 | p == 2 ) {
			s1 = lang("ÉLÉIÉXÇÃãﬂÇ≠Ç…èoåªÇµÇΩñYÇÍÇÁÇÍÇΩé¿å±èÍÇÃíÜÇ…Ç¢ÇÈâˆï®Çì|ÇªÇ§ÅB", "Try to defeat the monster in the forgotten laboratory that has appeared near Khios.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
		if ( p == 3 ) {
			s1 = lang("ñYÇÍÇÁÇÍÇΩé¿å±èÍÇÃâˆï®Çì|ÇµÇΩÅBÉLÉIÉXÇ…Ç¢ÇÈÉWÉFÉìÇ…îÈïÛÇìnÇµÇ…çsÇ±Ç§ÅB", "Report to Jen in Khios.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqMageGuild != 0 ) {
		s = lang("ñÇèpémÉMÉãÉhêRç∏", "Joining the Mages Guild")
		p = sqMageGuild
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ñÇèpémÉMÉãÉhÇ…â¡ì¸Ç∑ÇÈÇ…ÇÕÅAÉãÉ~ÉGÉXÉgÇÃÉÅÉCÉWÉMÉãÉhÇÃî[ì¸î†Ç…ÅAâì«çœÇ›ÇÃå√èëï®Çî[ì¸ÇµÅAÉMÉãÉhÉ|ÉCÉìÉgÇíôÇﬂÇΩå„ÅAÉMÉãÉhÇÃî‘êlÇ…òbÇµÇ©ÇØÇ»ÇØÇÍÇŒÇ»ÇÁÇ»Ç¢ÅBêRç∏ÇÉNÉäÉAÇ∑ÇÈÇ…ÇÕÅAÇ†Ç∆" + flagMageGuildNorma + "ÉMÉãÉhÉ|ÉCÉìÉgÇälìæÇ∑ÇÈïKóvÇ™Ç†ÇÈÅB", "To join the Mages Guild, I need to gather " + flagMageGuildNorma + " more guild points and talk to the guild guard in Lumiest. I can earn the guild points by collecting ancients books, decrypt them, and put them into the delivery box near the guild guard.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqThiefGuild != 0 ) {
		s = lang("ìêëØÉMÉãÉhêRç∏", "Joining the Thieves Guild")
		p = sqThiefGuild
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ìêëØÉMÉãÉhÇ…â¡ì¸Ç∑ÇÈÇ…ÇÕÅAê≈ã‡Ç4Éñåéà»è„ëÿî[ÇµÇΩèÛë‘Ç≈ÅAÉ_ÉãÉtÉBÇÃÉMÉãÉhÇÃî‘êlÇ…òbÇµÇ©ÇØÇÈïKóvÇ™Ç†ÇÈÅB", "To join the Thieves Guild, I need to not pay tax for 4 months, that means I'll be a criminal for sure.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqFighterGuild != 0 ) {
		s = lang("êÌémÉMÉãÉhêRç∏", "Joining the Fighters Guild")
		p = sqFighterGuild
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("êÌémÉMÉãÉhÇ…â¡ì¸Ç∑ÇÈÇ…ÇÕÅA" + refchara(fFGTG, DBSPEC_CHARA_NAME_ORG, 1) + "ÇÇ†Ç∆" + fFGNorma + "ïCì¢î∞ÇµÇƒÇ©ÇÁÅAÉJÉvÅ[ÉãÇÃÉMÉãÉhÇÃî‘êlÇ…òbÇµÇ©ÇØÇÈïKóvÇ™Ç†ÇÈÅB", "To join the Fighters Guild, I need to slay " + fFGNorma + " more " + refchara(fFGTG, DBSPEC_CHARA_NAME_ORG, 1) + " and talk to the guild guard in Port Kapul.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( stgdata(10) != 0 ) {
		s = lang("íbñËÉMÉãÉhêRç∏", "Joining the Blacksmith Guild")
		p = stgdata(10)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("íbñËÉMÉãÉhÇ…â¡ì¸Ç∑ÇÈÇ…ÇÕÅAÇ†Ç∆" + stgdata(12) + "âÒëïîıçÏê¨Ç…íßêÌÇµÅAÉJÅ[ÉäÉAÇÃÉMÉãÉhÇÃî‘êlÇ…òbÇµÇ©ÇØÇÈïKóvÇ™Ç†ÇÈÅB", "To join the Blacksmith Guild, you need to make " + stgdata(12) + " more attempts to create equipment and talk to the guild keeper in Carlia.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( stgdata(15) != 0 ) {
		s = lang("è©ïwÉMÉãÉhêRç∏", "Joining the Prostitute Guild")
		p = stgdata(15)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("è©ïwÉMÉãÉhÇ…â¡ì¸Ç∑ÇÈÇ…ÇÕÅAãCéùÇøÇ¢Ç¢Ç±Ç∆Ç≈Ç†Ç∆" + stgdata(16) + "ñáÇÃã‡â›Çâ“Ç¨ÅAÉgÅ[É}ÉbÉgÇÃÉMÉãÉhÇÃî‘êlÇ…òbÇµÇ©ÇØÇÈïKóvÇ™Ç†ÇÈÅB", "In order to join the Prostitute Guild, you need to get " + stgdata(16) + " gold coins from the little tail t'night.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqMage1 != 0 ) {
		s = lang("ñÇèpémÉMÉãÉhÉmÉãÉ}", "The Mages Guild quota")
		p = sqMage1
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ñÇèpémÉMÉãÉhÇÃÉâÉìÉNÇè„Ç∞ÇÈÇΩÇﬂÇ…ÇÕÅAÉãÉ~ÉGÉXÉgÇÃÉÅÉCÉWÉMÉãÉhÇÃî[ì¸î†Ç…ÅAâì«çœÇ›ÇÃå√èëï®Çî[ì¸ÇµÅAÉMÉãÉhÉ|ÉCÉìÉgÇíôÇﬂÇΩå„ÅAÉMÉãÉhÇÃî‘êlÇ…òbÇµÇ©ÇØÇ»ÇØÇÍÇŒÇ»ÇÁÇ»Ç¢ÅBÉâÉìÉNè„è∏ÇÃÇΩÇﬂÇ…ÇÕÅAÇ†Ç∆" + flagMageGuildNorma + "ÉMÉãÉhÉ|ÉCÉìÉgÇälìæÇ∑ÇÈïKóvÇ™Ç†ÇÈÅB", "To raise the rank in the Mages Guild, you need to gather " + flagMageGuildNorma + " more guild points and talk to the guard in Lumiest. I can earn the guild points by collecting ancients books, decrypt them, and put them into the delivery box near the guild guard.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqFighter1 != 0 ) {
		s = lang("êÌémÉMÉãÉhÉmÉãÉ}", "The Fighters Guild quota")
		p = sqFighter1
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("êÌémÉMÉãÉhÇÃÉâÉìÉNÇè„Ç∞ÇÈÇΩÇﬂÇ…ÇÕÅA" + refchara(fFGTG, DBSPEC_CHARA_NAME_ORG, 1) + "ÇÇ†Ç∆" + fFGNorma + "ïCì¢î∞ÇµÇƒÇ©ÇÁÅAÉJÉvÅ[ÉãÇÃÉMÉãÉhÇÃî‘êlÇ…òbÇµÇ©ÇØÇÈïKóvÇ™Ç†ÇÈÅB", "To raise the rank in the Fighters Guild, I need to slay " + fFGNorma + " more " + refchara(fFGTG, DBSPEC_CHARA_NAME_ORG, 1) + " and talk to the guild guard in Port Kapul.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqThief1 != 0 ) {
		s = lang("ìêëØÉMÉãÉhÉmÉãÉ}", "The Thieves Guild quota")
		p = sqThief1
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ìêëØÉMÉãÉhÇÃÉâÉìÉNÇè„Ç∞ÇÈÇΩÇﬂÇ…ÇÕÅAÇ†Ç∆ã‡â›" + flagThiefGuildNorma + "ñáï™ÇÃìêïiÇîÑÇËÇ≥ÇŒÇ´ÅAÉ_ÉãÉtÉBÇÃÉMÉãÉhÇÃî‘êlÇ…òbÇµÇ©ÇØÇÈïKóvÇ™Ç†ÇÈÅB", "To raise the rank in the Thieves Guild, I need to sell stolen goods worth total of " + flagThiefGuildNorma + " gold pices and talk to the guild guard in Derphy.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( stgdata(11) != 0 ) {
		s = lang("íbñËÉMÉãÉhÉmÉãÉ}", "The Blacksmith Guild quota")
		p = stgdata(11)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("íbñËÉMÉãÉhÇÃÉâÉìÉNÇè„Ç∞ÇÈÇΩÇﬂÇ…ÇÕÅAÇ†Ç∆" + stgdata(12) + "âÒëïîıçÏê¨Ç…íßêÌÇµÅAÉJÅ[ÉäÉAÇÃÉMÉãÉhÇÃî‘êlÇ…òbÇµÇ©ÇØÇÈïKóvÇ™Ç†ÇÈÅB", "You need to make " + stgdata(12) + " more attempts to create equipment and talk to the guild keeper in Carlia.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( stgdata(17) != 0 ) {
		s = lang("è©ïwÉMÉãÉhÉmÉãÉ}", "The Prostitute Guild quota")
		p = stgdata(17)
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("è©ïwÉMÉãÉhÇÃÉâÉìÉNÇè„Ç∞ÇÈÇΩÇﬂÇ…ÇÕÅAÇ†Ç∆ã‡â›" + stgdata(16) + "ñáÇãCéùÇøÇ¢Ç¢Ç±Ç∆Ç≈â“ÇÆïKóvÇ™Ç†ÇÈÅB", "You need to get " + stgdata(16) + " gold coins from the little tail t'night.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqMinotaur != 0 ) {
		s = lang("É~ÉmÉ^ÉEÉçÉXÇÃâ§ Lv24ëäìñ", "Minotaur king Lv24")
		p = sqMinotaur
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉpÉãÉ~ÉAÇÃÉRÉlÉäÅ[è≠è´Ç…ÅAÉ~ÉmÉ^ÉEÉçÉXÇÃéÒóÃÇÃëﬁé°ÇóäÇ‹ÇÍÇΩÅBÉ~ÉmÉ^ÉEÉçÉXÇÃëÉåAÇÕÅAÉàÉEÉBÉìÇÃìÏÇ…Ç†ÇÈÇ›ÇΩÇ¢ÇæÅB", "General Conery wants me to hunt the chief of minotaur. The nest is located south of Yowyn.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( val == 0 ) {
		if ( p == 2 ) {
			s1 = lang("É~ÉmÉ^ÉEÉçÉXÇÃéÒóÃÇñ≥éñì¢î∞ÇµÇΩÅBÉpÉãÉ~ÉAÇÃÉRÉlÉäÅ[è≠è´Ç…ïÒçêÇµÇÊÇ§ÅB", "I've killed the chief of minotaur. I should head back to Palmia and speak to General Conery.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	p = 0
	if ( sqDaddy != 0 ) {
		s = lang("ÉäÉgÉãÉVÉXÉ^Å[ Lv30ëäìñ", "Little sister Lv30")
		p = sqDaddy
		if ( val == 1 ) {
			if ( p >= 1000 ) {
				noteadd lang("[íBê¨]", "[Done]") + s
			}
		}
	}
	if ( val == 0 ) {
		if ( p == 1 ) {
			s1 = lang("ÉAÉNÉäÅEÉeÉIÉâÇÃì‰ÇÃâ»äwé“Ç…ÅAÉäÉgÉãÉVÉXÉ^Å[ÇòAÇÍÇƒÇ≠ÇÈÇÊÇ§óäÇ‹ÇÍÇΩÅBïﬂälÇ∑ÇÈÇΩÇﬂÇ…ÇÕÅAÉrÉbÉOÉ_ÉfÉBÇì|ÇµÅAïﬂälã ÇÉäÉgÉãÇ…Ç‘Ç¬ÇØÇÈïKóvÇ™Ç†ÇÈÅB", "A strange scientist asked me to bring little sisters to her. To capture a little sister, I need to kill Big Daddy first then throw the little ball at her.")
			talk_conv s1, 40 - en * 4
			buff += "(" + s + ")\n" + s1
			noteadd ""
		}
	}
	if ( ogdata(250) != 0 ) {
		if ( guildcheck(0) == "mage" ) {
			s = lang("ñÇèpémÉMÉãÉhÉ}ÉXÉ^Å[ÉmÉãÉ}", "The Mages Guild Master quota")
			if ( val == 0 ) {
				s1 = lang("ñÇèpémÉMÉãÉhÉ}ÉXÉ^Å[Ç…îFÇﬂÇÁÇÍÇÈÇ…ÇÕÅA" + refchara(ogdata(251), DBSPEC_CHARA_NAME_ORG, 1) + "ÇÃ" + cnvitemname(ogdata(252)) + "Ç" + ogdata(250) + "å¬ëµÇ¶ÇƒÉãÉ~ÉGÉXÉgÇÃÉMÉãÉhÉ}ÉXÉ^Å[Ç…òbÇµÇ©ÇØÇÈïKóvÇ™Ç†ÇÈÅB", "To complete the Mages Guild Master quota you must bring " + ogdata(250) + " pieces of " + refchara(ogdata(251), DBSPEC_CHARA_NAME_ORG, 1) + "'s " + cnvitemname(ogdata(252)) + " to the guild master in Lumiest.")
				talk_conv s1, 40 - en * 4
				buff += "(" + s + ")\n" + s1
				noteadd ""
			}
		}
		else {
			if ( guildcheck(0) == "thieve" ) {
				s = lang("ìêëØÉMÉãÉhÉ}ÉXÉ^Å[ÉmÉãÉ}", "The Thieves Guild Master quota")
				if ( val == 0 ) {
					s1 = lang("ìêëØÉMÉãÉhÉ}ÉXÉ^Å[Ç…îFÇﬂÇÁÇÍÇÈÇ…ÇÕÅA" + _furniture(ogdata(252)) + ioriginalnameref(ogdata(251)) + "Ç" + ogdata(250) + "å¬ëµÇ¶ÇƒÉ_ÉãÉtÉBÇÃÉMÉãÉhÉ}ÉXÉ^Å[Ç…òbÇµÇ©ÇØÇÈïKóvÇ™Ç†ÇÈÅB", "To complete the Thieves Guild Master quota you must bring " + ogdata(250) + " pieces of " + _furniture(ogdata(252)) + ioriginalnameref(ogdata(251)) + " to the guild master in Derphy.")
					talk_conv s1, 40 - en * 4
					buff += "(" + s + ")\n" + s1
					noteadd ""
				}
			}
			else {
				if ( guildcheck(0) == "fighter" ) {
					s1 = lang("êÌémÉMÉãÉhÉ}ÉXÉ^Å[ÉmÉãÉ}", "The Fighters Guild Master quota")
					if ( val == 0 ) {
						valbk = val
						val = ogdata(252), 100, 2, 0
						gosub *item_encdetail
						getstr s, s, 0, 32
						s2 = lang("êÌémÉMÉãÉhÉ}ÉXÉ^Å[Ç…îFÇﬂÇÁÇÍÇÈÇ…ÇÕÅA" + s + cnvitemname(ogdata(251)) + "Ç" + ogdata(250) + "å¬ëµÇ¶ÇƒÉ|Å[ÉgÉJÉvÅ[ÉãÇÃÉMÉãÉhÉ}ÉXÉ^Å[Ç…òbÇµÇ©ÇØÇÈïKóvÇ™Ç†ÇÈÅB", "To complete the Fighters Guild Master quota you must bring " + ogdata(250) + " pieces of " + cnvitemname(ogdata(251)) + " to the guild master in Port Kapul.")
						talk_conv s2, 40 - en * 4
						buff += "(" + s1 + ")\n" + s2
						noteadd ""
						val = valbk
					}
				}
			}
		}
	}
	return

*quest_item
	noteadd lang("[å√Ç—ÇΩÇ®éÁÇË]", "[An old talisman]")
	if ( flagMain >= 30 ) {
		noteadd lang("[ÉWÉÉÉrâ§Ç÷ÇÃèëä»]", "A letter to the king")
	}
	if ( flagMsFool != 0 ) {
		noteadd lang("[ãé“ÇÃñÇêŒ]", "Fool's magic stone")
	}
	if ( flagMsKing != 0 ) {
		noteadd lang("[îeé“ÇÃñÇêŒ]", "King's magic stone")
	}
	if ( flagMsSage != 0 ) {
		noteadd lang("[å´é“ÇÃñÇêŒ]", "Sage's magic stone")
	}
	if ( ncgQuestForMyFriends >= 3 ) {
		noteadd lang("[é¿å±èÍÇÃîÈïÛ]", "The laboratory treasure")
	}
	return

*talk_quest_load
	notesel buffboard
	sdim buff2
	p = instr(buffboard, 0, s + "," + lang("JP", "EN"))
	buff2 = strmid(buffboard, p, instr(buffboard, p, "%END"))
	notesel buff2
	if ( noteinfo(0) <= 1 ) {
		buff2 = "no txt"
		return
	}
	p = rnd(noteinfo(0) - 1) + 1
	noteget buff2, p
	p = instr(buff2, 0, ":")
	s(3) = strmid(buff2, 0, p)
	if ( val == 2 ) {
		notesel buff
		return
	}
	buff2 = strmid(buff2, p + 1, strlen(buff2) - p - 1)
	if ( val != 2 ) {
		buff = buff2
	}
	return

*label_0821
	randomize qClient(rq) + 1
	s(6) = ""
	s(5) = lang("ã‡â›" + qReward(rq) + "ñá", "" + qReward(rq) + " gold pieces")
	if ( qRewardItem(rq) != (0 /*!!!@[FILTER_NOTHING @@@ FILTER_NOTHING @@@ QUEST_REWARD_NONE]@!!! */) ) {
		if ( qRewardItem(rq) < FILTER_WEAPON ) {
			s(5) += lang("Ç∆", " and ") + _reward(qRewardItem(rq))
		}
		else {
			s(5) += lang("Ç∆", " and ") + fltname(qRewardItem(rq))
		}
	}
	if ( qDeadline(rq) == (-1) ) {
		nquestdate = lang("ë¶éû", "-")
	}
	else {
		nquestdate = "" + qDeadline(rq) + lang("ì˙", "d")
	}
	if ( qExist(rq) == QUEST_TYPE_HARVEST ) {
		s = "%HARVEST"
		gosub *talk_quest_load
		s(10) = "" + cnvweight(qParam1(rq))
		s(11) = mapname(qMap(rq))
		s(4) = lang("" + s(10) + "ÇÃçÏï®ÇÃî[ì¸", "Gather harvests weight " + s(10) + ".")
		if ( gQuestRef == rq ) {
			s(4) += lang("(åªç›", " (Now ") + cnvweight(qParam2(rq)) + ")"
		}
		s(6) = s(4)
	}
	if ( qExist(rq) == QUEST_TYPE_PARTY ) {
		s = "%PARTY"
		gosub *talk_quest_load
		s(10) = "" + qParam1(rq) + lang("É|ÉCÉìÉg", " points")
		s(11) = mapname(qMap(rq))
		s(4) = lang("" + s(10) + "ÇÃälìæ", "Gather " + s(10) + ".")
		if ( gQuestRef == rq ) {
			s(4) += lang("(åªç›", " (Now ") + qParam2(rq) + ")"
		}
		s(6) = s(4)
	}
	if ( qExist(rq) == QUEST_TYPE_ESCORT ) {
		s = "%ESCORT," + qVar(rq)
		gosub *talk_quest_load
		s(11) = "" + mapname(qParam1(rq))
		s(4) = lang("ÉNÉâÉCÉAÉìÉgÇ" + s(11), "Escort the client to " + s(11) + ".")
		s(6) = s(4) + lang("Ç‹Ç≈åÏâq", "")
	}
	if ( qExist(rq) == QUEST_TYPE_HUNT ) {
		s = "%HUNT"
		gosub *talk_quest_load
		if ( qParam1(rq) ) {
			if ( jp ) {
				s(4) = csetfamily(2, oqdata(0, rq))
			}
			else {
				s(4) = csetfamily(0, oqdata(0, rq))
			}
		}
		else {
			s(4) = ""
		}
		s(6) = lang("ëSÇƒÇÃìGÇÃürñ≈", "Eliminate monsters.")
	}
	if ( qExist(rq) == QUEST_TYPE_SUPPLY ) {
		s = "%SUPPLY"
		gosub *talk_quest_load
		s(4) = cnvarticle(cnvitemname(qDestItem(rq)))
		s(6) = lang(s(4) + "ÇÃî[ì¸", "Give " + s(4) + " to the client.")
	}
	if ( qExist(rq) == QUEST_TYPE_DELIVER ) {
		s = "%DELIVER," + qParam1(rq)
		gosub *talk_quest_load
		s(10) = cnvarticle(cnvitemname(qDestItem(rq)))
		s(11) = "" + mapname(qMap(qdata((10 /*!!!@[QDATA_DEST_CLIENT @@@ QDATA_ENCOUNTER]@!!! */), rq)))
		s(12) = "" + qname(qdata((10 /*!!!@[QDATA_DEST_CLIENT @@@ QDATA_ENCOUNTER]@!!! */), rq))
		if ( iorgweight(qDestItem(rq)) > 50000 ) {
			s(10) += lang("(ê¶Ç≠èdÇ¢)", "(Heavy!)")
		}
		s(4) = lang("" + s(11) + "Ç…èZÇﬁ" + s(12) + "Ç…" + s(10), "Deliver " + s(10) + " to " + s(12) + " who lives in " + s(11) + ".")
		s(6) = s(4) + lang("ÇîzíB", "")
	}
	if ( qExist(rq) == QUEST_TYPE_COOK ) {
		s = "%COOK," + qParam1(rq)
		if ( rnd(6) == 0 ) {
			s = "%COOK,GENERAL"
		}
		gosub *talk_quest_load
		s(4) = cnvarticle(foodname(qParam1(rq), "", qParam2(rq)))
		s(6) = lang(s(4) + "ÇÃî[ì¸", "Give " + s(4) + " to the client.")
	}
	if ( qExist(rq) == QUEST_TYPE_CONQUER ) {
		s = "%CONQUER"
		gosub *talk_quest_load
		if ( qParam1(rq) == 343 ) {
			if ( qParam2(rq) != usernpcmax ) {
				s(4) = userdatan(1, qParam2(rq))
			}
			else {
				s(4) = lang("écÇËÉJÉX", "garbage")
			}
		}
		else {
			s(4) = refchara(qParam1(rq), DBSPEC_CHARA_NAME_ORG, 1)
		}
		s(10) = "" + qLevel(rq) * 10 / 6
		s(6) = lang(s(4) + "ÇÃì¢î∞", "Slay " + s(4) + ".")
	}
	if ( qExist(rq) == QUEST_TYPE_HUNTEX ) {
		s = "%HUNTEX"
		gosub *talk_quest_load
		if ( qParam1(rq) == 343 ) {
			if ( qParam2(rq) != usernpcmax ) {
				s(4) = userdatan(1, qParam2(rq))
			}
			else {
				s(4) = lang("écÇËÉJÉX", "garbage")
			}
		}
		else {
			s(4) = refchara(qParam1(rq), DBSPEC_CHARA_NAME_ORG, 1)
		}
		s(10) = "" + qLevel(rq) * 3 / 2
		s(6) = lang("ëSÇƒÇÃìGÇÃürñ≈", "Eliminate monsters")
	}
	if ( qExist(rq) == QUEST_TYPE_COLLECT ) {
		s = "%COLLECT"
		gosub *talk_quest_load
		s(10) = cnvarticle(cnvitemname(qDestItem(rq)))
		s(11) = "" + mapname(qMap(rq))
		if ( gArea  == qMap(rq) & gLevel  == 1 ) {
			s(12) = "" + cnName(qdata((10 /*!!!@[QDATA_DEST_CLIENT @@@ QDATA_ENCOUNTER]@!!! */), rq))
		}
		else {
			s(12) = lang(s(11) + "Ç…èZÇﬁêlï®", "the target in " + s(11))
		}
		if ( iorgweight(qDestItem(rq)) > 50000 ) {
			s(10) += lang("(ê¶Ç≠èdÇ¢)", "(Heavy!)")
		}
		s(4) = lang("àÀóäêlÇÃÇΩÇﬂÇ…" + s(12) + "Ç©ÇÁ" + s(10), "Acquire " + s(10) + " from " + s(12) + " for the client.")
		s(6) = s(4) + lang("Çí≤íB", "")
	}
	if ( qExist(rq) == 1020 ) {
		s = "%PROST"
		gosub *talk_quest_load
		s(4) = ""
		s(10) = "" + qParam1(rq) + lang("êl", " people")
		s(6) = lang("àÀóäêlÇÃÇΩÇﬂÇ…ãMë∞ÇΩÇøÇ" + s(10) + "Ç‡ÇƒÇ»Ç∑", "Entertaining " + s(10) + ".")
	}
	if ( qExist(rq) == 1021 ) {
		s = "%PROSHEEP"
		gosub *talk_quest_load
		s(4) = ""
		s(10) = ""
		s(6) = lang("éwíËÇ≥ÇÍÇΩéûä‘ÅAórÇéÁÇËêÿÇÈ", "Protect the sheep for the allotted time.")
	}
	gosub *talktxt_conv
	if ( qExist(rq) == QUEST_TYPE_HUNT ) {
		gosub *label_4685
	}
	if ( val == 1 ) {
		buff = lang(_kimi(3) + "Ç…óäÇ›ÇΩÇ¢Ç±Ç∆Ç™Ç†ÇÈ" + _nda(), "") + buff
		if ( qDeadline(rq) != (-1) ) {
			buff += lang("ä˙å¿ÇÕécÇË" + qDeadline(rq) + "ì˙" + _da(), " You have " + qDeadline(rq) + " days to perform the task. ")
		}
		buff += lang("àÀóäÇéÛÇØÇƒÇ≠ÇÍÇÈÇÃ" + _kana(1), "How about it?")
	}
	if ( val == 2 ) {
		if ( qStatus(rq) == QUEST_STATE_SUCCESS ) {
			buff += "@QC[" + lang("àÀóä äÆóπ", "Complete") + "]" + s(3) + "\n"
		}
		else {
			buff += "@QL[" + lang("àÀóä", "Job") + "] " + s(3) + "\n"
		}
		buff += lang("àÀóä: ", "Client  : ") + qname(rq) + "\n"
		buff += lang("èÍèä: ", "Location: ") + mapname(qMap(rq)) + "\n"
		buff += lang("ä˙å¿: ", "Deadline: ")
		if ( qDeadline(rq) != (-1) ) {
			buff += lang("écÇË", "")
		}
		buff += nquestdate + "\n"
		s(5) = lang("ïÒèV: ", "Reward  : ") + s(5)
		talk_conv s(5), 40 - en * 10
		buff += s(5) + "\n"
		if ( qStatus(rq) == QUEST_STATE_SUCCESS ) {
			s(4) = lang("ì‡óe: Ç†Ç∆ÇÕïÒçêÇ∑ÇÈÇæÇØÇæÅB", "Detail  : Report to the client.")
		}
		else {
			s(4) = lang("ì‡óe: ", "Detail  : ") + s(6)
		}
		talk_conv s(4), 40 - en * 10
		buff += s(4) + "\n"
	}
	if ( val == 3 ) {
		buff = lang("àÀóäÇñ≥éñèIÇÌÇÁÇπÇΩÇÊÇ§" + _dana() + _thanks(2), "You've done well. Thanks. Here's your reward.")
		if ( int(s(5)) != 0 ) {
			txt -1, lang("ïÒèVÇÃ" + s(5) + "ÇéÛÇØÇ∆Ç¡Çƒ" + _kure(), "")
		}
		if ( qExist(rq) == QUEST_TYPE_HARVEST ) {
			if ( qParam1(rq) * 125 / 100 < qParam2(rq) ) {
				buff += lang("ó\ëzà»è„Ç…Ç¢Ç¢ì≠Ç´ÇæÇ¡ÇΩÇ©ÇÁÅAäÙÇÁÇ©êFÇïtÇØÇƒÇ®Ç¢ÇΩ" + _yo(), "I've added some extra coins since you worked really hard.")
			}
		}
		if ( qExist(rq) == QUEST_TYPE_PARTY ) {
			if ( qParam1(rq) * 150 / 100 < qParam2(rq) ) {
				buff += lang("ó\ëzà»è„ÇÃê∑ÇËè„Ç™ÇËÇæÇ¡ÇΩÇ©ÇÁÅAÇ®Ç‹ÇØÇÇ†Ç∞ÇÈ" + _yo(), "The party was terrific! I'll give you these tickets as an extra bonus.")
			}
		}
		if ( qExist(rq) == 1020 ) {
			if ( qParam1(rq) + 2 < qParam2(rq) ) {
				buff += lang("ó\ëzà»è„Ç…Ç¢Ç¢ì≠Ç´ÇæÇ¡ÇΩÇ©ÇÁÅAäÙÇÁÇ©êFÇïtÇØÇƒÇ®Ç¢ÇΩ" + _yo(), "I've added some extra coins since you worked really hard.")
			}
		}
		if ( qExist(rq) == 1021 ) {
			if ( qParam2(rq) == 0 ) {
				buff += lang("ñÇï®ÇëSÇƒï–ïtÇØÇƒÇ≠ÇÍÇΩÇ®óÁÇ…ÅAäÙÇÁÇ©êFÇïtÇØÇƒÇ®Ç¢ÇΩ" + _yo(), "I've added some extra coins since you worked really hard.")
			}
		}
	}
	randomize
	return

*talktxt_conv
	repeat 20
		await
		p = instr(buff, 0, "{"), instr(buff, p, "}"), strlen(buff)
		if ( p == (-1) ) {
			break
		}
		s = strmid(buff, p + 1, p(1) - 1), strmid(buff, 0, p), strmid(buff, p + p(1) + 1, p(2) - p(1) - p)
		repeat 1
			if ( s == "client" ) {
				s = s(12)
				break
			}
			if ( s == "map" ) {
				s = s(11)
				break
			}
			if ( s == "ref" ) {
				s = s(10)
				break
			}
			if ( s == "you" ) {
				s = _kimi(3)
				break
			}
			if ( s == "me" ) {
				s = _ore(3)
				break
			}
			if ( s == "reward" ) {
				s = s(5)
				break
			}
			if ( s == "objective" ) {
				s = s(4)
				break
			}
			if ( s == "deadline" ) {
				s = nquestdate
				break
			}
			if ( s == "player" ) {
				s = cnName(CHARA_PLAYER)
				break
			}
			if ( s == "aka" ) {
				s = cnAka(CHARA_PLAYER)
				break
			}
			if ( s == "npc" ) {
				s = cnName(tc)
				break
			}
			if ( s == "Ç†ÇÈ" ) {
				s = _aru(3)
				break
			}
			if ( s == "Ç§" ) {
				s = _u(3)
				break
			}
			if ( s == "Ç©" ) {
				s = _ka(3)
				break
			}
			if ( s == "Ç™" ) {
				s = _ga(3)
				break
			}
			if ( s == "Ç©Ç»" ) {
				s = _kana(3)
				break
			}
			if ( s == "Çæ" ) {
				s = _da(3)
				break
			}
			if ( s == "ÇÊ" ) {
				s = _yo(3)
				break
			}
			if ( s == "ÇΩ" ) {
				s = _ta(3)
				break
			}
			if ( s == "ÇæÇ»" ) {
				s = _dana(3)
				break
			}
			if ( s == "ÇæÇÎ" ) {
				s = _daro(3)
				break
			}
			if ( s == "ÇΩÇÃÇﬁ" ) {
				s = _tanomu(3)
				break
			}
			if ( s == "ÇÈ" ) {
				s = _ru(3)
				break
			}
			if ( s == "ÇÃÇæ" ) {
				s = _nda(3)
				break
			}
			if ( s == "Ç»" ) {
				s = _na(3)
				break
			}
			if ( s == "Ç≠ÇÍ" ) {
				s = _kure(3)
				break
			}
			s = "Unknown Code"
		loop
		buff = s(1) + s + s(2)
	loop
	return

#deffunc addnews2 str addnews2_arg1, int addnews2_arg2
	locvar_addnews2_n = addnews2_arg1
	if ( addnews2_arg2 ) {
		txtef COLOR_FRESH
		txt -1, "[News] " + locvar_addnews2_n
	}
	talk_conv locvar_addnews2_n, 38 - en * 5
	newsbuff += locvar_addnews2_n + "\n"
	return

#deffunc addnewstopic str addnewstopic_arg1, str addnewstopic_arg2, int addnewstopic_prm2
	addnews2 addnewstopic_arg1 + " " + gYear  + "/" + gMonth  + "/" + gDay  + " h" + gHour  + "" + " " + addnewstopic_arg2
	throwsstpevent "AddNewsTopic", addnewstopic_prm2, addnewstopic_arg2, 0
	return

#deffunc addnews int addnews_arg1, int addnews_arg2
	if ( addnews_arg1 == 0 ) {
		addnews2 valn
		newsbuff += "\n"
		return
	}
	if ( addnews_arg1 == 1 ) {
		addnewstopic "@01", lang("ÉAÉCÉeÉÄî≠å©", "Discovery"), addnews_arg2
		addnews2 lang(cnAka(addnews_arg2) + " " + cnName(addnews_arg2) + "ÇÕ" + mapname(cType(addnews_arg2)) + "Ç…Çƒ" + valn + "Çì¸éËÇµÇΩÅB", cnAka(addnews_arg2) + " " + cnName(addnews_arg2) + " has discovered " + valn + " in " + mapname(cType(addnews_arg2)) + "."), 1
	}
	if ( addnews_arg1 == 2 ) {
		addnewstopic "@02", lang("êVÇΩÇ»ÇÈóÕ", "Growth"), addnews_arg2
		addnews2 lang(cnAka(addnews_arg2) + " " + cnName(addnews_arg2) + "ÇÕåoå±ÇÇ¬Ç›ÅAÉåÉxÉã" + cLevel(addnews_arg2) + "Ç…Ç»Ç¡ÇΩÅB", cnAka(addnews_arg2) + " " + cnName(addnews_arg2) + " has gained experience and achieved level " + cLevel(addnews_arg2) + "."), 1
	}
	if ( addnews_arg1 == 3 ) {
		addnewstopic "@02", lang("âˆâ‰Ç©ÇÁÇÃïúãA", "Recovery from injury"), addnews_arg2
		addnews2 lang(cnAka(addnews_arg2) + " " + cnName(addnews_arg2) + "ÇÕâˆâ‰Ç©ÇÁâÒïúÇµÇΩÅB", cnAka(addnews_arg2) + " " + cnName(addnews_arg2) + " has fully recovered from injury."), 1
	}
	if ( addnews_arg1 == 4 ) {
		addnewstopic "@03", lang("ÉNÉGÉXÉgÇÃíBê¨", "Accomplishment"), addnews_arg2
		addnews2 lang(cnAka(addnews_arg2) + " " + cnName(addnews_arg2) + "ÇÕÉNÉGÉXÉgÇíBê¨ÇµÅA" + val + "ÇÃñºê∫ÇéËÇ…ÇµÇΩÅB", cnAka(addnews_arg2) + " " + cnName(addnews_arg2) + " has finished a quest and gained " + val + " fame."), 1
	}
	if ( addnews_arg1 == 5 ) {
		addnewstopic "@04", lang("à¯ëﬁ", "Retirement"), addnews_arg2
		addnews2 lang(cnAka(addnews_arg2) + " " + cnName(addnews_arg2) + "ÇÕé©ï™ÇÃóÕÇÃå¿äEÇåÂÇËÅAÉmÅ[ÉXÉeÉBÉäÉXÇ©ÇÁãéÇ¡ÇƒÇ¢Ç¡ÇΩÅB", cnAka(addnews_arg2) + " " + cnName(addnews_arg2) + " realizes the limitations and leaves North Tyris."), 1
	}
	newsbuff += "\n"
	return

*system_init
	tmset
	time_warn = timeGetTime() / 1000
	time_begin = timeGetTime() / 1000
	procid = (procid + 1) \ 10
	proclist(procid) = "system_init" + " ct:" + ct
	if ( dbg_outputdebuglog ) {
	}
	exist exedir + "config.txt"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "config.txt", exedir + "config.txt"
	}
	exist exedir + "omake_config.txt"
	if ( strsize == (-1) ) {
		omakeconfigstr = "[Omake Config]\n"
		bsave exedir + "omake_config.txt", omakeconfigstr, 16
	}
	exist exedir + "user\\export.txt"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "export.txt", exedir + "user\\export.txt"
	}
	exist exedir + "user\\lastwords.txt"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "lastwords.txt", exedir + "user\\lastwords.txt"
	}
	exist exedir + "user\\lastwords-e.txt"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "lastwords-e.txt", exedir + "user\\lastwords-e.txt"
	}
	exist exedir + "user\\music\\musiclist.txt"
	if ( strsize == (-1) ) {
		bcopy "musiclist.txt", exedir + "user\\music\\musiclist.txt"
	}
	exist exedir + "user\\graphic\\face1.bmp"
	if ( strsize == (-1) ) {
		bcopy exedir + "original\\" + "face1.bmp", exedir + "user\\graphic\\face1.bmp"
	}
	exist exedir + "user\\graphic\\chara_500.bmp"
	if ( strsize == (-1) ) {
		bcopy "500.bmp", exedir + "user\\graphic\\chara_500.bmp"
	}
	exist exedir + "user\\graphic\\chara_286.bmp"
	if ( strsize == (-1) ) {
		bcopy "286.bmp", exedir + "user\\graphic\\chara_286.bmp"
	}
	exist exedir + "user\\graphic\\chara_453.bmp"
	if ( strsize == (-1) ) {
		bcopy "453.bmp", exedir + "user\\graphic\\chara_453.bmp"
	}
	exist exedir + "user\\graphic\\chara_454.bmp"
	if ( strsize == (-1) ) {
		bcopy "454.bmp", exedir + "user\\graphic\\chara_454.bmp"
	}
	exist exedir + "user\\graphic\\chara_455.bmp"
	if ( strsize == (-1) ) {
		bcopy "455.bmp", exedir + "user\\graphic\\chara_455.bmp"
	}
	exist exedir + "user\\graphic\\chara_456.bmp"
	if ( strsize == (-1) ) {
		bcopy "456.bmp", exedir + "user\\graphic\\chara_456.bmp"
	}
	exist exedir + "user\\graphic\\chara_457.bmp"
	if ( strsize == (-1) ) {
		bcopy "457.bmp", exedir + "user\\graphic\\chara_457.bmp"
	}
	exist exedir + "user\\graphic\\chara_458.bmp"
	if ( strsize == (-1) ) {
		bcopy "458.bmp", exedir + "user\\graphic\\chara_458.bmp"
	}
	exist exedir + "user\\graphic\\chara_459.bmp"
	if ( strsize == (-1) ) {
		bcopy "459.bmp", exedir + "user\\graphic\\chara_459.bmp"
	}
	exist exedir + "user\\graphic\\chara_460.bmp"
	if ( strsize == (-1) ) {
		bcopy "460.bmp", exedir + "user\\graphic\\chara_460.bmp"
	}
	exist exedir + "user\\graphic\\chara_461.bmp"
	if ( strsize == (-1) ) {
		bcopy "461.bmp", exedir + "user\\graphic\\chara_461.bmp"
	}
	exist exedir + "user\\graphic\\chara_501.bmp"
	if ( strsize == (-1) ) {
		bcopy "501.bmp", exedir + "user\\graphic\\chara_501.bmp"
	}
	exist exedir + "user\\graphic\\chara_502.bmp"
	if ( strsize == (-1) ) {
		bcopy "502.bmp", exedir + "user\\graphic\\chara_502.bmp"
	}
	exist exedir + "user\\graphic\\chara_503.bmp"
	if ( strsize == (-1) ) {
		bcopy "503.bmp", exedir + "user\\graphic\\chara_503.bmp"
	}
	exist exedir + "user\\graphic\\chara_504.bmp"
	if ( strsize == (-1) ) {
		bcopy "504.bmp", exedir + "user\\graphic\\chara_504.bmp"
	}
	exist exedir + "user\\graphic\\chara_505.bmp"
	if ( strsize == (-1) ) {
		bcopy "505.bmp", exedir + "user\\graphic\\chara_505.bmp"
	}
	exist exedir + "user\\graphic\\chara_506.bmp"
	if ( strsize == (-1) ) {
		bcopy "506.bmp", exedir + "user\\graphic\\chara_506.bmp"
	}
	exist exedir + "user\\graphic\\chara_507.bmp"
	if ( strsize == (-1) ) {
		bcopy "507.bmp", exedir + "user\\graphic\\chara_507.bmp"
	}
	exist exedir + "user\\graphic\\chara_508.bmp"
	if ( strsize == (-1) ) {
		bcopy "508.bmp", exedir + "user\\graphic\\chara_508.bmp"
	}
	exist exedir + "user\\graphic\\chara_509.bmp"
	if ( strsize == (-1) ) {
		bcopy "509.bmp", exedir + "user\\graphic\\chara_509.bmp"
	}
	exist exedir + "user\\graphic\\chara_510.bmp"
	if ( strsize == (-1) ) {
		bcopy "510.bmp", exedir + "user\\graphic\\chara_510.bmp"
	}
	exist exedir + "user\\graphic\\buffIcon_29.bmp"
	if ( strsize == (-1) ) {
		bcopy "buffIcon_29.bmp", exedir + "user\\graphic\\buffIcon_29.bmp"
	}
	exist exedir + "user\\graphic\\buffIcon_30.bmp"
	if ( strsize == (-1) ) {
		bcopy "buffIcon_30.bmp", exedir + "user\\graphic\\buffIcon_30.bmp"
	}
	exist exedir + "user\\graphic\\buffIcon_31.bmp"
	if ( strsize == (-1) ) {
		bcopy "buffIcon_31.bmp", exedir + "user\\graphic\\buffIcon_31.bmp"
	}
	exist exedir + "user\\graphic\\buffIcon_32.bmp"
	if ( strsize == (-1) ) {
		bcopy "buffIcon_32.bmp", exedir + "user\\graphic\\buffIcon_32.bmp"
	}
	exist exedir + "user\\graphic\\buffIcon_33.bmp"
	if ( strsize == (-1) ) {
		bcopy "buffIcon_33.bmp", exedir + "user\\graphic\\buffIcon_33.bmp"
	}
	exist exedir + "user\\graphic\\buffIcon_35.bmp"
	if ( strsize == (-1) ) {
		bcopy "buffIcon_35.bmp", exedir + "user\\graphic\\buffIcon_35.bmp"
	}
	exist exedir + "user\\graphic\\buffIcon_36.bmp"
	if ( strsize == (-1) ) {
		bcopy "buffIcon_36.bmp", exedir + "user\\graphic\\buffIcon_36.bmp"
	}
	exist exedir + "user\\graphic\\buffIcon_37.bmp"
	if ( strsize == (-1) ) {
		bcopy "buffIcon_37.bmp", exedir + "user\\graphic\\buffIcon_37.bmp"
	}
	exist exedir + "user\\graphic\\buffIcon_38.bmp"
	if ( strsize == (-1) ) {
		bcopy "buffIcon_38.bmp", exedir + "user\\graphic\\buffIcon_38.bmp"
	}
	exist exedir + "user\\graphic\\buffIcon_39.bmp"
	if ( strsize == (-1) ) {
		bcopy "buffIcon_39.bmp", exedir + "user\\graphic\\buffIcon_39.bmp"
	}
	exist exedir + "user\\graphic\\buffIcon_67.bmp"
	if ( strsize == (-1) ) {
		bcopy "buffIcon_67.bmp", exedir + "user\\graphic\\buffIcon_67.bmp"
	}
	exist exedir + "user\\graphic\\buffIcon_68.bmp"
	if ( strsize == (-1) ) {
		bcopy "buffIcon_68.bmp", exedir + "user\\graphic\\buffIcon_68.bmp"
	}
	exist exedir + "user\\graphic\\buffIcon_69.bmp"
	if ( strsize == (-1) ) {
		bcopy "buffIcon_69.bmp", exedir + "user\\graphic\\buffIcon_69.bmp"
	}
	exist exedir + "user\\graphic\\buffIcon_70.bmp"
	if ( strsize == (-1) ) {
		bcopy "buffIcon_70.bmp", exedir + "user\\graphic\\buffIcon_70.bmp"
	}
	ooversion = 0
	exist exedir + "data\\oo_version"
	if ( strsize != (-1) ) {
		sdim buff, strsize
		bload exedir + "data\\oo_version", buff, strsize
		ooversion = int(buff)
	}
	if ( ooversion < 119 ) {
		dirlist buff, exedir + "user\\npc\\omake_overhaul\\*.unpc"
		notesel buff
		repeat stat
			noteget file, cnt
			delete exedir + "user\\npc\\omake_overhaul\\" + file
		loop
	}
	if ( ooversion < 110 ) {
		exist exedir + "data\\oo_talk.txt"
		if ( strsize != (-1) ) {
			delete exedir + "data\\oo_talk.txt"
		}
	}
	if ( ooversion < 123 ) {
		exist exedir + "data\\oo_class.csv"
		if ( strsize != (-1) ) {
			delete exedir + "data\\oo_class.csv"
		}
	}
	exist exedir + "data\\st_talk.txt"
	if ( strsize == (-1) ) {
		bcopy "st_talk.txt", exedir + "data\\st_talk.txt"
	}
	if ( ooversion < 177 ) {
		exist exedir + "user\\item\\omake_overhaul\\class change license.ooitem"
		if ( strsize != (-1) ) {
			delete exedir + "user\\item\\omake_overhaul\\class change license.ooitem"
		}
		exist exedir + "data\\oo_class.csv"
		if ( strsize != (-1) ) {
			bcopy exedir + "data\\oo_class.csv", exedir + "data\\oo_class.csv.old"
			delete exedir + "data\\oo_class.csv"
		}
	}
	exist exedir + "data\\o_race.csv"
	if ( strsize == (-1) ) {
		bcopy "o_race.csv", exedir + "data\\o_race.csv"
	}
	exist exedir + "data\\nc_race.csv"
	if ( strsize == (-1) ) {
		bcopy "nc_race.csv", exedir + "data\\nc_race.csv"
	}
	exist exedir + "data\\nc_skill.db"
	if ( strsize == (-1) ) {
		bcopy "nc_skill.db", exedir + "data\\nc_skill.db"
	}
	exist exedir + "user\\graphic\\menu_22.bmp"
	if ( strsize == (-1) ) {
		bcopy "menu_22.bmp", exedir + "user\\graphic\\menu_22.bmp"
	}
	exist exedir + "user\\graphic\\menu_23.bmp"
	if ( strsize == (-1) ) {
		bcopy "menu_23.bmp", exedir + "user\\graphic\\menu_23.bmp"
	}
	repeat 14, 80
		exist exedir + "user\\graphic\\buffIcon_" + cnt + ".bmp"
		if ( strsize == (-1) ) {
			bcopy "buffIcon_" + cnt + ".bmp", exedir + "user\\graphic\\buffIcon_" + cnt + ".bmp"
		}
	loop
	repeat 3, 96
		exist exedir + "user\\graphic\\buffIcon_" + cnt + ".bmp"
		if ( strsize == (-1) ) {
			bcopy "buffIcon_" + cnt + ".bmp", exedir + "user\\graphic\\buffIcon_" + cnt + ".bmp"
		}
	loop
	repeat 7, 60
		exist exedir + "user\\graphic\\buffIcon_" + cnt + ".bmp"
		if ( strsize == (-1) ) {
			bcopy "buffIcon_" + cnt + ".bmp", exedir + "user\\graphic\\buffIcon_" + cnt + ".bmp"
		}
	loop
	repeat 2
		exist exedir + "user\\graphic\\anime" + (29 + cnt) + ".bmp"
		if ( strsize == (-1) ) {
			bcopy "anime" + (29 + cnt) + ".bmp", exedir + "user\\graphic\\anime" + (29 + cnt) + ".bmp"
		}
	loop
	exist exedir + "data\\oo_talk.txt"
	if ( strsize == (-1) ) {
		bcopy "oo_talk.txt", exedir + "data\\oo_talk.txt"
	}
	exist exedir + "data\\oo_class.csv"
	if ( strsize == (-1) ) {
		bcopy "oo_class.csv", exedir + "data\\oo_class.csv"
	}
	gosub *mutexobj
	sdim s, 160, 40
	dim p, 100
	dim rtval, 10
	sdim rtvaln, 50, 10
	sdim key_select, 2, 30
	sdim buff, 10000
	sdim splitbuff, 400, 10
	playerid = ""
	gosub *config_init
	gosub *config_loadCore
	gosub *config_load
	gosub *screen_init
	gosub *config_loadOmake
	gosub *label_4319
	if ( cfg_fullscreen ) {
		chgdisp 1, windoww, windowh
		bgscr 0, windoww, windowh, 0, 0
		width windoww, windowh, 0, 0
	}
	else {
		screen 0, windoww, windowh, 0, windowx, windowy
	}
	gsel BUFFER_SCREEN
	redraw 0
	color 0
	boxf
	redraw 1
	onkey gosub *esc_check
	onkey 0
	onexit *exit_game
	exist exedir + "user\\graphic\\target.bmp"
	if ( strsize == (-1) ) {
		existfile_target = 0
	}
	else {
		existfile_target = 1
		buffer 99
		picload_ exedir + "user\\graphic\\target.bmp"
	}
	exist exedir + "user\\graphic\\fruitTrees.bmp"
	if ( strsize == (-1) ) {
		existfile_fruittrees = 0
	}
	else {
		existfile_fruittrees = 1
		buffer 98
		picload_ exedir + "user\\graphic\\fruitTrees.bmp"
	}
	exist exedir + "user\\graphic\\minimap.bmp"
	if ( strsize == (-1) ) {
		existfile_minimap = 0
	}
	else {
		existfile_minimap = 1
		buffer 97
		picload_ exedir + "user\\graphic\\minimap.bmp"
	}
	exist exedir + "user\\graphic\\map1.bmp"
	if ( strsize == (-1) ) {
		existfile_map = 0
	}
	else {
		existfile_map = 1
	}
	buffer 96, 48 * 10, 48 * 6
	color 0, 0, 0
	boxf
	repeat 49, 1
		s = exedir + "user\\graphic\\mapchip" + cnt + ".bmp"
		exist s
		if ( strsize != (-1) ) {
			pos cnt \ 10 * 48, cnt / 10 * 48
			picload_ s, 1
		}
	loop
	buffer 95, 48 * 33, 48 * 2 * 5
	color 0, 0, 0
	boxf
	buffer 94, 600, 400
	repeat 20
		buffer 200 + cnt
	loop
	buffer BUFFER_INF, 1440, 800 + 126
	picload_ exedir + "\\graphic\\interface.bmp", 1
	folder = exedir + "user\\graphic\\"
	dirlist buff, folder + "menu_*.bmp"
	notesel buff
	repeat stat
		noteget file, cnt
		p = int(strmid(file, 5, instr(file, 5, ".")))
		pos 290 + p * 48, 48
		picload_ folder + file, 1
	loop
	buffer BUFFER_BUF, limit(windoww, 1280, 10000), limit(windowh, 896, 10000)
	cfg_exlog = 1
	if ( cfg_exlog ) {
		buffer BUFFER_LOG, windoww, windowh
		p = windoww / 192
		repeat inf_maxlog
			cnt2 = cnt
			repeat p + 1
				if ( cnt == p ) {
					x = (windoww - inf_msgx) \ 192
				}
				else {
					x = 192
				}
				pos cnt * 192, cnt2 * inf_msgspace
				gcopy BUFFER_INF, 496, 536 + cnt2 \ 4 * inf_msgspace, x, inf_msgspace
			loop
		loop
		gsel BUFFER_SCREEN
	}
	procid = (procid + 1) \ 10
	proclist(procid) = "Init buffer" + " ct:" + ct
	if ( dbg_outputdebuglog ) {
	}
	if ( cfg_useffhp ) {
		folder = exedir + "user\\graphic\\"
		buffer BUFFER_ITEM, 33 * 48, 25 * 48
		picload_ exedir + "graphic\\" + "item.bmp", 1
		dirlist buff, folder + "item_*.bmp"
		notesel buff
		repeat stat
			noteget file, cnt
			p = int(strmid(file, 5, instr(file, 5, ".")))
			pos p \ 33 * inf_tiles, p / 33 * inf_tiles
			picload_ folder + file, 1
		loop
		repeat 32
			file = exedir + "user\\graphic\\item_u" + str(cnt + 1) + ".bmp"
			exist file
			if ( strsize == (-1) ) {
				break
			}
			else {
				pos 48 * (cnt + 1), 48 * 1
				picload_ file, 1
			}
		loop
		exist exedir + "graphic\\item_707.bmp"
		if ( strsize == (-1) ) {
			pos 48 * 14, 48 * 21
			gcopy BUFFER_ITEM, 48 * 3, 48 * 5, inf_tiles, inf_tiles
		}
		exist exedir + "user\\graphic\\item_710.bmp"
		if ( strsize == (-1) ) {
			bcopy "item_710.bmp", exedir + "user\\graphic\\item_710.bmp"
		}
		exist exedir + "user\\graphic\\item_711.bmp"
		if ( strsize == (-1) ) {
			bcopy "item_711.bmp", exedir + "user\\graphic\\item_711.bmp"
		}
		if ( inf_tiles != 48 ) {
			pos 0, 0
			gzoom 33 * inf_tiles, 25 * inf_tiles, 1, 0, 0, 33 * 48, 25 * 48
		}
		buffer 31, 33 * 48, 25 * 48
		file = exedir + "graphic\\" + "itemEx.bmp"
		exist file
		if ( strsize == (-1) ) {
			use_exticon = 0
		}
		else {
			use_exticon = 1
			picload_ file, 1
			dirlist buff, folder + "itemEx_*.bmp"
			notesel buff
			repeat stat
				noteget file, cnt
				p = int(strmid(file, 7, instr(file, 7, ".")))
				pos p \ 33 * inf_tiles, p / 33 * inf_tiles
				picload_ folder + file, 1
			loop
			if ( inf_tiles != 48 ) {
				pos 0, 0
				gzoom 33 * inf_tiles, 25 * inf_tiles, 31, 0, 0, 33 * 48, 25 * 48
			}
		}
	}
	else {
		folder = exedir + "user\\graphic\\"
		buffer BUFFER_ITEM, 33 * 48, 25 * 48
		picload_ exedir + "\\graphic\\item.bmp", 1
		repeat 9
			pos 48 * (7 + cnt), 48 * 21
			gcopy BUFFER_ITEM, 48 * 3, 48 * 5, inf_tiles, inf_tiles
		loop
		repeat 32
			file = exedir + "user\\graphic\\item_u" + str(cnt + 1) + ".bmp"
			exist file
			if ( strsize == (-1) ) {
				break
			}
			else {
				pos 48 * (cnt + 1), 48 * 1
				picload_ file, 1
			}
		loop
		if ( inf_tiles != 48 ) {
			pos 0, 0
			gzoom 33 * inf_tiles, 25 * inf_tiles, 1, 0, 0, 33 * 48, 25 * 48
		}
	}
	buffer BUFFER_MAP, 33 * inf_tiles, 25 * inf_tiles
	buffer BUFFER_MAP_S, 33 * inf_tiles, 25 * inf_tiles
	buffer BUFFER_PIC, 24, 24
	buffer BUFFER_PIC2, 24, 24
	buffer 32, 80, 112
	buffer 36, windoww, windowh - inf_verh, 1
	encicon_loadencicons
	repeat 256
		palette cnt, cnt, cnt, cnt, cnt == 255
	loop
	procid = (procid + 1) \ 10
	proclist(procid) = "dim" + " ct:" + ct
	if ( dbg_outputdebuglog ) {
	}
	dim initeq, 3, 50
	dup eqhelm, initeq(0, 0)
	dup eqweapon1, initeq(0, 1)
	dup eqshield, initeq(0, 2)
	dup eqrange, initeq(0, 3)
	dup eqammo, initeq(0, 4)
	dup eqweapon2, initeq(0, 5)
	dup eqarmor, initeq(0, 6)
	dup eqglove, initeq(0, 7)
	dup eqboots, initeq(0, 8)
	dup eqcloack, initeq(0, 9)
	dup eqgirdle, initeq(0, 10)
	dup eqring1, initeq(0, 11)
	dup eqring2, initeq(0, 12)
	dup eqamulet1, initeq(0, 13)
	dup eqamulet2, initeq(0, 14)
	dim cmapdata, 5, 400
	dim fixeditemenc, 10 * 2
	dim dir, 5
	dim dblist, 2, 800
	dim unlist, 800
	dim citemlist, 800
	sdim csv, 1000, 40
	sdim filemod
	sdim loadedbuff, 20000
	memset loadedbuff, 0, 20000
	bufflast = 0
	loadedbuffmax = 20000
	sdim csvbuff, 10000
	sdim csvidx, 100, 40
	sdim inputlog, 100
	sdim key, 20
	sdim keylog, 20
	sdim msg, 120, inf_maxlog
	sdim msgtemp, 1000
	sdim msgref, 200
	sdim randn1, 30, 20
	sdim randn2, 30, 20
	sdim select, 200
	dim n, 40
	dim rtval, 10
	dim list, 3, 1000
	dim list_bk, 3, 1000
	sdim listn, 40, 2, 1000
	dim invctrl, 2
	sdim promptl, 50, 3, 20
	sdim description, 1000, 3
	sdim file, 1000
	sdim folder, 1000
	sdim msgtempprev
	dim mef, 9, 200
	dim adata, 40, 500
	dim qdata, 20, 500
	sdim qname, 40, 500
	dim oqdata, 1, 500
	dim gdata, 1000
	dim genetemp, 1000
	sdim gdatan, 40, 50
	dim mdatatmp, 100
	dim mdata, 100
	sdim mdatan, 20, 2
	sdim cdatan, 40, 10, 245
	sdim s1, 1000
	dim cdata, 500, 245
	dim sdata, 1200, 245
	dim sdataex, 600, 245
	dim spell, 200
	dim spact, 500
	dim ospact, 300
	dim mat, 400
	dim inv, 70, 5481
	dim trait, 500
	dim itemmemory, 3, 850
	dim npcmemory, 2, 850
	dim recipememory, 1200
	dim invmark, 36
	dim commark, 3
	dim feat, 5
	sdim iname, 40
	dim val, 10
	sdim valn, 50, 10
	dim dirchk, 3, 2
	dirchk(0, 0) = -1, 0, 1
	dirchk(0, 1) = 1, 0, -1
	dim chatval, 5
	dim evlist, 10
	dim matneed, 20
	dim pcc, 30, 20
	maxrain = windoww * windowh / 3500
	dim rainx, maxrain * 2
	dim rainy, maxrain * 2
	sdim fltnrace
	sdim fltnclass
	dim card, 4, 1000
	dim deck, 1000
	dim cnpcmemory, 3, 900
	cnpcmemorymax = 0
	dim userspelldata, 14, 100
	sdim userspelldatan, 40, 6, 100
	gosub *sRefDefine
	gosub *bRefDefine
	gosub *mRefDefine
	gosub *label_1264
	dim rdata, 30, 20
	dup roomexist, rdata(0, 0)
	dup roomx, rdata(0, 1)
	dup roomy, rdata(0, 2)
	dup roomwidth, rdata(0, 3)
	dup roomheight, rdata(0, 4)
	dup roomexit, rdata(0, 5)
	dup roomexitmax, rdata(0, 6)
	dup roomentrancex, rdata(0, 7)
	dup roomentrancey, rdata(0, 8)
	dim idata, 8
	dim dirxy, 2, 4
	dirxy(0, 3) = 0, -1
	dirxy(0, 0) = 0, 1
	dirxy(0, 1) = -1, 0
	dirxy(0, 2) = 1, 0
	dim c_col, 3, 30
	c_col(0, COLOR_DEFAULT) = 0, 0, 0
	c_col(0, COLOR_GREEN) = 80, 0, 80
	c_col(0, COLOR_RED) = 0, 100, 100
	c_col(0, COLOR_BLUE) = 80, 80, 0
	c_col(0, COLOR_BROWN) = 0, 40, 80
	c_col(0, COLOR_YELLOW) = 0, 0, 80
	c_col(0, COLOR_BLACK) = 100, 101, 102
	c_col(0, COLOR_PURPLE) = 70, 100, 40
	c_col(0, COLOR_SKY_BLUE) = 100, 50, 50
	c_col(0, COLOR_PINK) = 0, 60, 70
	c_col(0, COLOR_ORANGE) = 20, 40, 100
	c_col(0, COLOR_WHITE) = 0, 0, 0
	c_col(0, COLOR_FRESH) = 30, 40, 70
	c_col(0, COLOR_DARK_GREEN) = 150, 20, 150
	c_col(0, COLOR_GRAY) = 50, 50, 50
	c_col(0, COLOR_LIGHT_RED) = 0, 30, 30
	c_col(0, COLOR_LIGHT_BLUE) = 30, 30, 0
	c_col(0, COLOR_LIGHT_PURPLE) = 30, 60, 0
	c_col(0, COLOR_LIGHT_GREEN) = 40, 0, 40
	c_col(0, COLOR_TALK) = 45, 5, 95
	text_init
	dim dirchk, 3, 2
	dirchk(0, 0) = -1, 0, 1
	dirchk(0, 1) = 1, 0, -1
	dim val_skill, 5
	sdim valn_skill, 40, 3
	dim cs_posbk, 4
	dim floorstack, 400
	sdim key_list, 2, 20
	sdim playerheader, 100
	sdim artifactlocation
	sdim newsbuff
	sdim soundfile, 30, 132
	sdim musicfile, 30, 92 + 5
	dim slight, inf_screenw + 4, inf_screenh + 4
	dim slightbk, inf_screenw + 4, inf_screenh + 4
	sdim faction, 128, 245 + 50
	dim ocdata, 250, 245
	dim ogdata, 550
	dim oadata, 50
	dim stgdata, 550
	dim ncgdata, 550
	sdim ncgsdata, 128, 100
	dim nc_ai, 16, 10, 45
	dim dim_buf, 100
	dim trophy, 50
	sdim oadatastr, 10, 32
	sdim musiclist, 40, 50
	sdim cnamelist, 40, 50
	dim cmgdata, 100, 500
	dim cmgbuff, 100
	dim nc_cmgbuff, 100
	dim takeover, 10
	takeover(0) = 1, 1, 1, 1, 1, 1, 1, 1, 1, 1
	aipage = 3
	dim resmusic, 50
	dimtype lint_damage, vartype("longint"), 1
	dimtype lint_damage_hp, vartype("longint"), 1
	dimtype lint_efp, vartype("longint"), 1
	dimtype lint_buff, vartype("longint"), 1
	if ( jp ) {
		oadatastr = "óÕ", "ñYãp", "å«ì∆", "âe", "åeÇ¢", "ínçñ", "ñ≤å∂", "óÖôã", "ñÇ", "ìﬁóé", "ã∂êMé“", "óﬁ", "ÉvÉ`ÇÃëÉ", "ïsévãc", "àŸå`", "à√à≈", "ìêëØ", "ÅsîíñÈÅt", "Åsã…ñÈÅt"
	}
	else {
		oadatastr = "Might", "Forgetful", "Lonely", "Shadow", "Calm", "Purgatory", "Illusion", "Maneater", "Magic", "Hellish", "Zealot", "", "", "Mysterious", "Anomalous", "Dark", "Thieves", "<WriteNight>", "<MidNight>"
	}
	dim junban, 245
	dim searchene, 15
	dim encprocref2, 6
	dim trashinv, 70, 400
	trashcnt = 0
	dim mondmg, 16, 20
	dim dmgpack, 5, 245
	sdim mondmgn, 20, 20
	mondmgcnt = 0
	dmgdisplayflag = 0
	cfg_dmgmonitor = cfg_dmgmonitor0 + cfg_dmgmonitor1 + cfg_dmgmonitor2 + cfg_dmgmonitor3
	dim weaponenc, 2
	dim txtpopup, 16, 20
	sdim txtpopupn, 1000
	txtpopupcnt = 0
	locvar_txt_conv_tmpfont = 0, cfg_txtpopfont, 0
	dim oom_popup, 2
	locvar_addnews_setting = 0
	enccategory = 10000, 20000, 30000, 60000, 70000, 80000, 90000, 100000
	sdim enccategoy, 10, 8
	if ( jp ) {
		enccategoryn = "éÂî\óÕè„è∏", "ëœê´è„è∏", "ÉXÉLÉãè„è∏", "éÂî\óÕà€éù", "ëÆê´í«â¡É_ÉÅÅ[ÉW", "î≠ìÆå¯â ", "ì¡éÍíe", "ÇªÇÃëº"
	}
	else {
		enccategoryn = "Attributes+", "Resistance+", "Skill+", "Remains attributs", "Deals elemental damage", "Invokes", "Special ammo", "Others"
	}
	encselect = 0
	if ( jp ) {
		_resiststr0 = "âŒ", "ó‚", "óã", "à≈", "å∂", "ì≈", "çñ", "âπ", "ê_", "ì◊", "ñÇ"
		_resiststr1 = "ãÿ", "ëœ", "äÌ", "ä¥", "èK", "à”", "ñÇ", "ñ£", "ë¨", "â^", "ñ”", "ñÉ", "ç¨", "ã∞", "êá", "ì≈"
	}
	else {
		_resiststr0 = "Fi", "Co", "Li", "Da", "Mi", "Po", "Nt", "So", "Nr", "Ch", "Ma"
		_resiststr1 = "ST", "CO", "DE", "PE", "LE", "WI", "MA", "CH", "SP", "LU", "Bl", "Pa", "Co", "Fe", "Sl", "Po"
	}
	dim gdatac, 1000
	sdim printlog, 100, 4
	sdim _strackdata, 100, 4
	viewinfo = 1
	sdim varesname, 30, 32
	dim varequipsave, 4, 30, 32
	locvar_addnews_hide_popup = 0
	dim cs_config, 18
	dim oom_color, 6, 10
	ccolor 401
	if ( stat ) {
		oom_color(0, 1) = oom_tmpcolor(0), oom_tmpcolor(1), oom_tmpcolor(2), oom_tmpcolor(3), oom_tmpcolor(4), oom_tmpcolor(5)
	}
	else {
		oom_color(0, 1) = 255, 255, 255, 150, 100, 50
	}
	ccolor 402
	if ( stat ) {
		oom_color(0, 2) = oom_tmpcolor(0), oom_tmpcolor(1), oom_tmpcolor(2), oom_tmpcolor(3), oom_tmpcolor(4), oom_tmpcolor(5)
	}
	else {
		oom_color(0, 2) = 255, 255, 255, 50, 100, 150
	}
	ccolor 403
	if ( stat ) {
		oom_color(0, 3) = oom_tmpcolor(0), oom_tmpcolor(1), oom_tmpcolor(2), oom_tmpcolor(3), oom_tmpcolor(4), oom_tmpcolor(5)
	}
	else {
		oom_color(0, 3) = 255, 255, 255, 50, 100, 150
	}
	ccolor 404
	if ( stat ) {
		oom_color(0, 4) = oom_tmpcolor(0), oom_tmpcolor(1), oom_tmpcolor(2), oom_tmpcolor(3), oom_tmpcolor(4), oom_tmpcolor(5)
	}
	else {
		oom_color(0, 4) = 255, 255, 255, 150, 100, 50
	}
	locvar_txt_conv_fontlist = "" + lang(cfg_font1, cfg_font2)
	exist exedir + "user\\cfont.txt"
	if ( strsize != (-1) ) {
		locvar_addnews_s = ""
		locvar_addnews_i = 1
		notesel locvar_addnews_s
		noteload exedir + "user\\cfont.txt"
		repeat noteinfo(0)
			noteget locvar_addnews_s(1), cnt
			font locvar_addnews_s(1), 10, 0
			if ( stat != (-1) ) {
				locvar_addnews_f = 1
				begin_foreach
				foreach locvar_txt_conv_fontlist
					if ( locvar_txt_conv_fontlist(cnt) == locvar_addnews_s(1) ) {
						locvar_addnews_f = 0
						break
					}
				loop
				if ( locvar_addnews_f == 1 ) {
					locvar_txt_conv_fontlist(locvar_addnews_i) = locvar_addnews_s(1)
					locvar_addnews_i++
				}
			}
		loop
	}
	locvar_addnews_tm = -1
	trash_reset
	dim csetspelllist, 66
	dim csetabilitylist, 61
	dim olist, 500
	dim fusionlist, 2, 15
	sdim userfilelist, 160, 2, 900
	gsel BUFFER_INF
	gmode 0
	redraw 0
	color 1, 1, 1
	font lang(cfg_font1, cfg_font2), 15 - en * 2, 0
	repeat 18
		pos cnt * 24 + 72, 30
		gcopy BUFFER_INF, 0, 30, 24, 18
		pos cnt * 24 + 77, 31
		color 50, 60, 80
		bmes key_select(cnt), 250, 240, 230
	loop
	gsel BUFFER_SCREEN
	gmode 2
	text_set
	notesel msg_log
	repeat inf_maxlog - 2
		noteadd ""
	loop
	noteadd lang("Å°ÉÅÉbÉZÅ[ÉWÉçÉO", "<Message Log>")
	noteadd lang("âﬂãéÇÃ20çsï™ÇÃÉÅÉbÉZÅ[ÉWÇ™ï\é¶Ç≥ÇÍÇ‹Ç∑ÅB", "Past 20 message lines are logged.")
	ctrlfile 10
	tc = CHARA_PLAYER
	locvar_randskill_tcol = 255, 255, 255
	invctrl = 0, 0
	pos -40, -40
	mesbox keylog, 0, 0, 1, 10
	sdim buffboard
	notesel buffboard
	noteload exedir + "data\\board.txt"
	notesel buff
	noteload exedir + "data\\nc_board.txt"
	buffboard += buff
	notesel buffboard
	sdim filter_item, 850
	sdim rffilter_item, 850
	sdim ioriginalnameref, 850
	sdim ioriginalnameref2, 850
	sdim iknownnameref, 850
	sdim ialphanameref, 850
	dim irandomname, 850
	dim icolref
	dim keybd_st, 256
	dim trate, 8
	sdim filtern
	sdim filter_creature
	sdim netbuf, 20000
	sdim titlename, 50, 71
	sdim titlename2, 100, 71
	sdim abysstitlename, 50, 12
	sdim abysstitlename2, 100, 12
	sdim title_description, 1000, 3
	sdim nc_key_log, 32, 100
	dim nc_key_roop, 100
	gosub *del_userNpc
	gosub *del_userTemp
	gosub *db_setFilterRace
	gosub *db_setFilterCreature
	gosub *db_setFilterItem
	gosub *chip_init
	gosub *building_init
	gosub *label_2367
	gosub *setCellObj
	gosub *label_0924
	gRandSeedA = rnd(800) + 2
	gRandSeedB = rnd(200) + 2
	gosub *db_setItem
	gosub *label_5825
	gosub *trait_init
	gosub *rank_init
	gosub *label_4584
	gosub *label_0045
	gosub *item_materialInit
	gosub *item_egoInit
	gosub *item_encInit
	gosub *label_1806
	gosub *label_4340
	gosub *label_4433
	gosub *item_foodInit
	gosub *label_2525
	gosub *fish_init
	gosub *map_randNameInit
	gosub *label_2102
	gosub *label_4351
	if ( cfg_useffhp ) {
		gosub *label_0940
	}
	if ( cfg_usecharaffhp ) {
		gosub *label_0943
	}
	gosub *label_4514
	gosub *label_3093
	gosub *label_4258
	if ( cfg_music == 1 ) {
		DMINIT
		if ( stat == 0 ) {
			cfg_music = 2
		}
	}
	if ( cfg_music == 3 ) {
		pluginFunction -1100
	}
	if ( cfg_sound == 1 ) {
		DSINIT
		if ( stat == 0 ) {
			cfg_sound = 2
		}
	}
	if ( cfg_joypad == 1 ) {
		DIINIT
		DIGETJOYNUM
		if ( stat == 0 ) {
			cfg_joypad = 0
		}
	}
	gosub *label_4536
	gosub *sound_init
	gosub *music_init
	mainskill = 173, 106, 108
	dim cycle, 15, 5
	sdim cyclekey, 5, 15
	cycle(0, 0) = 1, 2, 5, 7, 8, 9, 14, 15, 17, 26, -1
	cycle(0, 1) = 1, 5, 7, 8, 14, -1
	cycle(0, 2) = 10, 25, -1
	cycle(0, 3) = 22, 24, -1
	cycle(0, 4) = 2, -1
	cyclemax = 9, 4, 1, 1, 0
	shadowmap = 0, 9, 10, 5, 12, 7, 0, 1, 11, 0, 6, 3, 8, 4, 2, 0, 0
	lastctrl = 1
	dim invicon, 40
	sdim invkey, 4, 40
	invkey = "", "" + key_inventory, "" + key_drop, "", "", "" + key_eat, "", "" + key_read, "" + key_drink, "" + key_zap, "", "", "", "", "" + key_use, "" + key_open, "", "" + key_dip
	invkey(26) = "" + key_throw
	invicon = -1, 7, 8, -1, -1, 2, -1, 3, 0, 1, 17, -1, -1, -1, 5, 4, -1, 6, -1, -1, -1, -1, 17, -1, 17, 17, 18, -1, -1, -1
	if ( cfg_autonumlock ) {
		GetKeyboardState keybd_st
		if ( peek(keybd_st, 144) == 1 ) {
			keybd_event 144
			keybd_event 144, 0, 2
		}
	}
	gosub *label_4577
	gosub *label_4429
	gosub *label_4626
	gosub *label_4708
	gosub *label_2790
	bsave exedir + "data\\oo_version", ooversionstr, 3
	goto *label_4125

*exit_game
	if ( cfg_music == 1 ) {
		DMEND
	}
	else {
		if ( cfg_music == 3 ) {
			pluginFunction
		}
	}
	if ( cfg_sound == 1 ) {
		DSEND
	}
	if ( ieopen ) {
		delcom ie_event
		delcom ie
	}
	if ( cfg_autonumlock ) {
		keybd_event 144
		keybd_event 144, 0, 2
	}
	if ( mutex_handle != 0 ) {
		CloseHandle mutex_handle
	}
	end

*exit_game_error
	if ( errorhack > 1 ) {
		goto *exit_game
	}
	else {
		errorhack++
	}
	await
	buf = "Line " + lparam + " HspError " + wparam + " WinError " + GetLastError() + " Ver " + int(double("1.22") * 1000) + " oomEx Sukutu Edition STep Nasuko Custom" + releaseday + " Mode " + mode + "\n"
	buf += "" + oomsest_gethumanreadableerrorreason(wparam) + "\n"
	buf += "efId " + efid + " efP " + efp + " Area " + gArea  + "(" + mapname(gArea ) + ")\n"
	buf += "ci "
	if ( ci < 200 ) {
		buf += "0(" + ci + ")"
		if ( ci >= 0 ) {
			buf += "\t#" + iID(ci) + ":" + ioriginalnameref(iID(ci))
		}
	}
	if ( ci >= 5080 ) {
		buf += "-1(" + ci + ")"
		if ( ci < 5480 ) {
			buf += "\t#" + iID(ci) + ":" + ioriginalnameref(iID(ci))
		}
	}
	if ( ci >= 200 ) {
		if ( ci < 5080 ) {
			buf += "" + ((ci - 200) / 20 + 1) + "(" + ci + ")"
			buf += "\t#" + iID(ci) + ":" + ioriginalnameref(iID(ci))
		}
	}
	buf += "\n"
	buf += "ti "
	if ( ti < 200 ) {
		buf += "0(" + ti + ")"
		if ( ti >= 0 ) {
			buf += "\t#" + iID(ti) + ":" + ioriginalnameref(iID(ti))
		}
	}
	if ( ti >= 5080 ) {
		buf += "-1(" + ti + ")"
		if ( ti < 5480 ) {
			buf += "\t#" + iID(ti) + ":" + ioriginalnameref(iID(ti))
		}
	}
	if ( ti >= 200 ) {
		if ( ti < 5080 ) {
			buf += "" + ((ti - 200) / 20 + 1) + "(" + ti + ")"
			buf += "\t#" + iID(ti) + ":" + ioriginalnameref(iID(ti))
		}
	}
	buf += "\n"
	buf += "cc " + cc
	if ( cc >= CHARA_PLAYER & cc < MAX_CHARA_TOTAL ) {
		buf += "\t#" + cId(cc) + ":" + cnName(cc)
	}
	buf += "\n"
	buf += "tc " + tc
	if ( tc >= CHARA_PLAYER & tc < MAX_CHARA_TOTAL ) {
		buf += "\t#" + cId(tc) + ":" + cnName(tc)
	}
	buf += "\n"
	buf += "rc " + rc
	if ( rc >= CHARA_PLAYER & rc < MAX_CHARA_TOTAL ) {
		buf += "\t#" + cId(rc) + ":" + cnName(rc)
	}
	buf += "\n"
	buf += "cw "
	if ( cw < 200 ) {
		buf += "0(" + cw + ")"
		if ( cw >= 0 ) {
			buf += "\t#" + iID(cw) + ":" + ioriginalnameref(iID(cw))
		}
	}
	if ( cw >= 5080 ) {
		buf += "-1(" + cw + ")"
		if ( cw < 5480 ) {
			buf += "\t#" + iID(cw) + ":" + ioriginalnameref(iID(cw))
		}
	}
	if ( cw >= 200 ) {
		if ( cw < 5080 ) {
			buf += "" + ((cw - 200) / 20 + 1) + "(" + cw + ")"
			buf += "\t#" + iID(cw) + ":" + ioriginalnameref(iID(cw))
		}
	}
	buf += "\n"
	repeat 10
		buf += "" + proclist((procid + cnt + 1) \ 10) + "\n"
	loop
	repeat 245
		if ( cExist(cnt) != CHAR_STATE_ALIVE ) {
			continue
		}
		if ( cX(cnt) < 0 | cX(cnt) >= mWidth | cY(cnt) < 0 | cY(cnt) >= mHeight ) {
			buf += "* invalid chara position " + cnt + "#" + cId(cnt) + "(" + cX(cnt) + "/" + cY(cnt) + ") max(" + mWidth + "/" + mHeight + ")\n"
		}
	loop
	repeat 400, 5080
		if ( mode == MODELIST_SHOP ) {
			break
		}
		if ( iNum(cnt) <= 0 ) {
			continue
		}
		if ( iX(cnt) < 0 | iX(cnt) >= mWidth | iY(cnt) < 0 | iY(cnt) >= mHeight ) {
			iX(cnt) = 0
			iY(cnt) = 0
			buf += "* invalid item position " + cnt + "#" + iID(cnt) + "(" + iX(cnt) + "/" + iY(cnt) + ") max(" + mWidth + "/" + mHeight + ")\n"
		}
	loop
	if ( characreatehack ) {
		buf += "* error in function:chara_create:#" + (characreatehack - 1) + "\n"
	}
	if ( itemcreatehack ) {
		buf += "* error in function:item_create:#" + (itemcreatehack - 1) + "\n"
	}
	if ( chararefreshhack ) {
		buf += "* error in function:charaRefresh\n"
	}
	if ( itemnamehack ) {
		buf += "* error in function:itemName:#" + (itemnamehack - 1) + "\n"
	}
	if ( screendrawhack ) {
		buf += "* error in function:screen_draw:" + screendrawhack + "\n"
	}
	if ( gArea  == AREA_SHOW_HOUSE ) {
		buf += "* (possibly)invalid show room:#" + usermapid + "\n"
	}
	if ( ci < 0 ) {
		buf += "* ci is below 0\n"
	}
	if ( ci >= 5480 ) {
		buf += "* ci is above max\n"
	}
	if ( ti < 0 ) {
		buf += "* ti is below 0\n"
	}
	if ( ti >= 5480 ) {
		buf += "* ti is above max\n"
	}
	if ( cc < CHARA_PLAYER ) {
		buf += "* cc is below 0\n"
	}
	if ( cc >= MAX_CHARA_TOTAL ) {
		buf += "* cc is above max\n"
	}
	if ( tc < CHARA_PLAYER ) {
		buf += "* tc is below 0\n"
	}
	if ( tc >= MAX_CHARA_TOTAL ) {
		buf += "* tc is above max\n"
	}
	if ( rc < CHARA_PLAYER ) {
		buf += "* rc is below 0\n"
	}
	if ( rc >= MAX_CHARA_TOTAL ) {
		buf += "* rc is above max\n"
	}
	if ( hack_equipfilter ) {
		buf += "* enchantment filter\n"
	}
	if ( hack_quest ) {
		buf += "* quest time\n"
	}
	if ( hack_dmgmonitor ) {
		buf += "* damage popup\n"
	}
	if ( hack_strack ) {
		buf += "* extra skill tracker\n"
	}
	if ( hack_furniture ) {
		buf += "* 8-dir furniture\n"
	}
	if ( hack_autofarm ) {
		buf += "* auto-harvest\n"
	}
	if ( hack_autob ) {
		buf += "* auto-bash\n"
	}
	if ( hack_targetex ) {
		buf += "* extra target info:" + hack_targetex + "\n"
	}
	if ( hack_alertstarvation ) {
		buf += "* alert starving\n"
	}
	if ( hack_plant ) {
		buf += "* auto-plant\n"
	}
	if ( hack_txtpopup ) {
		buf += "* speech balloon" + hack_txtpopup
	}
	if ( jp ) {
		buf += "\n\nîÒåˆéÆÉoÅ[ÉWÉáÉìÇ≈Ç∑ÅBÉoÉOïÒçêÇÕDiscordÇ‡ÇµÇ≠ÇÕask.fmÇ‹Ç≈Ç®äËÇ¢ÇµÇ‹Ç∑ÅB"
	}
	else {
		buf += "\n\nIt is an unofficial version. Please report an issue to Discord of ask.fm."
	}
	if ( jp ) {
		if ( wparam == 1 ) {
			buf += "\n"
			buf += "\nÅyÉGÉâÅ[ÇÃê‡ñæÅz"
			buf += "\nHspError 1 ÇÕÅcÅcÇ±ÇÍÇÕÇøÇÂÇ¡Ç∆Ç‹Ç∏Ç¢Ç≈Ç∑ÇÀÅBÇ±ÇÍÇÕäÓñ{ìIÇ…Ç®Ç‹ä¬ÇÃÉGÉâÅ[Ç≈Ç∑ÅB"
			buf += "\nÉtÉ@ÉCÉãÇ™îjëπÇµÇƒÇ¢ÇΩÇËó\ä˙ÇµÇ»Ç¢àŸèÌÇ™ãNÇ±Ç¡ÇΩç€Ç…î≠ê∂ÇµÇ‹Ç∑ÅB"
			buf += "\nÉXÉyÉbÉNÇ™í·Ç¢ÇoÇbÇæÇ∆ãNÇ±ÇËÇ‚Ç∑Ç¢Ç∆Ç‡åæÇÌÇÍÇƒÇ¢Ç‹Ç∑ÅBïpî≠Ç∑ÇÈÇÊÇ§Ç≈Ç†ÇÍÇŒçƒÉCÉìÉXÉgÅ[ÉãÇåüì¢ÇµÇƒÇ≠ÇæÇ≥Ç¢ÅB"
		}
		if ( wparam == 12 ) {
			buf += "\n"
			buf += "\nÅyÉGÉâÅ[ÇÃê‡ñæÅz"
			buf += "\nHspError 12 ÇÕâÊëúà»äOÇÃïKóvÇ»ÉtÉ@ÉCÉãÇ™ì«Ç›çûÇﬂÇ»Ç¢éûÇ…î≠ê∂ÇµÇ‹Ç∑ÅB"
			buf += "\nÉtÉ@ÉCÉãÇ™îjëπÇµÇƒÇ¢ÇΩÇËÉZÉLÉÖÉäÉeÉBÉ\ÉtÉgÇ…ÇÊÇ¡ÇƒÉuÉçÉbÉNÇ≥ÇÍÇƒÇ¢ÇÈèÍçáÇ™Ç†ÇËÇ‹Ç∑ÇÃÇ≈Ç≤ämîFÇÅB"
		}
		if ( wparam == 13 ) {
			buf += "\n"
			buf += "\nÅyÉGÉâÅ[ÇÃê‡ñæÅz"
			buf += "\nHspError 13 ÇÕïKóvÇ»âÊëúÉtÉ@ÉCÉãÇ™ì«Ç›çûÇﬂÇ»Ç¢éûÇ…î≠ê∂ÇµÇ‹Ç∑ÅB"
			buf += "\nÉtÉ@ÉCÉãÇ™îjëπÇµÇƒÇ¢ÇΩÇËÉZÉLÉÖÉäÉeÉBÉ\ÉtÉgÇ…ÇÊÇ¡ÇƒÉuÉçÉbÉNÇ≥ÇÍÇƒÇ¢ÇÈèÍçáÇ™Ç†ÇËÇ‹Ç∑ÇÃÇ≈Ç≤ämîFÇÅB"
		}
		if ( wparam == 38 ) {
			buf += "\n"
			buf += "\nÅyÉGÉâÅ[ÇÃê‡ñæÅz"
			buf += "\nHspError 38 ÇÕïKóvÇ»ägí£ÉâÉCÉuÉâÉäÉtÉ@ÉCÉã(.dllÉtÉ@ÉCÉã)Ç™ì«Ç›çûÇﬂÇ»Ç¢éûÇ…î≠ê∂ÇµÇ‹Ç∑ÅB"
			buf += "\nÉtÉ@ÉCÉãÇ™îjëπÇµÇƒÇ¢ÇΩÇËÉZÉLÉÖÉäÉeÉBÉ\ÉtÉgÇ…ÇÊÇ¡ÇƒÉuÉçÉbÉNÇ≥ÇÍÇƒÇ¢ÇÈèÍçáÇ™Ç†ÇËÇ‹Ç∑ÇÃÇ≈Ç≤ämîFÇÅB"
		}
	}
	if ( nc_intb_nightmare ) {
		buf += "\n\nÉiÉCÉgÉÅÉAÉÇÅ[ÉhÇ≈ÉvÉåÉCíÜÇ≈Ç∑ÅBã~çœópÉtÉ@ÉCÉãÇê∂ê¨ÇµÇ‹ÇµÇΩÅB"
	}
	notesel buf
	notesave exedir + "error.txt"
	exec exedir + "error.txt", 16
	if ( nc_intb_nightmare ) {
		buf = ""
		notesel buf
		buf += "747474nightmarehelp" + gArea 
		notesave exedir + "save\\nightmarehelp.save"
	}
	goto *exit_game
	goto *cloud_init
































































































































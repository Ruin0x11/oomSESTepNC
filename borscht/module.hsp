#deffunc csvstr2 array csvstr2_arg1, str csvstr2_arg2
	locvar_csvstr2_word = csvstr2_arg2
	locvar_csvstr2_p = 0
	locvar_csvstr2_i = strlen(locvar_csvstr2_word)
	repeat 40
		csvstr2_arg1(cnt) = ""
		getstr csvstr2_arg1(cnt), locvar_csvstr2_word, limit(locvar_csvstr2_p, 0, locvar_csvstr2_i), 44
		if ( strsize > locvar_csvstr2_i ) {
			break
		}
		locvar_csvstr2_p += strsize
	loop
	return

#deffunc cargocheck
	if ( refitem(iID(ci), DBSPEC_CARGO, ci) == 0 ) {
		return 1
	}
	if ( mType != MAP_TYPE_WORLD & mType != MAP_TYPE_HOME & mType != MAP_TYPE_TOWN & mType != (4 /*!!!@[MAP_TYPE_DUNGEON_RANGE @@@ MAP_TYPE_LOCAL]@!!! */) & mType != MAP_TYPE_FIELD & mType != MAP_TYPE_VILLAGE ) {
		msgdup++
		txt -1, lang("荷車の荷物は街か野外でしか操作できない。", "You can only use cargo items on the surface.")
		snd SOUNDLIST_FAIL1
		return 0
	}
	else {
		return 1
	}
	goto *label_1136

#deffunc rndshuffle array rndshuffle_arg1, int rndshuffle_prm1
	if ( rndshuffle_prm1 == 0 ) {
		locvar_rndshuffle_p = length(rndshuffle_arg1)
	}
	else {
		locvar_rndshuffle_p = rndshuffle_prm1
	}
	repeat locvar_rndshuffle_p
		locvar_rndshuffle_r = rnd(locvar_rndshuffle_p)
		locvar_rndshuffle_p--
		locvar_rndshuffle_i = rndshuffle_arg1(locvar_rndshuffle_r)
		rndshuffle_arg1(locvar_rndshuffle_r) = rndshuffle_arg1(locvar_rndshuffle_p)
		rndshuffle_arg1(locvar_rndshuffle_p) = locvar_rndshuffle_i
	loop
	return

#defcfunc dist int dist_arg1, int dist_arg2, int dist_arg3, int dist_arg4
	locvar_dist_d = (dist_arg1 - dist_arg3) * (dist_arg1 - dist_arg3) + (dist_arg2 - dist_arg4) * (dist_arg2 - dist_arg4)
	return int(sqrt(locvar_dist_d))

#defcfunc winposy int winposy_arg1, int winposy_arg2
	if ( winposy_arg2 == 0 ) {
		return ((inf_screenh + 1) * inf_tiles - winposy_arg1) / 2 + 8
	}
	return (windowh - winposy_arg1) / 2

#deffunc cutname var cutname_arg1, int cutname_arg2
	if ( strlen(cutname_arg1) > cutname_arg2 ) {
		locvar_cutname_len = zentohan(cutname_arg1, locvar_cutname_buf, 0)
		sdim locvar_cutname_buf, locvar_cutname_len
		locvar_cutname_ret = zentohan(cutname_arg1, cutname_arg1, locvar_cutname_len)
		if ( strlen(cutname_arg1) > cutname_arg2 ) {
			locvar_cutname_len = 0
			repeat
				if ( locvar_cutname_len >= cutname_arg2 ) {
					break
				}
				locvar_cutname_p = peek(cutname_arg1, locvar_cutname_len)
				if ( locvar_cutname_p >= 129 & locvar_cutname_p <= 159 | locvar_cutname_p >= 224 & locvar_cutname_p <= 252 ) {
					locvar_cutname_p = 2
				}
				else {
					locvar_cutname_p = 1
				}
				locvar_cutname_len += locvar_cutname_p
			loop
			cutname_arg1 = strmid(cutname_arg1, 0, locvar_cutname_len) + ".."
		}
	}
	return

#deffunc cs_list str cs_list_arg1, int cs_list_arg2, int cs_list_arg3, int cs_list_arg4, int cs_list_arg5, int cs_list_arg6, int cs_list_arg7
	if ( cs == cnt ) {
		locvar_cs_list_tx = limit(strlen(cs_list_arg1) * 7 + 32 + cs_list_arg5, 10, 480)
		gsel BUFFER_INF
		pos 264, 96
		gcopy BUFFER_SCREEN, cs_list_arg2, cs_list_arg3, locvar_cs_list_tx, cs_list_arg4
		gsel BUFFER_SCREEN
		pos cs_list_arg2, cs_list_arg3
		gfini locvar_cs_list_tx, cs_list_arg4
		gfdec2 30, 10, 0
		pos cs_list_arg2 + 1, cs_list_arg3 + 1
		gfini locvar_cs_list_tx - 2, cs_list_arg4 - 2
		gfinc 50, 50, 50
		pos cs_list_arg2 + locvar_cs_list_tx - 20, cs_list_arg3 + 4
		gcopy BUFFER_INF, 48, 360, 16, 16
		cs_posbk = cs_list_arg2, cs_list_arg3, locvar_cs_list_tx, cs_list_arg4
	}
	if ( cs_list_arg6 == 0 ) {
		color 10, 10, 10
	}
	if ( cs_list_arg6 == 1 ) {
		color 0, 0, 0
		if ( iKnown(cs_list_arg7) >= ITEM_KNOWN_FULL ) {
			color 10, 40, 120
			if ( iStatus(cs_list_arg7) == ITEM_STATUS_BLESSED ) {
				color 10, 110, 30
			}
			if ( iStatus(cs_list_arg7) == ITEM_STATUS_CURSED ) {
				color 150, 10, 10
			}
			if ( iStatus(cs_list_arg7) == ITEM_STATUS_DOOMED ) {
				color 100, 10, 100
			}
		}
		if ( ibit(ITEM_BIT_NO_DROP, cs_list_arg7) ) {
			color 120, 80, 0
		}
		if ( ibit(22, cs_list_arg7) ) {
			color 100, 100, 250
		}
	}
	if ( cs_list_arg6 == 2 ) {
		color 240, 240, 240
	}
	if ( cs_list_arg6 == 3 ) {
		color 160, 10, 10
	}
	if ( cs_list_arg6 == 4 ) {
		if ( ogdata(440 + cs_list_arg7) == 1 | ogdata(440 + cs_list_arg7) == 0 ) {
			color 130, 130, 130
		}
		else {
			color 10, 10, 10
		}
	}
	if ( cs_list_arg6 == 5 ) {
		color 130, 130, 130
	}
	if ( cs_list_arg6 == 6 ) {
		color 10, 10, 10
	}
	if ( cs_list_arg6 == 7 ) {
		if ( ncgdata(STARTING_NCGDATA_ABYSS_TITLES + cs_list_arg7) == 0 ) {
			color 130, 130, 130
		}
		else {
			color 10, 10, 10
		}
	}
	pos cs_list_arg2 + 4 + cs_list_arg5, cs_list_arg3 + 3
	mes cs_list_arg1
	return

#deffunc cs_listbk
	if ( cs_bk == (-1) ) {
		return
	}
	pos cs_posbk, cs_posbk(1)
	gcopy BUFFER_INF, 264, 96, cs_posbk(2), cs_posbk(3)
	return

#deffunc gohostile
	repeat 188, 57
		dup roopbuf, cRole(cnt)
		if ( roopbuf == 14 | roopbuf == 16 | roopbuf == 1010 ) {
			cRelation(cnt) = RELATION_ENEMY
			cAiAggro(cnt) = 80
			cEmoIcon(cnt) = 18 + 100 * 2
			lockon cnt, 0, 0
		}
	loop
	return

#deffunc modkarma int modkarma_arg1, int modkarma_arg2
	locvar_modkarma_a = modkarma_arg2
	if ( locvar_modkarma_a < 0 & cKarma(modkarma_arg1) < 0 ) {
		decjusticweapon modkarma_arg1
	}
	if ( gettrait(modkarma_arg1, 162) ) {
		if ( locvar_modkarma_a < 0 ) {
			locvar_modkarma_a = locvar_modkarma_a * 75 / 100
			if ( locvar_modkarma_a == 0 ) {
				return
			}
		}
	}
	if ( gettrait(modkarma_arg1, 169) ) {
		if ( locvar_modkarma_a < 0 ) {
			locvar_modkarma_a = locvar_modkarma_a * 150 / 100
		}
	}
	if ( trophycheck(TROPHY_NO GROWTH) == 2 & locvar_modkarma_a > 0 ) {
		locvar_modkarma_a = locvar_modkarma_a * 2
	}
	if ( locvar_modkarma_a >= 0 ) {
		txtef COLOR_YELLOW
	}
	else {
		txtef COLOR_PURPLE
	}
	txt -1, lang("カルマ変動(" + locvar_modkarma_a + ") ", "Karma(" + locvar_modkarma_a + ")")
	if ( locvar_modkarma_a > 0 ) {
		if ( cKarma(modkarma_arg1) < (-30) ) {
			if ( cKarma(modkarma_arg1) + locvar_modkarma_a >= (-30) ) {
				txtef COLOR_GREEN
				txt -1, lang("あなたの罪は軽くなった。", "You are no longer a criminal.")
				if ( modkarma_arg1 == 0 ) {
					throwsstpevent "Atonement", 0, "", 0
				}
			}
		}
	}
	if ( locvar_modkarma_a < 0 ) {
		if ( cKarma(modkarma_arg1) >= (-30) ) {
			if ( cKarma(modkarma_arg1) + locvar_modkarma_a < (-30) ) {
				txtef COLOR_PURPLE
				txt -1, lang("あなたは今や罪人だ。", "You are a criminal now.")
				gohostile
				if ( modkarma_arg1 == 0 ) {
					throwsstpevent "BecomeCriminal", 0, "", 0
				}
			}
		}
	}
	cKarma(modkarma_arg1) += locvar_modkarma_a
	locvar_modkarma_max = 20
	if ( gettrait(modkarma_arg1, 162) ) {
		locvar_modkarma_max -= 20
	}
	if ( gettrait(modkarma_arg1, 169) ) {
		locvar_modkarma_max += 20
	}
	if ( ogTitleDoGooder == 2 ) {
		locvar_modkarma_max += 20
	}
	if ( ogTitleLoveSavesTheTyris == 2 ) {
		locvar_modkarma_max += 10
	}
	if ( trophycheck(TROPHY_LONELINESS) == 2 ) {
		locvar_modkarma_max += 10
	}
	if ( cKarma(modkarma_arg1) > locvar_modkarma_max ) {
		cKarma(modkarma_arg1) = locvar_modkarma_max
	}
	if ( cKarma(modkarma_arg1) < (-100) ) {
		cKarma(modkarma_arg1) = -100
	}
	return

#deffunc modrank int modrank_arg1, int modrank_arg2, int modrank_arg3
	locvar_modrank_p = 120 + modrank_arg1
	locvar_modrank_p(1) = gdata(locvar_modrank_p) / 100
	locvar_modrank_orgrank = gdata(locvar_modrank_p)
	locvar_modrank_i = modrank_arg2
	if ( modrank_arg2 > 0 ) {
		locvar_modrank_i = modrank_arg2 * (locvar_modrank_p(1) + 20) * (locvar_modrank_p(1) + 20) / 2500
		gdata(140 + modrank_arg1) = ranknorma(modrank_arg1)
		if ( gdata(locvar_modrank_p) == 100 ) {
			if ( modrank_arg1 == 8 ) {
				newtitle TITLE_TECHNOLOGY_FOR_FREEDOM
			}
			return
		}
		if ( modrank_arg3 != 0 ) {
			if ( locvar_modrank_i / 100 > modrank_arg3 ) {
				locvar_modrank_i = modrank_arg3 * 100
			}
		}
	}
	gdata(locvar_modrank_p) -= locvar_modrank_i
	if ( gdata(locvar_modrank_p) >= 10000 ) {
		gdata(locvar_modrank_p) = 10000
	}
	if ( gdata(locvar_modrank_p) < 100 ) {
		gdata(locvar_modrank_p) = 100
	}
	if ( locvar_modrank_orgrank / 100 != gdata(locvar_modrank_p) / 100 ) {
		locvar_modrank_i = gdata(locvar_modrank_p) / 100 - locvar_modrank_orgrank / 100
		if ( locvar_modrank_i < 0 ) {
			txtef COLOR_GREEN
		}
		else {
			txtef COLOR_PURPLE
		}
		locvar_modrank_s = " " + locvar_modrank_orgrank / 100 + lang("位 → ", " -> ") + gdata(locvar_modrank_p) / 100 + lang("位 ", "")
		txt -1, lang("ランク変動", "Ranking Change ") + "(" + rankn(10, modrank_arg1) + locvar_modrank_s + ") " + lang("《", "<") + ranktitle(modrank_arg1) + lang("》", ">")
	}
	else {
		if ( locvar_modrank_i > 0 ) {
			txtef COLOR_GREEN
			txt -1, lang("着実に次のランクに近づいている。", "You are one step closer to the next rank.")
		}
	}
	if ( modrank_arg1 == 8 ) {
		if ( gdata(locvar_modrank_p) / 100 == 1 ) {
			newtitle TITLE_TECHNOLOGY_FOR_FREEDOM
		}
	}
	return

#defcfunc stexp int stexp_prm0, int stexp_prm1
	return sdata(stexp_prm0, stexp_prm1) \ 1000000 / 1000

#defcfunc sexp int sexp_skillid, int sexp_charid
	return sdata(sexp_skillid + STARTING_SKILL_SPACT, sexp_charid) \ 1000000 / 1000

#defcfunc sgrowth int sgrowth_skillid, int sgrowth_charid
	return sdata(sgrowth_skillid + STARTING_SKILL_SPACT, sgrowth_charid) \ 1000

#deffunc modgrowth int modgrowth_charid, int modgrowth_skillid, int modgrowth_arg3
	locvar_modgrowth_growth = sdata(modgrowth_skillid + STARTING_SKILL_SPACT, modgrowth_charid) \ 1000 + modgrowth_arg3
	if ( ogTitleAthana == 2 ) {
		if ( locvar_modgrowth_growth > 450 + nc_intb_gro1 ) {
			locvar_modgrowth_growth = 450 + nc_intb_gro1
		}
		if ( nc_intb_nightmare & modgrowth_skillid >= 20 ) {
			if ( locvar_modgrowth_growth < 50 ) {
				locvar_modgrowth_growth = 50
			}
			if ( trophycheck(22) == 2 & locvar_modgrowth_growth < 100 ) {
				locvar_modgrowth_growth = 100
			}
		}
		else {
			if ( locvar_modgrowth_growth < 52 ) {
				locvar_modgrowth_growth = 52
			}
			if ( trophycheck(22) == 2 & locvar_modgrowth_growth < 102 ) {
				locvar_modgrowth_growth = 102
			}
		}
	}
	else {
		if ( locvar_modgrowth_growth > 400 + nc_intb_gro1 ) {
			locvar_modgrowth_growth = 400 + nc_intb_gro1
		}
		if ( nc_intb_nightmare & modgrowth_skillid >= 20 ) {
			if ( locvar_modgrowth_growth < 0 ) {
				locvar_modgrowth_growth = 0
			}
			if ( trophycheck(22) == 2 & locvar_modgrowth_growth < 50 ) {
				locvar_modgrowth_growth = 50
			}
		}
		else {
			if ( locvar_modgrowth_growth < 2 ) {
				locvar_modgrowth_growth = 2
			}
			if ( trophycheck(22) == 2 & locvar_modgrowth_growth < 52 ) {
				locvar_modgrowth_growth = 52
			}
		}
	}
	sdata(modgrowth_skillid + STARTING_SKILL_SPACT, modgrowth_charid) = sorg(modgrowth_skillid, modgrowth_charid) * 1000000 + sexp(modgrowth_skillid, modgrowth_charid) * 1000 + locvar_modgrowth_growth
	return

#deffunc skillgain int skillgain_charid, int skillgain_skillid, int skillgain_arg3, int skillgain_arg4
	if ( skillgain_skillid >= 400 ) {
		if ( skillgain_charid == CHARA_PLAYER ) {
			spell(skillgain_skillid - 400) = limit(spell(skillgain_skillid - 400) + skillgain_arg4, 0, 2000000000)
			if ( skillgain_arg3 ) {
				modgrowth2 skillgain_charid, skillgain_skillid, skillgain_arg3
			}
			else {
				modgrowth2 skillgain_charid, skillgain_skillid, 1
			}
		}
	}
	if ( sorg(skillgain_skillid, skillgain_charid) != 0 ) {
		if ( skillgain_skillid < 400 ) {
			modgrowth2 skillgain_charid, skillgain_skillid, 20
		}
		return
	}
	locvar_skillgain_lv = skillgain_arg3
	if ( locvar_skillgain_lv < 1 ) {
		locvar_skillgain_lv = 1
	}
	if ( skillgain_skillid >= 400 ) {
		modgrowth2 skillgain_charid, skillgain_skillid, 200
	}
	else {
		modgrowth2 skillgain_charid, skillgain_skillid, 50
	}
	sdata(skillgain_skillid + STARTING_SKILL_SPACT, skillgain_charid) = limit(locvar_skillgain_lv, 0, 2000) * 1000000 + sexp(skillgain_skillid, skillgain_charid) * 1000 + sgrowth(skillgain_skillid, skillgain_charid)
	r1 = skillgain_charid
	gosub *charaRefresh
	return

#deffunc skillmod int skillmod_skillid, int skillmod_charid, int skillmod_arg3
	locvar_skillmod_lv = sorgex(skillmod_skillid, skillmod_charid)
	locvar_skillmod_exp = sexp(skillmod_skillid, skillmod_charid) + skillmod_arg3
	locvar_skillmod_growth = sgrowth(skillmod_skillid, skillmod_charid)
	if ( locvar_skillmod_growth == 0 ) {
		return
	}
	if ( locvar_skillmod_exp >= 1000 ) {
		locvar_skillmod_lvchange = locvar_skillmod_exp / 1000
		locvar_skillmod_lv += locvar_skillmod_lvchange
		locvar_skillmod_exp = locvar_skillmod_exp \ 1000
		repeat locvar_skillmod_lvchange
			locvar_skillmod_growth = int(double(locvar_skillmod_growth) * 0.9)
			if ( ogTitleAthana == 2 ) {
				if ( locvar_skillmod_growth < 51 ) {
					locvar_skillmod_growth = 51
				}
				if ( trophycheck(22) == 2 & locvar_skillmod_growth < 101 ) {
					locvar_skillmod_growth = 101
				}
			}
			else {
				if ( locvar_skillmod_growth < 1 ) {
					locvar_skillmod_growth = 1
				}
				if ( trophycheck(22) == 2 & locvar_skillmod_growth < 51 ) {
					locvar_skillmod_growth = 51
				}
			}
		loop
		sdata(skillmod_skillid + STARTING_SKILL_SPACT, skillmod_charid) = limit(locvar_skillmod_lv, 0, 2000) * 1000000 + locvar_skillmod_exp * 1000 + locvar_skillmod_growth
		if ( skillmod_charid <= 15 ) {
			if ( ogTitleJunkie != 0 ) {
				if ( 2000 < locvar_skillmod_lv ) {
					sdataex(skillmod_skillid, skillmod_charid) = limit(locvar_skillmod_lv - 2000, 0, 97999)
				}
			}
		}
		if ( synccheck(skillmod_charid, -1) ) {
			if ( skillmod_charid == CHARA_PLAYER | petcheck(skillmod_charid) ) {
				snd SOUNDLIST_DING3
				txtef COLOR_GREEN
			}
			txt -1, txtskillchange(skillmod_skillid, 0, skillmod_charid)
			gosub *label_2665
		}
		r1 = skillmod_charid
		gosub *charaRefresh
		return 1
	}
	if ( locvar_skillmod_exp < 0 ) {
		locvar_skillmod_lvchange = -locvar_skillmod_exp / 1000 + 1
		locvar_skillmod_exp = 1000 + locvar_skillmod_exp \ 1000
		if ( locvar_skillmod_lv - locvar_skillmod_lvchange < 1 ) {
			locvar_skillmod_lvchange = limitmin(locvar_skillmod_lv - 1, 0)
			if ( locvar_skillmod_lv == 1 ) {
				if ( locvar_skillmod_lvchange == 0 ) {
					locvar_skillmod_exp = 0
				}
			}
		}
		locvar_skillmod_lv -= locvar_skillmod_lvchange
		repeat locvar_skillmod_lvchange
			locvar_skillmod_growth = int(double(locvar_skillmod_growth) * (-0.9) + 2) + 1
			if ( ogTitleAthana == 2 ) {
				if ( locvar_skillmod_growth > 450 + nc_intb_gro1 ) {
					locvar_skillmod_growth = 450 + nc_intb_gro1
				}
			}
			else {
				if ( locvar_skillmod_growth > 400 + nc_intb_gro1 ) {
					locvar_skillmod_growth = 400 + nc_intb_gro1
				}
			}
		loop
		sdata(skillmod_skillid + STARTING_SKILL_SPACT, skillmod_charid) = limit(locvar_skillmod_lv, 0, 2000) * 1000000 + locvar_skillmod_exp * 1000 + locvar_skillmod_growth
		if ( skillmod_charid <= 15 ) {
			if ( ogTitleJunkie != 0 ) {
				sdataex(skillmod_skillid, skillmod_charid) = limit(locvar_skillmod_lv - 2000, 0, 97999)
			}
		}
		if ( skillmod_charid == CHARA_PLAYER | petcheck(skillmod_charid) ) {
			if ( synccheck(skillmod_charid, -1) ) {
				if ( locvar_skillmod_lvchange != 0 ) {
					txtef COLOR_RED
					txt -1, txtskillchange(skillmod_skillid, 1, skillmod_charid)
					gosub *label_2665
				}
			}
		}
		r1 = skillmod_charid
		gosub *charaRefresh
		return 1
	}
	sdata(skillmod_skillid + STARTING_SKILL_SPACT, skillmod_charid) = limit(locvar_skillmod_lv, 0, 2000) * 1000000 + locvar_skillmod_exp * 1000 + locvar_skillmod_growth
	if ( skillmod_charid <= 15 ) {
		if ( ogTitleJunkie != 0 ) {
			if ( 2000 < locvar_skillmod_lv ) {
				sdataex(skillmod_skillid, skillmod_charid) = limit(locvar_skillmod_lv - 2000, 0, 97999)
			}
		}
	}
	return

#deffunc skillexp int skillexp_skillid, int skillexp_charid, int skillexp_amount, int skillexp_arg4, int skillexp_arg5
	if ( sorg(skillexp_skillid, skillexp_charid) == 0 ) {
		return 0
	}
	if ( skillexp_amount == 0 ) {
		return
	}
	if ( skillUse(skillexp_skillid) != SKILL_NONE ) {
		skillexp skillUse(skillexp_skillid), skillexp_charid, skillexp_amount / (2 + skillexp_arg4)
	}
	locvar_skillmod_lv = sorgex(skillexp_skillid, skillexp_charid)
	locvar_skillmod_growth = sgrowth(skillexp_skillid, skillexp_charid)
	if ( locvar_skillmod_growth == 0 ) {
		return
	}
	if ( skillexp_charid == CHARA_PLAYER ) {
		if ( gettrait(skillexp_charid, 193) < 0 ) {
			return
		}
	}
	if ( skillexp_amount > 0 ) {
		locvar_skillmod_exp = limit(skillexp_amount * locvar_skillmod_growth / (100 + locvar_skillmod_lv * 15), 0, 2000000000)
		if ( skillexp_skillid >= SKILL_ATTR_STR ) {
			if ( skillexp_skillid <= SKILL_ATTR_LUC ) {
				if ( cdata(STARTING_CDATA_FOOD_EXP + skillexp_skillid - 10, skillexp_charid) > 0 ) {
					locvar_skillmod_exp = limit(locvar_skillmod_exp * (100 + cdata(STARTING_CDATA_FOOD_EXP + skillexp_skillid - 10, skillexp_charid)) / 100, 0, 2000000000)
				}
			}
		}
		if ( findbuff(skillexp_charid, 85) != (-1) ) {
			locvar_skillmod_exp = limit(locvar_skillmod_exp * (100 + limitmax(ocdata(OCDATA_STARTING_CURSE_BUFF_TYPE + findbuff(skillexp_charid, 85) * 3 + 1, skillexp_charid) / 200, 500)) / 100, 0, 2000000000)
		}
		if ( locvar_skillmod_exp == 0 ) {
			if ( locvar_skillmod_growth == 400 & rnd(locvar_skillmod_lv / 100 + 1) == 0 ) {
				locvar_skillmod_exp = 1
			}
			else {
				if ( rnd(locvar_skillmod_lv / 10 + 1) == 0 ) {
					locvar_skillmod_exp = 1
				}
				else {
					return 0
				}
			}
		}
	}
	else {
		locvar_skillmod_exp = skillexp_amount
	}
	if ( gArea  == AREA_SHOW_HOUSE ) {
		locvar_skillmod_exp /= 5
	}
	if ( locvar_skillmod_exp > 0 ) {
		if ( locvar_skillmod_exp >= 1000 ) {
			if ( locvar_skillmod_exp > locvar_skillmod_lv * 1000 ) {
				locvar_skillexp_expbk = locvar_skillmod_exp
				locvar_skillmod_exp = limitmax(locvar_skillmod_exp, locvar_skillmod_lv * 1000)
				locvar_skillexp_growth2 = (locvar_skillexp_expbk - locvar_skillmod_exp) / 100
			}
		}
		if ( skillexp_skillid >= SKILL_WEAPON_LONGSWORD ) {
			if ( skillexp_arg5 != 1000 ) {
				locvar_skillexp_exp2 = rndex(limit(cExpToNext(skillexp_charid) * locvar_skillmod_exp / 1000 / (cLevel(skillexp_charid) + skillexp_arg5) + 1, 1, 1000000)) + rnd(2)
				cExp(skillexp_charid) += locvar_skillexp_exp2
				if ( skillexp_charid == CHARA_PLAYER ) {
					gSleepExp += locvar_skillexp_exp2
				}
			}
		}
	}
	locvar_skillmod_exp += sexp(skillexp_skillid, skillexp_charid)
	if ( locvar_skillmod_exp >= 1000 ) {
		locvar_skillmod_lvchange = locvar_skillmod_exp / 1000
		locvar_skillmod_exp = locvar_skillmod_exp \ 1000
		locvar_skillmod_lv += locvar_skillmod_lvchange
		if ( nc_intb_ndf == 0 ) {
			if ( skillexp_charid < MAX_CHARA_FOLLOWER ) {
				if ( skillexp_skillid == SKILL_ATTR_LIFE ) {
					if ( ncgPointsTrainedLife < 2000000000 ) {
						ncgPointsTrainedLife += locvar_skillmod_lvchange
					}
				}
				if ( skillexp_skillid == SKILL_ATTR_MANA ) {
					if ( ncgPointsTrainedMana < 2000000000 ) {
						ncgPointsTrainedMana += locvar_skillmod_lvchange
					}
				}
				if ( skillexp_skillid > 9 & skillexp_skillid <= SKILL_ATTR_CHA ) {
					if ( ncgdata(200 + skillexp_skillid) < 2000000000 ) {
						ncgdata(200 + skillexp_skillid) += locvar_skillmod_lvchange
					}
				}
			}
		}
		repeat locvar_skillmod_lvchange
			locvar_skillmod_growth = int(double(locvar_skillmod_growth) * 0.9)
			if ( ogTitleAthana == 2 ) {
				if ( locvar_skillmod_growth < 51 ) {
					locvar_skillmod_growth = 51
				}
				if ( trophycheck(22) == 2 & locvar_skillmod_growth < 101 ) {
					locvar_skillmod_growth = 101
				}
			}
			else {
				if ( locvar_skillmod_growth < 1 ) {
					locvar_skillmod_growth = 1
				}
				if ( trophycheck(22) == 2 & locvar_skillmod_growth < 51 ) {
					locvar_skillmod_growth = 51
				}
			}
		loop
		if ( locvar_skillexp_growth2 != 0 ) {
			locvar_skillmod_growth += locvar_skillexp_growth2
			if ( ogTitleAthana == 2 ) {
				if ( locvar_skillmod_growth > 450 + nc_intb_gro1 ) {
					locvar_skillmod_growth = 450 + nc_intb_gro1
				}
			}
			else {
				if ( locvar_skillmod_growth > 400 + nc_intb_gro1 ) {
					locvar_skillmod_growth = 400 + nc_intb_gro1
				}
			}
			locvar_skillexp_growth2 = 0
		}
		sdata(skillexp_skillid + STARTING_SKILL_SPACT, skillexp_charid) = limit(locvar_skillmod_lv, 0, 2000) * 1000000 + locvar_skillmod_exp * 1000 + locvar_skillmod_growth
		if ( skillexp_charid <= 15 ) {
			if ( ogTitleJunkie != 0 ) {
				if ( 2000 < locvar_skillmod_lv ) {
					sdataex(skillexp_skillid, skillexp_charid) = limit(locvar_skillmod_lv - 2000, 0, 97999)
				}
			}
		}
		if ( synccheck(skillexp_charid, -1) | petcheck(skillexp_charid) ) {
			if ( skillexp_charid == CHARA_PLAYER | petcheck(skillexp_charid) ) {
				snd SOUNDLIST_DING3
				txtef COLOR_GREEN
				msgalert = 1
			}
			txt -1, txtskillchange(skillexp_skillid, 0, skillexp_charid)
			gosub *label_2665
		}
		r1 = skillexp_charid
		gosub *charaRefresh
		return 1
	}
	if ( locvar_skillmod_exp < 0 ) {
		locvar_skillmod_lvchange = -locvar_skillmod_exp / 1000 + 1
		locvar_skillmod_exp = 1000 + locvar_skillmod_exp \ 1000
		if ( locvar_skillmod_lv - locvar_skillmod_lvchange < 1 ) {
			locvar_skillmod_lvchange = locvar_skillmod_lv - 1
			if ( locvar_skillmod_lv == 1 ) {
				if ( locvar_skillmod_lvchange == 0 ) {
					locvar_skillmod_exp = 0
				}
			}
		}
		locvar_skillmod_lv -= locvar_skillmod_lvchange
		repeat locvar_skillmod_lvchange
			locvar_skillmod_growth = int(double(locvar_skillmod_growth) * ((-0.9) + 2)) + 1
			if ( ogTitleAthana == 2 ) {
				if ( locvar_skillmod_growth > 450 + nc_intb_gro1 ) {
					locvar_skillmod_growth = 450 + nc_intb_gro1
				}
			}
			else {
				if ( locvar_skillmod_growth > 400 + nc_intb_gro1 ) {
					locvar_skillmod_growth = 400 + nc_intb_gro1
				}
			}
		loop
		sdata(skillexp_skillid + STARTING_SKILL_SPACT, skillexp_charid) = limit(locvar_skillmod_lv, 0, 2000) * 1000000 + locvar_skillmod_exp * 1000 + locvar_skillmod_growth
		if ( skillexp_charid <= 15 ) {
			if ( ogTitleJunkie != 0 ) {
				sdataex(skillexp_skillid, skillexp_charid) = limit(locvar_skillmod_lv - 2000, 0, 97999)
			}
		}
		if ( synccheck(skillexp_charid, -1) | petcheck(skillexp_charid) ) {
			if ( skillexp_charid == CHARA_PLAYER | petcheck(skillexp_charid) ) {
				if ( locvar_skillmod_lvchange != 0 ) {
					msgalert = 1
					txtef COLOR_RED
					txt -1, txtskillchange(skillexp_skillid, 1, skillexp_charid)
					gosub *label_2665
				}
			}
		}
		r1 = skillexp_charid
		gosub *charaRefresh
		return 1
	}
	sdata(skillexp_skillid + STARTING_SKILL_SPACT, skillexp_charid) = limit(locvar_skillmod_lv, 0, 2000) * 1000000 + locvar_skillmod_exp * 1000 + locvar_skillmod_growth
	if ( skillexp_charid <= 15 ) {
		if ( ogTitleJunkie != 0 ) {
			sdataex(skillexp_skillid, skillexp_charid) = limit(locvar_skillmod_lv - 2000, 0, 97999)
		}
	}
	return 0

#defcfunc calcfame int calcfame_charid, int calcfame_amount
	locvar_calcfame_p = limitintmax(double(calcfame_amount) * 100) / (100 + limitintmax(double(cFame(calcfame_charid)) / 100 * (cFame(calcfame_charid) / 100)) / 2500)
	if ( locvar_calcfame_p < 5 ) {
		locvar_calcfame_p = rnd(5) + 1
	}
	return locvar_calcfame_p

#deffunc decfame int decfame_charid, int decfame_amount
	locvar_calcfame_p = cFame(decfame_charid) / decfame_amount + 5
	locvar_calcfame_p = locvar_calcfame_p + rndex(locvar_calcfame_p / 2) - rndex(locvar_calcfame_p / 2)
	cFame(decfame_charid) -= locvar_calcfame_p
	if ( cFame(decfame_charid) < 0 ) {
		cFame(decfame_charid) = 0
	}
	return locvar_calcfame_p

#defcfunc getworker int getworker_arg1, int getworker_arg2
	locvar_getworker_p = -1
	repeat 16
		if ( cnt == 0 ) {
			continue
		}
		if ( getworker_arg2 != 0 ) {
			if ( cnt != getworker_arg2 ) {
				continue
			}
		}
		if ( cType(cnt) == getworker_arg1 ) {
			if ( ocPetJobSkill(cnt) != 151 ) {
				locvar_getworker_p = cnt
				break
			}
		}
	loop
	return locvar_getworker_p

#deffunc removeworker int removeworker_arg1
	repeat 16
		if ( cnt == 0 ) {
			continue
		}
		if ( cType(cnt) == removeworker_arg1 ) {
			if ( ocPetJobSkill(cnt) != 151 ) {
				cType(cnt) = 0
			}
		}
	loop
	return

#defcfunc calcshopreform
	return mMaxInv * 100 + 1000

#deffunc delmef int delmef_arg1
	if ( mefExist(delmef_arg1) == MEF_TYPE_NUKE ) {
		evadd EVENT_NUKE, mefX(delmef_arg1), mefY(delmef_arg1)
	}
	mapMef(mefX(delmef_arg1), mefY(delmef_arg1)) = 0
	mefExist(delmef_arg1) = MEF_TYPE_NONE
	locvar_delmef_i = 200 - 1
	repeat 200 - delmef_arg1
		if ( mefExist(locvar_delmef_i) != MEF_TYPE_NONE ) {
			repeat 9
				mef(cnt, delmef_arg1) = mef(cnt, locvar_delmef_i)
			loop
			mapMef(mefX(locvar_delmef_i), mefY(locvar_delmef_i)) = delmef_arg1 + 1
			mefExist(locvar_delmef_i) = MEF_TYPE_NONE
			break
		}
		locvar_delmef_i--
	loop
	return

#deffunc addmef int addmef_x, int addmef_y, int addmef_mefid, int addmef_chip, int addmef_duration, int addmef_power, int addmef_source, int addmef_itemid, int addmef_cursestate, int addmef_color
	locvar_addmef_p = mapId(addmef_x, addmef_y)
	if ( addmef_mefid == MEF_TYPE_FIRE ) {
		if ( chipm(CHIPM_ROLE, locvar_addmef_p) == MAP_CHIP_ROLE_WATER ) {
			return
		}
	}
	if ( mapMef(addmef_x, addmef_y) != 0 ) {
		locvar_delmef_i = mapMef(addmef_x, addmef_y) - 1
	}
	else {
		locvar_delmef_i = -1
		repeat 200
			if ( mefExist(cnt) == MEF_TYPE_NONE ) {
				locvar_delmef_i = cnt
				break
			}
		loop
		if ( locvar_delmef_i == (-1) ) {
			locvar_delmef_i = rnd(200)
			mapMef(mefX(locvar_delmef_i), mefY(locvar_delmef_i)) = 0
		}
	}
	mefExist(locvar_delmef_i) = addmef_mefid, addmef_chip + addmef_color * 10000, addmef_x, addmef_y, addmef_duration, addmef_power, addmef_source, addmef_itemid, addmef_cursestate
	mapMef(addmef_x, addmef_y) = locvar_delmef_i + 1
	return

#deffunc cell_featset int cell_featset_x, int cell_featset_y, int cell_featset_chipid, int cell_featset_featid, int cell_featset_featsubid, int cell_featset_param
	if ( cell_featset_chipid != (-1) ) {
		locvar_cell_featset_feat = cell_featset_chipid
	}
	else {
		locvar_cell_featset_feat = mapFeat(cell_featset_x, cell_featset_y) \ 1000
	}
	if ( cell_featset_featid != (-1) ) {
		locvar_cell_featset_feat(1) = cell_featset_featid
	}
	else {
		locvar_cell_featset_feat(1) = mapFeat(cell_featset_x, cell_featset_y) / 1000 \ 100
	}
	if ( cell_featset_featsubid != (-1) ) {
		locvar_cell_featset_feat(2) = limit(cell_featset_featsubid, 0, 99)
	}
	else {
		locvar_cell_featset_feat(2) = mapFeat(cell_featset_x, cell_featset_y) / 100000 \ 100
	}
	if ( cell_featset_param != (-1) & cell_featset_param < 215 ) {
		locvar_cell_featset_feat(3) = cell_featset_param
	}
	else {
		locvar_cell_featset_feat(3) = mapFeat(cell_featset_x, cell_featset_y) / 10000000
	}
	mapFeat(cell_featset_x, cell_featset_y) = locvar_cell_featset_feat + locvar_cell_featset_feat(1) * 1000 + locvar_cell_featset_feat(2) * 100000 + locvar_cell_featset_feat(3) * 10000000
	return

#deffunc cell_featread int cell_featread_arg1, int cell_featread_arg2, int cell_featread_arg2
	feat = mapFeat(cell_featread_arg1, cell_featread_arg2) \ 1000, mapFeat(cell_featread_arg1, cell_featread_arg2) / 1000 \ 100, mapFeat(cell_featread_arg1, cell_featread_arg2) / 100000 \ 100, mapFeat(cell_featread_arg1, cell_featread_arg2) / 10000000
	return 0

#deffunc cell_featclear int cell_featclear_arg1, int cell_featclear_arg2
	mapFeat(cell_featclear_arg1, cell_featclear_arg2) = 0
	return

#deffunc cell_check int cell_check_arg1, int cell_check_arg2
	cellaccess = 1
	cellchara = -1
	cellfeat = -1
	if ( cell_check_arg1 < 0 | cell_check_arg1 >= mWidth | cell_check_arg2 < 0 | cell_check_arg2 >= mHeight ) {
		cellaccess = 0
		return
	}
	if ( mapChara(cell_check_arg1, cell_check_arg2) != 0 ) {
		cellchara = mapChara(cell_check_arg1, cell_check_arg2) - 1
		cellaccess = 0
	}
	if ( mapFeat(cell_check_arg1, cell_check_arg2) != 0 ) {
		cellfeat = mapFeat(cell_check_arg1, cell_check_arg2) / 1000 \ 100
		if ( chipm(CHIPM_ATTRIB, mapFeat(cell_check_arg1, cell_check_arg2) \ 1000) & CHIPM_ATTRIB_CANT_PASS ) {
			cellaccess = 0
		}
	}
	if ( chipm(CHIPM_ATTRIB, mapId(cell_check_arg1, cell_check_arg2)) & CHIPM_ATTRIB_CANT_PASS ) {
		cellaccess = 0
	}
	return

#deffunc cell_check2 int cell_check2_prm0, int cell_check2_prm1
	cellaccess = 1
	cellfeat = -1
	if ( cell_check2_prm0 < 0 | cell_check2_prm0 >= mWidth | cell_check2_prm1 < 0 | cell_check2_prm1 >= mHeight ) {
		cellaccess = 0
		return
	}
	if ( mapFeat(cell_check2_prm0, cell_check2_prm1) != 0 ) {
		cellfeat = mapFeat(cell_check2_prm0, cell_check2_prm1) / 1000 \ 100
		if ( chipm(CHIPM_ATTRIB, mapFeat(cell_check2_prm0, cell_check2_prm1) \ 1000) & CHIPM_ATTRIB_CANT_PASS ) {
			cellaccess = 0
		}
	}
	if ( chipm(CHIPM_ATTRIB, mapId(cell_check2_prm0, cell_check2_prm1)) & CHIPM_ATTRIB_CANT_PASS ) {
		cellaccess = 0
	}
	return

#deffunc cell_swap int cell_swap_arg1, int cell_swap_arg2, int cell_swap_arg3, int cell_swap_arg4
	if ( gRider != 0 ) {
		if ( gRider == cell_swap_arg1 | gRider == cell_swap_arg2 ) {
			return 0
		}
	}
	if ( ocPetBeingRiddenIdx(cell_swap_arg1) != 0 ) {
		return 0
	}
	locvar_cell_swap_tc = cell_swap_arg2
	if ( locvar_cell_swap_tc == (-1) ) {
		if ( mapChara(cell_swap_arg3, cell_swap_arg4) != 0 ) {
			locvar_cell_swap_tc = mapChara(cell_swap_arg3, cell_swap_arg4) - 1
		}
	}
	if ( locvar_cell_swap_tc != (-1) ) {
		if ( ocPetBeingRiddenIdx(locvar_cell_swap_tc) != 0 ) {
			return 0
		}
		mapChara(cX(cell_swap_arg1), cY(cell_swap_arg1)) = locvar_cell_swap_tc + 1
		locvar_cell_swap_x2 = cX(locvar_cell_swap_tc)
		locvar_cell_swap_y2 = cY(locvar_cell_swap_tc)
		cX(locvar_cell_swap_tc) = cX(cell_swap_arg1)
		cY(locvar_cell_swap_tc) = cY(cell_swap_arg1)
	}
	else {
		mapChara(cX(cell_swap_arg1), cY(cell_swap_arg1)) = 0
		locvar_cell_swap_x2 = cell_swap_arg3
		locvar_cell_swap_y2 = cell_swap_arg4
	}
	mapChara(locvar_cell_swap_x2, locvar_cell_swap_y2) = cell_swap_arg1 + 1
	cX(cell_swap_arg1) = locvar_cell_swap_x2
	cY(cell_swap_arg1) = locvar_cell_swap_y2
	if ( cell_swap_arg1 == 0 | locvar_cell_swap_tc == 0 ) {
		if ( gRider ) {
			cX(gRider) = cX(CHARA_PLAYER)
			cY(gRider) = cY(CHARA_PLAYER)
		}
	}
	else {
		if ( ocPetRidingIdx(cell_swap_arg1) ) {
			cX(ocPetRidingIdx(cell_swap_arg1)) = cX(cell_swap_arg1)
			cY(ocPetRidingIdx(cell_swap_arg1)) = cY(cell_swap_arg1)
			return 0
		}
	}
	return 1

#deffunc cell_movechara int cell_movechara_arg1, int cell_movechara_arg2, int cell_movechara_arg3
	if ( mapChara(cell_movechara_arg2, cell_movechara_arg3) != 0 ) {
		locvar_cell_movechara_rc = mapChara(cell_movechara_arg2, cell_movechara_arg3) - 1
		if ( locvar_cell_movechara_rc == cell_movechara_arg1 ) {
			return
		}
		cell_swap cell_movechara_arg1, locvar_cell_movechara_rc
	}
	else {
		mapChara(cX(cell_movechara_arg1), cY(cell_movechara_arg1)) = 0
		cX(cell_movechara_arg1) = cell_movechara_arg2
		cY(cell_movechara_arg1) = cell_movechara_arg3
		mapChara(cX(cell_movechara_arg1), cY(cell_movechara_arg1)) = cell_movechara_arg1 + 1
	}
	return

#deffunc route_info var route_info_arg1, var route_info_arg2, int route_info_arg3
	if ( maxroute == 0 ) {
		return -1
	}
	if ( route(0, route_info_arg3 \ maxroute) == 1 ) {
		route_info_arg1 += route(1, route_info_arg3 \ maxroute)
	}
	else {
		route_info_arg2 += route(1, route_info_arg3 \ maxroute)
	}
	if ( route_info_arg3 \ maxroute \ 2 == 0 ) {
		if ( route(0, (route_info_arg3 + 1) \ maxroute) != route(0, route_info_arg3 \ maxroute) ) {
			return -1
		}
	}
	if ( route_info_arg3 >= maxroute ) {
		if ( route_info_arg1 < scx | route_info_arg2 < scy | route_info_arg1 >= scx + inf_screenw | route_info_arg2 >= scy + inf_screenh ) {
			return 0
		}
		if ( route_info_arg1 < 0 | route_info_arg2 < 0 | route_info_arg1 >= mWidth | route_info_arg2 >= mHeight ) {
			return 0
		}
		if ( chipm(CHIPM_ATTRIB, mapId(route_info_arg1, route_info_arg2)) & CHIPM_ATTRIB_CANT_SEE ) {
			return 0
		}
		if ( mapFeat(route_info_arg1, route_info_arg2) != 0 ) {
			cell_featread route_info_arg1, route_info_arg2
			if ( chipm(CHIPM_ATTRIB, feat) & CHIPM_ATTRIB_CANT_SEE ) {
				return 0
			}
		}
	}
	if ( route(1, route_info_arg3 \ maxroute) == 0 ) {
		return -1
	}
	return 1

*label_1136

#deffunc breath_list
	dim breathlist, 2, 100
	maxbreath = 0
	breathw = 1
	dx = cX(cc)
	dy = cY(cc)
	repeat skillTg(efid) \ 1000 + 1
		if ( route(0, cnt \ maxroute) == 1 ) {
			dx += route(1, cnt \ maxroute)
		}
		else {
			dy += route(1, cnt \ maxroute)
		}
		if ( cnt < 6 ) {
			if ( cnt \ 3 == 1 ) {
				breathw += 2
			}
		}
		else {
			breathw -= 2
			if ( breathw < 3 ) {
				breathw = 3
			}
		}
		repeat breathw
			ty = cnt - breathw / 2 + dy
			repeat breathw
				tx = cnt - breathw / 2 + dx
				if ( tx < scx | ty < scy | tx >= scx + inf_screenw | ty >= scy + inf_screenh ) {
					continue
				}
				if ( tx < 0 | ty < 0 | tx >= mWidth | ty >= mHeight ) {
					continue
				}
				if ( chipm(CHIPM_ATTRIB, mapId(tx, ty)) & CHIPM_ATTRIB_CANT_SEE ) {
					continue
				}
				if ( maxbreath >= 100 ) {
					break
				}
				p = 0
				repeat maxbreath
					if ( breathlist(0, cnt) == tx ) {
						if ( breathlist(1, cnt) == ty ) {
							p = 1
							break
						}
					}
				loop
				if ( p == 1 ) {
					continue
				}
				breathlist(0, maxbreath) = tx, ty
				maxbreath++
			loop
		loop
	loop
	return 1

#deffunc draw_emo int draw_emo_arg1, int draw_emo_arg2, int draw_emo_arg3
	gmode 2, 16, 16
	pos draw_emo_arg2 + 16, draw_emo_arg3
	gcopy BUFFER_INF, 32 + cEmoIcon(draw_emo_arg1) \ 100 * 16, 608
	return

#deffunc chara_preparepic int chara_preparepic_arg1, int chara_preparepic_arg2
	gsel BUFFER_CHR
	color 0
	boxf 0, 960, chipc(CHIPC_WIDTH, chara_preparepic_arg1), chipc(CHIPC_HEIGHT, chara_preparepic_arg1) + 960
	pos 0, 960
	if ( chara_preparepic_arg1 < 33 * 25 + 900 ) {
		gcopy 5 + 90 * (chara_preparepic_arg1 > 660 & chara_preparepic_arg1 < 825), chipc(CHIPC_X, chara_preparepic_arg1), chipc(CHIPC_Y, chara_preparepic_arg1), chipc(CHIPC_WIDTH, chara_preparepic_arg1), chipc(CHIPC_HEIGHT, chara_preparepic_arg1)
	}
	else {
		gcopy 35, chipc(CHIPC_X, chara_preparepic_arg1), chipc(CHIPC_Y, chara_preparepic_arg1), chipc(CHIPC_WIDTH, chara_preparepic_arg1), chipc(CHIPC_HEIGHT, chara_preparepic_arg1)
	}
	gfini chipc(CHIPC_WIDTH, chara_preparepic_arg1), chipc(CHIPC_HEIGHT, chara_preparepic_arg1)
	gfdec2 c_col(0, chara_preparepic_arg2), c_col(1, chara_preparepic_arg2), c_col(2, chara_preparepic_arg2)
	gsel selcur
	return

#deffunc preparepicitem_func int preparepicitem_func_prm0, int preparepicitem_func_prm1
	gsel BUFFER_ITEM
	color 0
	boxf 0, 960, chipi(CHIPI_WIDTH, preparepicitem_func_prm0), chipi(CHIPI_HEIGHT, preparepicitem_func_prm0) + 960
	if ( preparepicitem_func_prm0 == 528 ) {
		gmode 2
		pos 0, 960
		gcopy BUFFER_ITEM, 0, 768, inf_tiles, inf_tiles
		pos 0, 1008
		gzoom 22, 20, 5 + 90 * (preparepicitem_func_prm1 > 660 & preparepicitem_func_prm1 < 825), chipc(CHIPC_X, preparepicitem_func_prm1) + 8, chipc(CHIPC_Y, preparepicitem_func_prm1) + 4 + (chipc(CHIPC_HEIGHT, preparepicitem_func_prm1) > inf_tiles) * 8, chipc(CHIPC_WIDTH, preparepicitem_func_prm1) - 16, chipc(CHIPC_HEIGHT, preparepicitem_func_prm1) - 8 - (chipc(CHIPC_HEIGHT, preparepicitem_func_prm1) > inf_tiles) * 10, 1
		pos 6, 974
		gcopy BUFFER_ITEM, 0, 1008, 22, 20
		gsel selcur
		return
	}
	if ( preparepicitem_func_prm0 == 531 ) {
		pos 8, 1058 - chipc(CHIPC_HEIGHT, preparepicitem_func_prm1)
		gcopy 5 + 90 * (preparepicitem_func_prm1 > 660 & preparepicitem_func_prm1 < 825), chipc(CHIPC_X, preparepicitem_func_prm1) + 8, chipc(CHIPC_Y, preparepicitem_func_prm1) + 2, chipc(CHIPC_WIDTH, preparepicitem_func_prm1) - 16, chipc(CHIPC_HEIGHT, preparepicitem_func_prm1) - 8
		gmode 4, , , 150
		color 0, 0, 0
		pos 0, 960 + (chipc(CHIPC_HEIGHT, preparepicitem_func_prm1) == inf_tiles) * 48
		gcopy BUFFER_ITEM, 144, 768 + (chipc(CHIPC_HEIGHT, preparepicitem_func_prm1) > inf_tiles) * 48, inf_tiles, chipc(CHIPC_HEIGHT, preparepicitem_func_prm1) + (chipc(CHIPC_HEIGHT, preparepicitem_func_prm1) > inf_tiles) * 48
		gmode 2
		gsel selcur
		return
	}
	if ( preparepicitem_func_prm0 == 529 ) {
		pos 0, 1056 - chipc(CHIPC_HEIGHT, preparepicitem_func_prm1)
		gcopy 5 + 90 * (preparepicitem_func_prm1 > 660 & preparepicitem_func_prm1 < 825), chipc(CHIPC_X, preparepicitem_func_prm1), chipc(CHIPC_Y, preparepicitem_func_prm1), chipc(CHIPC_WIDTH, preparepicitem_func_prm1), chipc(CHIPC_HEIGHT, preparepicitem_func_prm1)
		gmode 2
		gsel selcur
		return
	}
	pos 0, 960
	gcopy BUFFER_ITEM, chipi(CHIPI_X, preparepicitem_func_prm0), chipi(CHIPI_Y, preparepicitem_func_prm0), chipi(CHIPI_WIDTH, preparepicitem_func_prm0), chipi(CHIPI_HEIGHT, preparepicitem_func_prm0)
	gfini chipi(CHIPI_WIDTH, preparepicitem_func_prm0), chipi(CHIPI_HEIGHT, preparepicitem_func_prm0)
	gfdec2 c_col(0, preparepicitem_func_prm1), c_col(1, preparepicitem_func_prm1), c_col(2, preparepicitem_func_prm1)
	gsel selcur
	return

#deffunc preparepicitemex int preparepicitemex_prm0
	srcwid = 1
	picno = iPic(preparepicitemex_prm0) \ 1000
	colno = iCol(preparepicitemex_prm0)
	havedirection = 0
	if ( iID(preparepicitemex_prm0) == ITEM_ID_CARNEADES_PLANK ) {
		picno = 1650 + useritemdata(39, iCItemIdx(preparepicitemex_prm0))
		srcwid = 30
	}
	else {
		if ( picno == 528 | picno == 531 | picno == 529 ) {
			if ( iSubName(preparepicitemex_prm0) == 343 ) {
				if ( iCNpcId(preparepicitemex_prm0) != usernpcmax ) {
					if ( userdata2(8, iCNpcId(preparepicitemex_prm0)) != 0 ) {
						colno = limit(userdata2(8, iCNpcId(preparepicitemex_prm0)), 0, 33 * 25)
						ccolno = limit(userdata2(9, iCNpcId(preparepicitemex_prm0)), 0, 30)
					}
					else {
						colno = 825 + iCNpcId(preparepicitemex_prm0)
						ccolno = 0
					}
				}
				else {
					colno = 1
					ccolno = 0
				}
			}
			else {
				ccolno = refchara(iSubName(preparepicitemex_prm0), DBSPEC_CHARA_COL)
			}
		}
		else {
			if ( use_exticon ) {
				repeat 1
					if ( iKnown(preparepicitemex_prm0) < ichipexchangeidranktable(iID(preparepicitemex_prm0)) ) {
						break
					}
					if ( ichipexchangeidcurse(iID(preparepicitemex_prm0)) == 1 & iStatus(preparepicitemex_prm0) == ITEM_STATUS_BLESSED | (ichipexchangeidcurse(iID(preparepicitemex_prm0)) == 2 & iStatus(preparepicitemex_prm0) < ITEM_STATUS_NORMAL) ) {
						break
					}
					if ( iID(preparepicitemex_prm0) == ITEM_ID_FISH | iID(preparepicitemex_prm0) == ITEM_ID_FISH_JUNK ) {
						if ( iParam2(preparepicitemex_prm0) == 0 ) {
							picno = 99 + (iSubName(preparepicitemex_prm0) - 1)
							if ( iSubName(preparepicitemex_prm0) == 30 ) {
								picno += 33 * (gRandSeedA \ ichipexchghbooks)
							}
							picno += 33 * 25
							srcwid = 31
							break
						}
					}
					if ( refitem(iID(preparepicitemex_prm0), DBSPEC_TYPE, preparepicitemex_prm0) == FILTER_ITEM_FOOD ) {
						if ( refitem(iID(preparepicitemex_prm0), DBSPEC_TYPE_MINOR, preparepicitemex_prm0) == FILTER_ITEM_FOOD_HERB ) {
							if ( iParam1(preparepicitemex_prm0) != 0 ) {
								if ( iParam2(preparepicitemex_prm0) != 0 ) {
									if ( iMaterial(preparepicitemex_prm0) != ITEM_MATERIAL_RAW | iParam3(preparepicitemex_prm0) >= 0 ) {
										picno = 300 + iParam2(preparepicitemex_prm0)
										srcwid = 31
										break
									}
								}
							}
						}
						else {
							if ( iParam1(preparepicitemex_prm0) != 0 ) {
								if ( iParam2(preparepicitemex_prm0) != 0 ) {
									if ( iMaterial(preparepicitemex_prm0) != ITEM_MATERIAL_RAW | iParam3(preparepicitemex_prm0) >= 0 ) {
										picno = (iParam1(preparepicitemex_prm0) / 1000 - 1) * 10 + iParam2(preparepicitemex_prm0) + 33 * 25
										srcwid = 31
										break
									}
								}
							}
						}
					}
					if ( ichipexchangetable(iID(preparepicitemex_prm0)) ) {
						havedirection = ichipexchangetable(iID(preparepicitemex_prm0)) / 1000000
						if ( ichipexchangetable(iID(preparepicitemex_prm0)) \ 1000000 >= 10000 ) {
							colno = ichipexchangetable(iID(preparepicitemex_prm0)) \ 1000000 / 10000 - 1
						}
						picno = ichipexchangetable(iID(preparepicitemex_prm0)) \ 10000
						if ( havedirection ) {
							srcwid = 33
						}
						else {
							srcwid = 31
						}
						break
					}
				loop
			}
		}
	}
	gsel BUFFER_ITEM
	color 0
	boxf 0, 960, chipi(CHIPI_WIDTH, picno), chipi(CHIPI_HEIGHT, picno) + 960
	if ( srcwid == 1 ) {
		if ( picno == 528 ) {
			gmode 2
			pos 0, 960
			gcopy BUFFER_ITEM, 0, 768, inf_tiles, inf_tiles
			pos 0, 1008
			gzoom 22, 20, 5 + 90 * (colno > 660 & colno < 825), chipc(CHIPC_X, colno) + 8, chipc(CHIPC_Y, colno) + 4 + (chipc(CHIPC_HEIGHT, colno) > inf_tiles) * 8, chipc(CHIPC_WIDTH, colno) - 16, chipc(CHIPC_HEIGHT, colno) - 8 - (chipc(CHIPC_HEIGHT, colno) > inf_tiles) * 10, 1
			gfini chipc(CHIPC_WIDTH, colno), chipc(CHIPC_HEIGHT, colno)
			gfdec2 c_col(0, ccolno), c_col(1, ccolno), c_col(2, ccolno)
			pos 6, 974
			gcopy BUFFER_ITEM, 0, 1008, 22, 20
			gsel selcur
			return picno
		}
		if ( picno == 531 ) {
			pos 8, 1058 - chipc(CHIPC_HEIGHT, colno)
			gcopy 5 + 90 * (colno > 660 & colno < 825), chipc(CHIPC_X, colno) + 8, chipc(CHIPC_Y, colno) + 2, chipc(CHIPC_WIDTH, colno) - 16, chipc(CHIPC_HEIGHT, colno) - 8
			gfini chipc(CHIPC_WIDTH, colno), chipc(CHIPC_HEIGHT, colno)
			gfdec2 c_col(0, ccolno), c_col(1, ccolno), c_col(2, ccolno)
			gmode 4, , , 150
			color 0, 0, 0
			pos 0, 960 + (chipc(CHIPC_HEIGHT, colno) == inf_tiles) * 48
			gcopy BUFFER_ITEM, 144, 768 + (chipc(CHIPC_HEIGHT, colno) > inf_tiles) * 48, inf_tiles, chipc(CHIPC_HEIGHT, colno) + (chipc(CHIPC_HEIGHT, colno) > inf_tiles) * 48
			gmode 2
			gsel selcur
			return picno
		}
		if ( picno == 529 ) {
			pos 0, 1056 - chipc(CHIPC_HEIGHT, colno)
			gcopy 5 + 90 * (colno > 660 & colno < 825), chipc(CHIPC_X, colno), chipc(CHIPC_Y, colno), chipc(CHIPC_WIDTH, colno), chipc(CHIPC_HEIGHT, colno)
			gfini chipc(CHIPC_WIDTH, colno), chipc(CHIPC_HEIGHT, colno)
			gfdec2 c_col(0, ccolno), c_col(1, ccolno), c_col(2, ccolno)
			gmode 2
			gsel selcur
			return picno
		}
	}
	pos 0, 960
	fruittrees_f = 0
	if ( cfg_fruittrees == 1 ) {
		if ( existfile_fruittrees == 1 ) {
			if ( iID(preparepicitemex_prm0) == ITEM_ID_TREE_FRUIT ) {
				fruittrees_f = 1
				if ( iPic(preparepicitemex_prm0) == xy2pic(30, 17) ) {
					_switch_val = iParam2(preparepicitemex_prm0)
					repeat 1
						if ( _switch_val == 180 ) {
							gcopy 98, 0 * 48, 0, 48, 48 * 2
							break
						}
						if ( _switch_val == 181 ) {
							gcopy 98, 5 * 48, 0, 48, 48 * 2
							break
						}
						if ( _switch_val == 183 ) {
							gcopy 98, 1 * 48, 0, 48, 48 * 2
							break
						}
						if ( _switch_val == 192 ) {
							gcopy 98, 2 * 48, 0, 48, 48 * 2
							break
						}
						if ( _switch_val == 196 ) {
							gcopy 98, 4 * 48, 0, 48, 48 * 2
							break
						}
						if ( _switch_val == 197 ) {
							gcopy 98, 3 * 48, 0, 48, 48 * 2
							break
						}
						if ( _switch_val == 505 ) {
							gcopy 98, 6 * 48, 0, 48, 48 * 2
							break
						}
						gcopy 98, 0 * 48, 0, 48, 48 * 2
						break
					loop
				}
				else {
					gcopy srcwid, chipi(CHIPI_X, picno) + inv(39, preparepicitemex_prm0) * 48, chipi(CHIPI_Y, picno), chipi(CHIPI_WIDTH, picno), chipi(CHIPI_HEIGHT, picno)
				}
			}
		}
	}
	if ( fruittrees_f == 0 ) {
		gcopy srcwid, chipi(CHIPI_X, picno) + inv(39, preparepicitemex_prm0) * 48, chipi(CHIPI_Y, picno), chipi(CHIPI_WIDTH, picno), chipi(CHIPI_HEIGHT, picno)
	}
	gfini chipi(CHIPI_WIDTH, picno), chipi(CHIPI_HEIGHT, picno)
	gfdec2 c_col(0, colno), c_col(1, colno), c_col(2, colno)
	gsel selcur
	return picno








































